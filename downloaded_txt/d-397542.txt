










david weiss














skip to main  |
      skip to sidebar






david weiss

















21 august 2008





unweary



starting today i'll be writing at a new blog location: http://unweary.com/blog/ i've redirected the old rss feed http://feeds.feedburner.com/davidweiss to the new blog. if you want to subscribe to the shiny new rss feed http://feeds.feedburner.com/unweary please go right ahead. at some point i'll take down the old rss feed.

this change includes an upgrade from blogger to movable type as my blogging platform, but if you sensed that there was more to the blog location change than just that, you were right. i'm "going indie", as they say. :-) this is something i've wanted to do for a long time and now is the time to make it official.

i quit working for the macbu at microsoft in december 2007 to go back to school. i'm very much enjoying school, and i'm trying hard to keep that my main focus, but i keep wanting to build stuff and publish it and unweary is just a natural result of that innate desire to create. i expect to build pretty focused, humble, non-life changing software that just makes regular things easier and better in some way. right now i'm mostly trying to decide which idea to tackle first. i feel like a kid in a candy shop!

so that's the news. i'm sure i'll write more about the adventure as it develops, but in the meantime, wish me luck!





posted by
david weiss


at
8/21/2008 01:46:00 pm


0
comments




 










labels:
news








02 july 2008





experience



especially with a code base that is mature, assumptions correctly made years ago can be terribly difficult to deal with later when the current and new assumptions reign. writing code that lasts even 5 years and "is robust" is what everyone wants to do for sure, but the recipe for doing just that is not easy to learn and even harder to actually do. for example, you might know what changes need to be made to conform to even the most obvious object oriented design principles, but the business requirements and time to market needs dictate leaving once again old crusty code alone and racking up yet another round of technical debt. over time, this technical debt will demand payment and the effects on your ability to hire, employee morale, design changes possible, speed of delivery, testing burden, marketing message etc. become very real and very painful. i wonder, can these concepts can be fully learned without actually experiencing pain? could you even attempt to learn these concepts experientially in college? my experience so far makes me think that one may know something intellectually, without really knowing it. it seems like for so many, one may talk about design patterns or abstraction or low coupling, but until you actually try to build something the other way, the painful way, you just don't appreciate what you are avoiding. what's worse, junior developers who, for no fault of their own lack experience with "the hard way" have a difficult time understanding why one must "go the long way around" to do what seems like such a direct solution. passing on the stories of the past and their consequences and lessons seems to be an unending challenge.from my economics book comes this fictional story which i think illustrates the point:"one pepsi plant is managed by an economics major with an mba and has a labor force with an average of 10 years of experience. this plant produces a larger output than does an otherwise identical plant that is managed by someone with no business training or experience and that has a young labor force that is new to bottling."i definitely fall into the "young labor force that is new to bottling" camp. in the technology industry there is a tendency to glorify the young and bright rather than those who have the experience and have paid the price to learn the lessons that matter in the long run. whenever i talk to some developer and we talk about where they learned some valuable lesson about software development, rarely do they refer to a book. almost invariably, they say, "i worked with joe on this project and he showed me x, y and z. i learned so much working with him." smart developers, experienced developers who know how to teach and share important lessons to junior programmers seem like a key to the experience problem. sadly, junior developers who have the presence of mind to ask, listen and apply what they hear are hard to find, and senior developers who are both willing and able to teach effectively are even more rare.perhaps the answer to all this is simple. perhaps it's just he or she who writes the most code, wins. what i mean by this is simply when one writes a lot of code that increases the probability that he or she will make more of the key mistakes needed to learn how to write software with longevity. just getting more exposure to "how bad things can get" helps bring a sober reality to each line of code written thereafter.what's remarkable about all this, is that failures in teaching and learning are what keep us "discovering" new ideas that are 40 years old. truly, "there is no new thing under the sun."





posted by
david weiss


at
7/02/2008 09:58:00 am


2
comments




 










labels:
learning,
programming,
software








13 june 2008





don't fight the music



as with most forms of art, there are those pieces of music or sculpture or painting that you'll dislike. perhaps what they portray or teach don't match with your ideals of right and wrong. you'll disagree on a moral level. perhaps they bring forth memories of the past. maybe they just look or sound chaotic and simply don't make any sense to you. in all honesty you may not know why you don't like the art, but it might just be grating to you and make you want to turn away. still, there was and often is a real, living, feeling, breathing human being full of senses, sympathies, misgivings, prejudice and paradoxes behind that creation. behind all art, prose and poetry are the feelings approximated in the expressions of their craft. the ability to see and feel through the art into the heart of another person, this is the challenge and amazing quality of art. everyone has a song and they are always singing it. they want to be heard, really listened to, and find out they are not alone.appreciating art because of the human behind it, has for me become a simile to working with people with whose opinions i disagree. my dad would say, "son, behavior has its reasons." i first remember him saying this when i worked as a scout leader and got a front seat to the varied expressions of teenage boys. invariably as i got to know each boy, i found many reasons for strongly held opinions, and behaviors. often, the life experiences behind these behaviors even for young boys are deep and poignant.i see similar issues when working in a team of people. the disagreements had in office discussions of the "obviously objective" technology problems often have their roots in other aspects of life much deeper and more powerful and often hidden. this is why teams that have learned to interact with each other "off the clock" as friends and treat each other as respected individuals, for who they are, today, are more successful at solving problems.i like a good debate and enjoy the challenge of a difficult problem and opposing viewpoints. my experience at microsoft was of a very "challenging" kind of culture. there you can't squeak out an idea without several counters and objections. this can be good, honest disagreement, but also can turn into ugly contention that yields no redeeming fruit. (it can also drown out innovation since ideas don't have time to germinate and grow and most importantly interact.) everyone has different tolerance levels for this kind of discord and those who are naturally shy, not quick witted in a debate, or easily persuaded will often find themselves quieted and discontent. this is especially sad when that individual is full of really good ideas, ideas that need to be listened to and acted upon.certainly you can't change others, but how can you avoid the destructive discord? how do you know when a good debate has turned into a bad debate? i have noticed in myself the following warning signs:respect. if i don't have a deep respect, on a personal level, for the people with whom i'm working, a discussion can degrade incredibly fast. when i'm working with people like this, i have to keep on a higher state of alert.civility vs. hostility. this includes the obvious things like pointing and repeating "you" a lot. in all things keep the discussion civil. take the time to reinforce with sincerity that you think there's something you don't understand. let them know you are pushing forward because you think there's something important worth understanding.desire to understand. when i sense my desire to understand dissipate and my desire to prove myself right increase, this is a sure indication that the discussion is heading down a destructive path. i can feel it. there's something not right in the air. i get tense, not relaxed. these are signs for me that i need to regroup, reevaluate and possibly try again later.judgement. another indicator is if i am in my mind passing judgement on the individual. i can sense this when i find that i'm thinking about what i'm going to say next while they are still talking, or when i interrupt their thoughts and don't let them finish. i think i already know what they are going to say, so why wait it out? this kind of impetuous behavior indicates that i'm placing myself on a higher moral ground, and this lack of humility doesn't allow understanding, and without understanding, there's little possibility of unity or resolution.i'm sure there are other even better ways to avoid the pointless and destructive arguments, but this is what i've found so far. in reality, everyone has a song. listen to it. find the art in it. discover what it is saying and if possible the reasons behind the melody. don't fight the music. there's a person in there waiting to be found.





posted by
david weiss


at
6/13/2008 09:20:00 am


3
comments




 










labels:
adversity,
management,
potential








11 june 2008





management



i just found this great quote by dee hock, founder and ceo of visa.
i ask each person to describe the single most important responsibility of any manager. the incredibly diverse responses always have one thing in common. all are downward looking. management inevitably has to do with exercise of authority — with selecting employees, motivating them, training them, appraising them, organizing them, directing them, controlling them. that perception is mistaken.
the first and paramount responsibility of anyone who purports to manage is to manage self, one’s own integrity, character, ethics, knowledge, wisdom, temperament, words, and acts. it is a complex, never-ending, incredibly difficult, oft-shunned task. management of self is something at which we spend little time and rarely excel precisely because it is so much more difficult than prescribing and controlling the behavior of others. without management of self, no one is fit for authority, no matter how much they acquire. the more authority they acquire the more dangerous they become. it is the management of self that should have half of our time and the best of our ability. and when we do, the ethical, moral, and spiritual elements of managing self are inescapable.
asked to identify the second responsibility of any manager, again people produce a bewildering variety of opinions, again downward-looking. another mistake. the second responsibility is to manage those who have authority over us: bosses, supervisors, directors, regulators, ad infinitum. in an organized world, there are always people with authority over us. without their consent and support, how can we follow conviction, exercise judgment, use creative ability, achieve constructive results, or create conditions by which others can do the same? managing superiors is essential. devoting a quarter of our time and ability to that effort is not too much.
asked for the third responsibility, people become a bit uneasy and uncertain. yet, their thoughts remain on subordinates. mistaken again. the third responsibility is to manage one’s peers — those over whom we have no authority and who have no authority over us — associates, competitors, suppliers, customers — the entire environment, if you will. without their support, respect, and confidence, little or nothing can be accomplished. peers can make a small heaven or hell of our life. is it not wise to devote at least a fifth of our time, energy, and ingenuity to managing peers?
asked for the fourth responsibility, people have difficulty coming up with an answer, for they are now troubled by thinking downward. however, if one has attended to self, superiors, and peers, there is little else left. the fourth responsibility is to manage those over whom we have authority.
the common response is that all one’s time will be consumed managing self, superiors, and peers. there will be no time to manage subordinates. exactly! one need only select decent people, introduce them to the concept, induce them to practice it, and enjoy the process. if those over whom we have authority properly manage themselves, manage us, manage their peers, and replicate the process with those they employ, what is there to do but see they are properly recognized, rewarded, and stay out of their way? it is not making better people of others that management is about. it’s about making a better person of self. income, power, and titles have nothing to do with that.
your example can be your greatest method of influence. sadly, for some, you may be doing all of these things and find very little appreciation from those you manage. that's okay. they may think, "what does my manager do?", but it doesn't matter that they fully understand, unless you are preparing someone to take your place. your job is not to prove your worth to those you manage. if your team is feeling individually appreciated, inspired, free to explore and get things done, then you are largely doing right by them. still, your team will likely fail if you don't manage your superiors, peers and yourself properly, which is to say, i agree whole heartedly with dee hock's comments above.





posted by
david weiss


at
6/11/2008 10:55:00 am


2
comments




 










labels:
business,
management,
perspective








15 may 2008





contrast



i've visited a lot of places around the world, but i've only really lived in a few places. i grew up in redmond, washington, the redmond before microsoft. the little town with one stop light on leary way and fields next to the library where i would ride my bmx bike. i grew to love the green, tall trees, massive amounts of rain and the feeling of misty mornings and amazing sunsets. rivers were all around me and the ocean never far away. the mountains either the olympics to the west or the cascades to the east were ever present. i honestly couldn't imagine a better place to grow up.i have also lived in northeast brazil for 2 years. there is some desert there, but mostly verdant forests, jungles, farm land and grass lands. there, it seemed like you couldn't drop anything on the ground but that it would grow. again i was close the the ocean and while i didn't spend much time there, i got to know fishers and farmers and cattle ranchers all of whom helped me to see life more clearly. the green you experience in the equatorial areas in brazil is a different green than i experienced back home in the northwest. it was a brighter and more vivid green, not the dark, wet mossy green of the pacific rain forests. it also amazed me how on the equator, there is no dusk. the sun sets so fast, you can turn your head and miss it. but with all the sun and rain and rivers, the tall trees of the jungle were always close by. the mango trees and the huge jaca trees seemed to always provide shade and something to look up to.imagine my surprise to move to southeastern idaho, in the high desert plains. comparatively few rivers, though there are lots of irrigation canals. flat land, most of it lava rock. harsh winters and an overall color i'd describe as, well, brown. trees here are a green color, but with a muted brown to them. the ocean seems a distant dream and large bodies of water few and far between. while we drove to our new home for the first time, i commented to my wife, "man, this is ugly!" now, least i offend my fellow idahoans, we are learning more about this new climate and the wonderful things to explore here, and i'm sure those of you who have braved the high desert plains will have much advice to add, but it's still a shock and the contrast is very real.contrast often allows you to see things more clearly, and today, i saw very real beauty in this area, for the first time. and i saw it in the trees. what struck me is how solid, sturdy and unyielding these trees are. there are trees planted and nurtured by those living around houses or in the city, but the trees that captured my mind are those out on the plains. these trees are growing up amidst the driving sub-zero wind and snow of winter and withering heat of summer, from a bed of lava rock! it's as if these trees are saying to mother nature, "sure, i'll grow here, right where you planted me." and they do grow. against all the odds for survival, they survive! they take in carbon dioxide, unusable by most around them and exhale precious oxygen into the high altitude air. in the search for water, they break up the rock and begin to make dirt for other, less sturdy plants who will benefit years after they have died. they bear the weight of heavy snows and heavier ice. they just seem to "take it" and keep living, untiringly and unheralded, these miracles of nature do their part to grow.perhaps my love of trees comes from my childhood growing up around them. perhaps i took for granted the trees, water and green always around me. what ever it might be, for me, these lonely, windswept, dust covered but undaunted trees are inspiring.





posted by
david weiss


at
5/15/2008 09:29:00 am


2
comments




 










labels:
adversity,
hope,
perspective








29 april 2008





by example



microsoft's recent introduction of live mesh is a perfect example of a core difference between apple and microsoft. apple is, at heart, a product company. microsoft is, at heart, a platform company. both produce products and platforms, but the way they approach the problem and communicate with developers is decidedly different.with live mesh microsoft says, "come, build on our platform and do amazing things!" what is the oft cited example for using live mesh? multi-device synchronization of data. now, to be sure, this is a big and very hard problem to solve. in fact, i really wish apple's sync services were much, much better, but do you wake up in the morning thinking, "man, i really have a multi-device synchronization problem?" most people don't. what they do think is, "man it's great that when i put stuff on the web, i can get it wherever i am. all i need is a web browser." you see, syncing folders or sharing data across devices isn't top of mind in the way a developer thinks about it. microsoft's challenge is mapping their platform to real problems in a persuasive way.contrast this with apple's normal product focused pattern. first they release a product that solves a real, tangible problem people have. say, "i hate it that i have to carry around my ipod and my cell phone everywhere!" or "man i wish i could buy that cool song i just heard, right now." or "i have so many digital photos, i wish there was an easy way to do something cool with them." or "man i hate it when i loose files on my computer, i wish i could just go back in time." to solve these problems apple, like microsoft, has to build a platform, but this platform is built for a product first, which they use and improve. then when they talk to developers they can say, "did you see this cool thing we just did? you can do the same thing or even something better! here's how we did it..." it's the difference between saying, "here are the tools, let me show you how to use them." and "i used these tools to do this great thing. let me show you how and maybe you can do the same thing." ultimately, it's leadership by example.another great example is apple's use of the cocoa apis in their own applications. apple builds amazing products and then is able to say to developers, "we used the same apis available to you today!" contrast this again to microsoft. windows vista was released with some remarkable new c# apis. many of them very cool and very interesting, but what is microsoft office written in? c and c++. what apis does office use? a multitude of office only apis and libraries shared among the applications. does this hurt c# and the new "winfx" platform "street cred"? i think so.ultimately, apple and microsoft are trying to solve many of the same problems, but the path you choose while logical to you, may not be so logical to those you most need to persuade and inspire. no one can argue with the results. for me apple's "solution first, platform second" approach makes for easy understanding of new ideas as well as providing the activation energy needed to try something new.





posted by
david weiss


at
4/29/2008 10:09:00 am


9
comments




 










labels:
apple,
cocoa,
creativity,
future technology,
innovation,
microsoft,
windows








21 april 2008





metacognitive miscalibration



a few tweets ago, (i always feel weird referring to twitter in the past tense) i posted: why are the unintelligent or uninformed so arrogantly confident while the intelligent and well informed so often unsure and apprehensive? there is something very human to thinking you know more than you really do about a subject or issue. while, this problem can be seen in many areas generally it's particularly acute in software development. for example...applescript in office xback when mac os x was just about to go 10.0.0 we were busy working on getting mac office working on the new platform. there was a lot of pain involved with the transition. many apis had been removed and alternatives needed to be provisioned (and tested), the new aqua interface guidelines had to be applied to the whole of office and a host of other issues needed to be addressed. i was at the time on the team that wrote the tools for automated testing and i was pushing hard to get office wide applescript support on the list of features we'd commit to doing for office x. i wanted this not only for our customers, but to augment our testing efforts. with an api to drive the applications we could automate many "smoke tests" on a daily basis as well as set the stage for long term applescript based test suites. automation testing benefits are often not fully realized, especially static automation, until the version after you setup the automation, so i was especially anxious that we get our api in office x, so we could reap the return on investment for office 2004.i remember talking with jim murphy about getting applescript support like it was yesterday. we were in building 44 and his window office was near the 2nd story walkway that connected our building to the cafeteria. in my naivete i asked why we couldn't just build a some kind of layer to call into the engine code of office and presto, applescript dictionaries for office would be complete. i pointed to some improvements apple had made to make applescript a better inter-application communication protocol and ask, "how hard could it be?" jim turned to me and said, "hard? there's nothing easy about it. it's all pain. all pain." then as was typical, turned back to his work, leaving me to think.in this case, i was the unintelligent and uninformed, but very enthusiastic novice. jim turned out to be right. for office x, we did try to do the applescript work, but it turned out to be much more difficult a problem to solve. after months of work and many dead ends, we pulled the feature from the office x feature list. for office 2004, we tried again. in this case, jim himself, one of our best developers, ended up spending the better part of a year getting applescript to work with office, which is probably worth another post in and of itself. i thought i knew more than i did, i thought the problem was simpler than it was. my confidence and thinking was miscalibrated. the root cause was my lack of understanding and experience.wicked problemssometimes, even the best developers underestimate the scope, breadth and depth of a problem. in a drive for simplicity, i observed in myself and others another kind of design time problem where thinking was miscalibrated. the cycle i have observed looks like this:developer looks at a problem a, and thinks he or she fully understands the problem.developer designs a simple solution to problem a.developer codes the simple solution.developer or tester or marketing or customer use simple solution for problem a.bugs trickle in and solution a is modified, bit by bit, bug by bug, until it is patched in a thousand ways and no longer looks or acts like the simple solution. the solution is complex.some will say, "hey! why didn't that lame developer take the time to really understand the problem? then he could have taken the time to fully comprehend the complexities of the problem, and then design a simple, elegant solution!" the problem with this is that many subtleties to the problem do not manifest themselves until very late in the development process which make re-architecting the solution for such a small issue un-reasonable. but this is a "death by a thousand paper cuts" issue. what's worse, many architectural issues can only be comprehended after years in a problem space, and as promotions or attrition happen, the so called simple solutions, with their complex instantiations proliferate in code.adam richardson spoke to the challenges of wicked problems when he said:wicked problems are very difficult to understand by staring straight into them and looking for clear detail, however. they need to be approached from the edges, sort of like doing a jigsaw puzzle where you find the edge pieces first. having peripheral vision that is trained to be sensitive to the edges is a key capability (this applies both to product teams and to business units - wherever wicked problems occur).normally this causes the developer to tack on simple solution to solutions with patch upon patch applied with the hippocratic oath echoing in their ears to "do no harm", but deceptively the bandage is not big enough for he wound, and no one knows.the desire to learnanother reason why some can feel "informed" when in fact they are not is that they have lost the hunger to learn. they've lost the desire to learn and grow. rené descartes said it this way:good sense is the most equitably distributed of all things because no matter how much or little a person has, everyone feels so abundantly provided with good sense that he feels no desire for more than he already possesses.there is a reason for diversity of opinion, it provides the natural tension that keeps us from thinking we've got the problem solved. when i left microsoft to go back to school and finish my degree, many asked, "why are you doing that? what are they going to be able to teach you?" i'll admit that this partially resonated with me. i wanted to be the sage of wisdom, but as i've spent time with teachers and students, many of whom do have less "industry experience", i have learned an enormous amount! to put it bluntly, i have been humbled. i've learned things technically, intellectually, physically and even spiritually. i feel so blessed. i'm beginning to think that what any given situation can teach you depends largely on the person experiencing the situation and very little on the experience itself. put another way, there's a great difference between 50 years of experience and 1 years worth of experience repeated 50 times.personal pride - the anti-change agentclosely related to the lack of desire to learn is the desire to avoid being wrong. so much in school is focused on being right, knowing the right answer to a test or the correct proof or solution. in sports, no one likes to lose. everyone likes a winner! but this desire can work into our minds in a limiting way. leo tolstoy wrote:i know that most men, including those at ease with problems of the highest complexity, can seldom accept even the simplest and most obvious truth if it be such as would oblige them to admit the falsity of conclusions which they have delighted in explaining to colleagues, which they have proudly taught to others, and which they have woven, thread by thread, into the fabric of their lives.at work i would say, "we don't fail half as much as we need to." i still think this way, but now i've found a new reason: failing keeps our mental muscles and joints from stiffing with pride and forming into the arthritis of the mind.the well intended deceptionanother reason for metacognitive miscalibration i think stems from the very basis of good object oriented abstraction and encapsulation. when i write some simple app with cocoa's appkit and foundation libraries, i am, as they say, standing on the shoulders of giants. i've wondered how many actual lines of code are called when i double click a simple app like textedit. who wrote these lines of code? when did they actually get written? what were the discussions behind their design and implementation? even apple couldn't fully answer these questions. it is all this code that even the simplest of cocoa applications depends upon. but still we continue to have demos around how "few lines of code" were needed to accomplish something. this is a well intended deception, because really, more code is being executed and written, but only now how this code works is opaque. it's well intended because who wants to write, maintain and debug more code? why not offload this to apple? i expect these demos to continue, because less code for a developer to write is the canonical example of efficiency, but there's something wrong that comes from this. it's the feeling that you actually really understand what is going on to make your application tick. these assumptions and abstractions can be benign, but they can also make one feel and think that they know more than they do and can do more than easily possible.in the process of detail management that is software development, making things simpler and more tractable is an excellent goal, but there's a limit to how "simple and easy" things can get and still be valuable. recently i overheard two students talking about building an iphone application. the one said to the other, "dude, they showed this awesome demo of spore, where in only 2 weeks, 2 weeks! they got this awesome iphone game running! it's so easy. we can totally build an awesome iphone app!" first, i love the enthusiasm and i hope they do in fact build an awesome iphone application. apple was trying to demo how easy it was to build iphone applications and i think we've never seen a mobile platform that's better for developers, however:taking a senior developer who as spent the last several years of his life building games and developing spore, bringing him into apple with full and uninterrupted access to apple's staff of iphone engineers that have been developing the iphone sdk and iphone applications hardly equates to a college student being successful at all the complexity involved with boot-strapping a company and building a successful iphone application from scratch. building great software is still hard, hard work. it's tedious, often un-glamorous and takes someone who doesn't mind getting down and dirty with the details to make something great. most will simply give up, and even those with the passion and stamina to continue are hardly assured of success. i suppose i'm arguing simply that a healthy dose of steve job's famed "reality distortion field" do not a great developer, company or software make.there are probably other reasons we tend to think we know more than we actually do. but the lesson for me is this: i need to take some time to ponder and reflect regularly. am i in the "unintelligent or uninformed and arrogantly confident" camp? if so why and how can i get humble? am i part of the "intelligent and well informed but unsure and apprehensive" group? if so why and what can i do increase my tolerance for risk and decrease my fear of being wrong? a little meta i know, but the title should have warned you. :-)





posted by
david weiss


at
4/21/2008 06:27:00 pm


16
comments




 










labels:
automation,
cocoa,
design,
learning,
programming,
software








13 march 2008





codwarrior




here's a blast from the past. as xcode continues to improve as the default ide on the mac and for the iphone, the majority of apple's current developers don't even how codewarrior saved apple. with the release of the iphone sdk, i think it's not far fetched to imagine apple's wwdc attendance tripling. someone sent me this graphic from an old metrowerks t-shirt. if you have this shirt, you fully qualify as an old timer.





posted by
david weiss


at
3/13/2008 08:53:00 pm


1 comments




 










labels:
apple,
iphone,
perspective,
programming








26 february 2008





heuristically thinking



you don't have to understand calculus to appreciate this entertaining story:a teacher, trying to explain what a theory is, asked this question: “if you take a letter half the distance to a mailbox and stop, then start over going half the remaining distance and stop, then repeat the process over and over, theoretically will you ever really get to the mailbox?” one bright student said, “no, but you’ll get close enough to mail the letter.”there are many definitions for what a heuristic is, but the one i like best is illustrated in this story. a heuristic is "close enough." i am beginning to believe that more and more what matters in software isn't so much building the perfect algorithms, that match and mimic real life in every way and hold up in every edge case. what matters most is getting a model that comes close enough. what matters are heuristics.my favorite chemistry textbook, has this to say on the topic of "the kinetic molecular theory of gases" (kmt):however, although laws summarize observed behavior, they do not tell us why nature behaves in the observed fashion. this is the central question for scientists. to try to answer this question, we construct theories (build models). the models in chemistry consist of speculation about what the individual atoms or molecules (microscopic particles) might be doing to cause the observed behavior of the macroscopic systems (collections of very large numbers of atoms and molecules).a model is considered successful if it explains the observed behavior in question and predicts correctly the results of future experiments. it is important to understand that a model can never be proved absolutely true. in fact, any model is an approximation by its very nature and is bound to fail at some point. models range from the simple to the extraordinarily complex. we use simple models to predict approximate behavior and more complicated models to account very precisely for observed quantitative behavior. in this text we will stress simple models that provide and approximate picture of what might be happening and that fit the most important experimental results.the textbook then goes on to explain postulates for this model of thinking, many of which by themselves are absolutely false, but taken together and used properly, they create a system of thinking that works for a wide range of situations. this collection of half-truths produce a half-truth baked solution, absolutely, but one that is indeed close enough.for example, some "half-truths" or "simplifications" if you will, involve assuming things like: each molecule of gas is perfectly spherical in shape and any collision is perfectly elastic in result. or worse, the volume of all these individual molecules is assumed to be zero! individually, each of these 3 statements is categorically false, but they were the right bits to "design away" as they defined the problem space so that the model could be simplified, made useful and the problem of dealing with billions of particles be made into something tractable.to me, this is more than simple object oriented encapsulation and abstraction. this is thinking about the whole problem differently. it's about looking at individual behaviors from a very small sample and knowing, by some spark of genius, which attributes are the important ones to the ultimate outcome of the system as a whole, and which are not. this is writing software that is able to predict things, for example, test software that is able to predict when "something good" has happened and also when "something bad" has occurred. this is about designing software by building software models that categorically do not reflect the real complexities of the system, but that taken together, get "close enough" to do real work in the real world. ultimately your models will fail when pushed to the limits, but even just understanding those limits will help you better understand the problem you are tasked with solving! it even begs the question: what kind of programming language best allows for the definition and use of heuristic models?i don't know where i first heard this, but someone once said something like, "where microsoft codes if statements, google codes in bayesian probabilities." there are more data and variation in that data than there ever was before. if you are going to write or use programs (very likely) that deal with large amounts of data (also very likely) it might be a good idea to get used to thinking about things in heuristic terms. it may not be exactly perfect in every case, but it will be close enough.





posted by
david weiss


at
2/26/2008 10:33:00 pm


1 comments




 










labels:
creativity,
design,
google,
microsoft,
programming,
software








24 february 2008





finishers wanted



when i was a little boy my mom had me memorize this little poem:stick to your task ’til it sticks to you;beginners are many, but enders are few.honor, power, place and praisewill always come to the one who stays.stick to your task ’til it sticks to you;bend at it, sweat at it, smile at it, too;for out of the bend and the sweat and the smilewill come life’s victories after a while.—author unknowni think my mom had me memorize this poem because she knew i would need it. she understood better than i the old adage that "life does not reward us for effort expended." finishing is required.for me, it is exciting to find a problem and imagine a way to solve it. the creative exhilaration in coming up with a solution that will work within all the constraints involved is almost intoxicating. i have a remarkable tolerance for ambiguity and when the major "problems" as i see them, have been solved, filling in all the details seems so much less important. the hard design work has been done. there's perhaps little glory in all the simple, small and detailed work needed to connect the dots and make the grand vision a reality. however, software is ultimately just simple 1s and 0s and if you don't fill in all the details, then all you are left with is a dream. you've got to have both the vision and the finishing of all those tiny details."this is all your app is: a collection of tiny details." - wil shipleymissing a few details can drastically reduce the value of the whole idea. i guess that's why i love mac software so much: there's the constant demand from both the users and my peers for my concerted effort across the entire spectrum of "pie in the sky" ideal to actual, practical details in implementation. to make it work in software, you need to consistently execute well across the whole spectrum of work. let me underscore the words consistently execute again, they are very important.matt ball recently wrote a nice post about some up and coming mac developers that worked so hard on their first release, but since then have produced relatively little. they haven't created new apps, updated their 1.0 apps, even posted to their blogs. some still have ideas in picture form posted in all their high fidelity glory, but with no application to show or sell to the customers that have been waiting to see the finished product. these developers seem to be struggling with consistently executing against their plans.matt goes on to explain that he thinks this is related to their young age. most of these developers are young (19 years old) and he thinks suffer from some kind of "shiny ball syndrome" where they are easily distracted from one project to the next. i don't know the developers, and they could be easily distracted or they could have absolutely justifiable reasons for their delays, but the result is the same: doubt builds as to their ability to consistently finish their ideas. their credibility and reputation weakens.many of life's failures are people who did not realize how close they were to success when they gave up. - thomas edisoni don't think it's age. i think that's far too simple an answer. i know developers in their 50s who struggle from this exact same problem. it's not size or lack of resources either. look at microsoft. here's a company where a large part of their problems revolve around consistently producing, not a lack of money or great people or innovative ideas.the idea is not the thing!one part of the problem comes from patent law. there is a remarkable and universally held assumption that ideas are worth a great deal. i will not say ideas are worthless, but they are worth far less than most of us realize. even the most simple idea takes remarkable effort, and follow through to get designed, built, packaged, and ultimately used by others. this is why i felt my dream app was destined for difficulty. they had enthroned ideas as the product, when in reality it's all the grunt work after the idea that make the product. it's all those pesky little details and the consistent effort required to follow up and deal with each of them that matters.finishing is the thing!when the iphone was released, there was a collective groan world wide from designers who had years before envisioned the ideas that apple had now so beautifully produced in a finished product. kim lenox, senior interaction designer of adaptive path explains:with the launch of the iphone, i’ve been hearing many grumblings from interaction designers who’ve worked for various, well known consumer electronics companies. we can all see in the iphone aspects of our concepts from years past that were brushed aside or died prematurely. our concepts are suffocating under the pile of nda verbiage, never to see the light of day. what sets our mere concepts apart from this final product however, is a company with leadership who has the fortitude to take the risk, find the budget, and push the technology for the single cause of designing compelling user experiences. apple got it right.amazing isn't it? once again, it's all about execution and finishing, not just the ideas. leadership is important for sure, but finishing the job in a company is so much more than steve jobs simply saying, "we're going to build an iphone and it will have a compelling user experience." it's thousands of decisions made by hundreds of employees at apple and elsewhere. it's dealing with setback after setback and still pushing forward. it's taking the right calculated risk (edge and at&t) and saying no to other things (10.5 on time, a dev sdk) in order to finish. that is the task of finishing and at apple, it seems to be part of their dna.tranquil and steady dedication of a lifetimeone of the most important attributes of a software company i would like to work for, comes from an idea the late adlai stevenson a u.s. democratic politician explained when referring to patriotism:what do we mean by patriotism in the context of our times? i venture to suggest that what we mean is a sense of national responsibility ... a patriotism which is not short, frenzied outbursts of emotion, but the tranquil and steady dedication of a lifetime.in a great software company, there wouldn't be "short, frenzied outbursts of emotion" but a consistent focus on finishing in a steady and sustainable manner. my guess is that those prone to "putting on a big, glitzy show" and those that don't effectively resist the "constant bombardment of new and exciting things to try out" will have set themselves up as an unsustainable business, and ultimately end up disappointed.saying no: a feeling of strength in reserve.one of the biggest challenges is just saying no to things. what's hard about this is often you need to judge between what is "good", what is "better" and what is "best". in order to do that which is "best", you will, you must say no to many, many things that are "good" and "better". this is heart wrenching work, but choosing what you do now to remain focused and finishing, this is your competitive advantage. when asked what work he was most proud of from among his work at apple, steve jobs famously said, "all the products we didn't ship." many people and businesses talk about focus and priorities, but very, very few actually finish the idea and follow through with the well executed decision making and focus required.“you must always work not just within but below your means. if you can handle three elements, handle only two. if you can handle ten, then handle five. in that way the ones you do handle, you handle with more ease, more mastery and you create a feeling of strength in reserve.” - pablo picassokeep moving forward!there is a scene in disney's animated movie meet the robinsons that i love. the story is of a young boy inventor who is learning. during this particular scene he is trying hard to fix a peanut butter and jelly gun, used to automate sandwich building. everyone is watching him and it looks like he's going to succeed, finally the time comes to try his fix. the whole thing explodes sending peanut butter and jelly everywhere and onto everyone in the room. he is devastated, but immediately he hears cheers and people start to comment on what a great failure that was! "you failed!" "and it was awesome!" "exceptional!" "outstanding!" "uh, i've seen better." "from failing you learn, from success, not so much." they congratulate him like he succeeded. they ultimately propose a toast to his brilliant failure. he is stunned. the motto of this family is: keep moving forward!this is a good motto for anyone working with software. the challenges are so great and the problems so complicated and frequent, you simply must have the determination to keep moving forward, to and through the finish. start small and build momentum and keep finishing small things, just to keep in the habit of it.this is not always easy. sometimes i would come home from work so frustrated with how slow things were going and how little progress was being made, i'd tell my wife i just needed some time alone to cool down. i'd go into my room, open my laptop and write a blog post. i'd post it and point to it while saying to my wife, "there, i did it. i produced something today! it may not be much, but at least i produced something tangible!" you've got to keep in the habit of producing or finishing. you can't let those muscles atrophy.one of the best development techniques i've seen over the years is test driven development. the pattern is to build a small test that represents an improvement you want to make to your program. once the test is built, run it and watch it fail. then write just enough code to make the failing test pass, then run the code and watch the test pass. repeat. this tends to lead to low coupling and good cohesion and a reasonable test bed. the real hidden value is regular focus on tangible completion in a consistent way, over time. just keep moving forward step by step and then after some time you'll be impressed as you look back on the mountain of work you've accomplished by such simple means with constant effort.there are bugs to be fixed, old code to re-examine and refactor, performance problems to analyze and improve, build automation, test automation and website improvements, help docs to write, blogs to read, posts to write, ideas to explore, customers to contact, emails to read and write. your job is to choose which of all of these you will do now, and then keep moving forward. those who master the art of consistently and sustainably producing value, are setup for success. be one of them. don't quit. don't stop. focus on consistently finishing something of value, no matter how small. that's what the world will pay you for, and since so few seem to stick to it, there's plenty money in play for those who pay the price to consistently finish the job.





posted by
david weiss


at
2/24/2008 03:55:00 pm


6
comments




 










labels:
adversity,
apple,
business,
courage,
creativity,
iphone,
microsoft,
programming,
software,
vision








23 february 2008





the perfect laptop



business week's recent cover story on lenovo's new thinkpad x300 laptop caught my attention. can you imagine spending 2 years working on a super thin, super light laptop for release in february 2008 and then have apple announce the macbook air on january 15th? what a commotion must have been had at lenovo after jobs' keynote!it turns out that the x300 is actually lighter than the macbook air when configured without the dvd drive. it apparently also snugly fits into a mailing envelope! it has 3 usb ports and an ethernet port and includes a solid state drive as the only drive option. what's really striking about the x300 is lenovo's whole approach to the project. when they think of the "perfect laptop" they don't see the svelte curves or shiny metal jewel that apple sees, they see 90 degree angles, boxy, matte-black, computer that looks all business. david hill, lenovo's chief designer and "keeper of the thinkpad tradition" said it best: "i'm a bit tired of looking at silver computers, i'd never wear a silver business suit."despite the fashions of the day, lenovo is not only trying to remain true to, but underscore the original thinkpad design by richard sapper. i'm impressed by this. they are trying to build an equally, if not more impressive laptop than the macbook air, and retain their own identity in the process. it's both courageous and unique these days. in some ways it says something about the times that "simple, elegant, matte-black machines with precise, 90-degree corners" would be thinking differently, while so many are trying to "be like apple." my applause goes to lenovo for being themselves! well done!





posted by
david weiss


at
2/23/2008 10:34:00 pm


2
comments




 










labels:
business,
courage,
design,
hardware








22 february 2008





the mix tape and itunes



i know i'm dating myself a bit here, but there was a time when friends my age would exchange songs via cassette tape. it was illegal i'm sure, but such a wonderful labor of love. the carefully selected list would exchange hands and then the recipient would spend typically 60 minutes straight listening to each song trying to deduce the "real meaning" for this song being included in the mix. meanwhile, the giver would also listen to the same songs wondering how the recipient might be enjoying it. as you can imagine this made for some great follow-up discussions. i was reminded of this recently when i found this product from the uk:note: the authentic bent label. there are even other styles shown here.with 64 mb of storage you can get at least 60 minutes of songs for your gift. very retro. fun, not terribly sustainable and probably illegal as well, but still pretty cool.when i saw this i wondered, and not for the first time, "why doesn't apple do this kind of thing on itunes?" they've allowed gifting for a long time, but that's one song or album at a time, not a collection of specially chosen songs. they could send a custom "icard" or well designed announcement. going to itunes would allow you to download the gift list with a special custom cover for the playlist along with custom messages for the whole list and each individual song. what you're selling here is the experience of the music and the gift of listening to each song specially selected for you. there would be a one click "add to my ipod" once the songs downloaded so you could get going right away. while you listened you could continue to refer to the sender supplied comments for each song on your ipod. as an added bonus, if the person receiving the list, already purchased this song on itunes, it wouldn't copy down a duplicate song, but just link it into gift playlist with custom text. in this case the cost of the collection would go down by the cost of the duplicate song.this isn't just about love birds or anniversary collections either. i can see "get well collections" sent, "congratulations you did it!" collections, and even "inspiring songs from a friend that cares" lists being given. i can even see adding a movie or movie rental to the list with the connection of "this movie makes me think of you" or "let's watch this together..." etc.i suppose every regular mac user who blogs has to post from time to time, with wishes for apple to fulfill. i haven't done my fair share of them, so here's my penny in the fountain. i think it would work wonderfully. come on apple, give us mix tape gifts on itunes!





posted by
david weiss


at
2/22/2008 02:29:00 pm


3
comments




 










labels:
apple,
innovation,
marketing








28 january 2008





passing of president gordon b. hinckley




beloved church president gordon b. hinckley, who led the church of jesus christ of latter-day saints through 12 years of global expansion, has died at the age of 97. president hinckley was the 15th president in the 177-year history of the church and had served as its president since march 12, 1995.i suppose he said it best:death is a part of life. it is a fundamental, basic part of our eternal lives. we can't go on with the great work that lies ahead without stepping over the threshold of death, sorrowful as it is for those who remain. i am satisfied that it is a beautiful experience for those who make that step, who have lived lives of righteousness and faithfulness. - gordon b. hinckley, ensign, aug 1997, 3for my part, this man was an example to me of someone who finished the course, kept the faith. (2 timothy 4:7) i will miss him.





posted by
david weiss


at
1/28/2008 07:47:00 am


0
comments




 










labels:
adversity,
blessings,
hope,
news








27 january 2008





change is hard



i just rediscovered this great quote:a new scientific truth does not triumph by convincing its opponents and making them see the light, but rather because its opponents eventually die, and a new generation grows up that is familiar with it. - max plancki believe this doesn't just relate to scientific truth, but truth in general. my dad would say, "experience is always in the first person," meaning that it's a good idea to learn from others, but most of the time we don't. there are great new truths to be had, but everyone is at a different point in the journey, with all the baggage that entails. many of the most important and needful changes can't happen  until there is a personal experience with the need for change. mostly that happens one person at a time. there are those who think people would act differently if they only knew some bit of relevant knowledge, but more often than not, the reality is much more complicated than a simple lack of knowledge.change requires love, patience, help and encouragement, a willingness to learn from above, from below and from all those around you. it requires an absolute and deep conviction that you could really be wrong about something in a fundamental way. it requires a desire to improve and a motivation to exercise more effort than normal. it requires the courage to be wrong and fail again and again in the pursuit of new understanding. in the end, it often requires the willingness to forgo the due respect and esteem of others. almost always it requires some kind of sacrifice. it is for all these reasons and many more, that change is hard. thanks be to those who, despite all of this, do change. they make space for others to do the same.





posted by
david weiss


at
1/27/2008 01:12:00 pm


2
comments




 










labels:
courage,
perspective,
vision








01 january 2008





leaving microsoft



starting today i no longer work at microsoft. as many of you know, i started working at microsoft after an illustrious post high school career as landscape architect. ;-) i loved the landscape work, but microsoft paid better. i was just barely 18 and microsoft was just realizing that the internet (lower case then) was amazingly not going to be replaced by the windows 95 microsoft network. much has changed since then. while i started my 4 year degree and continued working on it part time, it’s now time for me to go back to school full time and finish. after that, i hope to get an mba.i’ve had a remarkable time at microsoft and in macbu in particular. i’ve learned so much. i’ve been so thankful to interact with such a high concentration of good individuals. i feel very blessed. my last day was december 31st, 2007.so that’s the news. i realize that many of you subscribe to this blog because of my connection with microsoft and especially macbu. since i'm no longer working there, feel free to unsubscribe. during the holiday's i've been mentally processing my macbu experience and i'll be posting much of what i have learned and observed. if that interests you, hang on, there might still be some content here for you! as you may have noticed i've not really posted anything since september when i returned to work after paternity leave! these last 3 months finishing up office 2008 were quite the grind, not a death march, but certainly not pretty. i'm glad for it to end. with a bit more time, i think you'll see some more frequent posts here.if you'd like to contact me informally, as always, feel free to email me at my gmail account referenced on my blogger profile page. if you'd like to contact/track me more professionally, feel free to follow my linkedin profile.happy new year to all and wish me luck!





posted by
david weiss


at
1/01/2008 09:04:00 am


12
comments




 










labels:
macbu,
microsoft,
news








31 december 2007





google maps my location beta



in google's recent google friends newsletter we have this tidbit:google maps for mobile, now with my location (beta)gps-enabled mobile phones continue to rise in popularity - but most of us do not have that capability. now, with the latest version of google maps for mobile, you can use the new my location (beta) technology that uses normal cell phone towers to provide you with approximate location information. it's not gps, but it comes pretty close. http://www.google.com/gmmcool stuff. the really interesting thing about this is the ability google could eventually have to track location and correlate that to better target ads on the iphone.





posted by
david weiss


at
12/31/2007 01:51:00 pm


0
comments




 










labels:
google,
iphone








29 december 2007





more iphone features



if the folks over at gear live have the scoop on the newest iphone firmware update, it looks like it will add some very cool features. my favorite will absolutely be the "locate me" feature added to the google maps application. gear live servers are slammed right now, but here are some of the small resolution images that look very authentic to me. with every iphone software update, phone manufacturers everywhere are wishing they had a reliable way to distribute fixes and add features. apple really has a competitive advantage with their ability to update the iphone in the field.













posted by
david weiss


at
12/29/2007 02:01:00 pm


0
comments




 










labels:
apple,
business,
iphone








12 september 2007





workspace traditions



every company, every team has their different traditions and specific culture and microsoft is no exception. christian buckley of bluebadgemojo.com pokes some fun at what i think is a microsoft specific tradition of "decorating" offices of people gone for an extended period of time. i remember carting in sand for a "beach house" office decoration way back. where did it all start? i guess i'll never know.what funny workspace traditions do you have? have you seen the office decoration thing outside of microsoft?





posted by
david weiss


at
9/12/2007 07:22:00 pm


7
comments




 










labels:
humor,
microsoft,
miscellaneous








15 august 2007





numbers



one of the great benefits of working at microsoft is that when you add a new little one to your family, you get 1 month of paid paternity leave. recently, we've had the opportunity to take advantage of this benefit. since our little baby was born, i've been home working as mr. mom. i've been mostly offline, except for early mornings and late nights when the kids are sleeping. my boss isn't going to like it, but since i've been gone for paternity leave, i've logged on to my work email only once, and that was just to make sure my out of office emails were working. needless to say, i've been happily busy with family.i haven't been so busy that i didn't catch apple's announcement regarding their new iwork application, numbers. i haven't bought a copy, or logged into work to see what others are saying about this announcement, but i'm guessing it's much like when apple announced keynote for the first time. a combination of deep respect for apple's software and design capabilities, coupled with sense of, "let's get back to work and make something great!" kind of attitude.what follows are some of my personal feelings that i've considered amidst making meals and playing at the park with my kids. i don't in any way attempt to speak for macbu or microsoft, these are just one person's opinions, specifically mine. and yes, i do work in macbu, and yes i can't share everything i'd like to say for obvious reasons. so, here goes:once upon a time, it was decided that we needed to move to a more open file format. xml was the obvious choice. there were and are a lot of good reasons for opening up your file format. i'm not going to discuss these at length, but one of these in particular is that folks are not forced to use your application to both read and write files that others can use. this is a good thing.allowing anyone to read and write your file format is a bold move because it says in essence, "we don't need a locked down file format to compete. the format can be available for everyone, and we'll compete on the ease of use and efficiency of our applications. we have what we think is the best interface for reading, creating and managing office documents, but if someone has what they think is a better way to build office documents, wonderful, we welcome it!"what apple has done with keynote, pages and numbers is exactly this. with each one of their applications, they've created a user interface that reflects how they think people want or should want to act when building a presentation, document or spreadsheet. i've been in this market for a long time, and obviously have opinions about how things should be done. if someone else has what they think is a good solution for building office documents, i think that's great.from another perspective, i think apple's work on numbers underscores that despite the large advances being made in web interfaces, there is still a place for rich client applications. both ilife, iwork and even the google maps application on the iphone reinforce that there's lots of opportunity left for innovation in the "rich client" arena. numbers specifically proves there's opportunity left for innovation in the productivity applications space. i certainly think there is, and folks who think that the problem space that office lives in is "essentially solved", should think again. there's plenty left to improve. plenty. that's what makes it exciting.some have said, "i bet macbu is envious of apple being able to start from scratch." now that's a loaded comment. let me try to address the different parts. first the envious thing. apple is a great software company and at microsoft, software is pretty important too! ;-) at the very core of macbu is the desire to produce great software for the mac platform. when the business unit was created, the whole goal was to focus our energies on producing seamless and compatible, but very mac, applications. there are a certain set of problems one must focus on when working on mac office. there's another set of problems one must focus on when working on iwork. you trade problems sets, but they are just different problems sets! the grass is not always greener on the other side of the fence. most people with significant software experience will know that "starting from scratch" is one of the most risky and difficult things to do. i don't think anyone is excited about scrapping years worth of effort just to have a clean start at things. from a programming perspective, that just makes no sense.also, apple isn't starting from scratch. they are building methodically on the several foundations they've laid over the years in keynote, then pages and now they've added numbers. one might even say that, numbers is keynote and pages with better table and function support, and not be too far from the mark. this kind of progressive building together is what microsoft did with office originally. there's a pattern here. the bigger questions in my mind are really these: "will apple's software foundation allow them to add to and improve their software for the next 20 years? what will be the rate of their improvement?"lastly, in a very real way, we do "start from scratch" every product cycle. i wish you could all experience the high energy and exhilarating discussions we have when we are planning for the next version of office. we "wipe the slate clean" and do our best to remove all inhibitions and constraints when we think about what we can do next with mac software at microsoft. and this doesn't just happen in macbu. my favorite example of this, right now, has to be the new ui in win office. maybe someday i'll write about that more in-depth, but the way that ribbon interface elevates access to the many features of office and makes office easy to use is just wonderful. anyone who's serious about interaction design in software should take a serious look at what this interface does and how it does it. there's a great deal to be learned, not the least of which is that sometimes you need to dramatically re-think the user interface of your application and not be afraid to do exactly that.finally, as in the past, the question will undoubtedly be asked, "what is the core value of office on the mac?" i'll answer that with one word: compatibility. mac users are the kind of people that want things to "just work" and microsoft office for the mac offers that exact value proposition. mac users want to enjoy all the great things that make the mac experience wonderful, but still be able to share documents and communicate in a mac way in a windows dominated world. macbu is categorically in the best position to deliver on this promise of compatibility.





posted by
david weiss


at
8/15/2007 10:22:00 am


27
comments




 










labels:
apple,
macbu,
microsoft,
news,
software








07 august 2007





a clear vision



one of the most important responsibilities of a great leader is to clearly define the goal, the vision, the what and why stuff, so that everyone can understand and really "buy-in" to the deal. steve jobs just did this masterfully in the q&a session following an apple press event:is apple’s goal to overtake the pc in market share? jobs said, “our goal is to make the best personal computers in the world and make products we are proud to sell and recommend to our family and friends. we want to do that at the lowest prices we can.“but there’s some stuff in our industry that we wouldn’t be proud to ship. and we just can’t do it. we can’t ship junk,” said jobs. “there are thresholds we can’t cross because of who we are. and we think that there’s a very significant slice of the [market] that wants that too. you’ll find that our products are not premium priced. you price out our competitors’ products, and add features that actually make them useful, and they’re the same or actually more expensive. we don’t offer stripped-down, lousy products.”independant of the pr value of these statements, these words "make meaning" for apple's employees who, in the end, are their most important customers.update: macworld has posted the audio of the question and job's fantastic response here





posted by
david weiss


at
8/07/2007 11:51:00 am


2
comments




 










labels:
apple,
vision










older posts

home




subscribe to:
posts (atom)






about me





david weiss


utah, united states

view my complete profile



blog archive








        ▼ 
      



2008

(15)





        ▼ 
      



august 2008

(1)

unweary








        ► 
      



july 2008

(1)







        ► 
      



june 2008

(2)







        ► 
      



may 2008

(1)







        ► 
      



april 2008

(2)







        ► 
      



march 2008

(1)







        ► 
      



february 2008

(4)







        ► 
      



january 2008

(3)









        ► 
      



2007

(47)





        ► 
      



december 2007

(2)







        ► 
      



september 2007

(1)







        ► 
      



august 2007

(2)







        ► 
      



july 2007

(15)







        ► 
      



june 2007

(4)







        ► 
      



may 2007

(2)







        ► 
      



april 2007

(8)







        ► 
      



march 2007

(7)







        ► 
      



february 2007

(6)









        ► 
      



2006

(124)





        ► 
      



december 2006

(2)







        ► 
      



november 2006

(9)







        ► 
      



october 2006

(8)







        ► 
      



september 2006

(11)







        ► 
      



august 2006

(15)







        ► 
      



july 2006

(8)







        ► 
      



june 2006

(20)







        ► 
      



may 2006

(18)







        ► 
      



april 2006

(15)







        ► 
      



march 2006

(13)







        ► 
      



february 2006

(3)







        ► 
      



january 2006

(2)









        ► 
      



2005

(33)





        ► 
      



december 2005

(2)







        ► 
      



november 2005

(3)







        ► 
      



october 2005

(8)







        ► 
      



september 2005

(4)







        ► 
      



august 2005

(6)







        ► 
      



july 2005

(2)







        ► 
      



june 2005

(5)







        ► 
      



may 2005

(3)









labels



apple
(47)


perspective
(32)


design
(28)


macbu
(26)


programming
(26)


microsoft
(23)


news
(21)


software
(21)


iphone
(17)


innovation
(17)


creativity
(15)


future technology
(13)


miscellaneous
(12)


vision
(11)


courage
(10)


business
(9)


hardware
(9)


marketing
(8)


cocoa
(7)


potential
(6)


windows
(6)


humor
(5)


learning
(5)


adversity
(4)


automation
(3)


wwdc
(2)


google
(2)


hope
(2)


mac lab
(2)


management
(2)


project management
(2)


sports
(2)


aviation
(1)


blessings
(1)


testing
(1)





subscribe

if you'd like to subscribe to my blog via email, enter your email address:





 










