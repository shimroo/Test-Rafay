

























smith college | computer science















      skip to main content
    













search









utility

search toggle







 
  
	students
	


 
  
	faculty & staff
	


 
  
	families
	


 
  
	alums
	


 
  
	give to smith
	









smith college logo





search toggle






main






menu




 
  
	discover smith
	

expand discover smith menu









 
  
	smith in action
	


 
  
	history & traditions
	


 
  
	president sarah willie-lebreton
	


 
  
	visit the campus
	


 
  
	governance
	


 
  
	smith at a glance
	


 
  
	contact smith
	





 
  
	academics
	

expand academics menu









 
  
	programs & courses
	


 
  
	our approach to learning
	


 
  
	integrative learning
	


 
  
	faculty directory
	


 
  
	academic calendar
	


 
  
	registrar
	


 
  
	class deans
	


 
  
	provost/dean of the faculty
	


 
  
	study abroad
	


 
  
	libraries
	





 
  
	admission & aid
	

expand admission & aid menu









 
  
	apply to smith
	


 
  
	visits & programs
	


 
  
	life after smith: career outcomes
	


 
  
	tuition & aid for applicants
	


 
  
	aid for current students
	


 
  
	for parents & families
	


 
  
	for school & cbo counselors
	





 
  
	your campus
	

expand your campus menu









 
  
	health & wellness
	


 
  
	residence life
	


 
  
	dining & menus
	


 
  
	community
	


 
  
	offices & services
	


 
  
	clubs & organizations
	


 
  
	student government association
	


 
  
	athletics
	


 
  
	for new students
	


 
  
	smitharts
	





news & events

expand news & events menu









 
  
	smith today
	


 
  
	events
	


 
  
	arts calendar
	


 
  
	smith quarterly
	













 





show all breadcrumbs
home


breadcrumb






scroll left




 
  
	home
	


 
  
	academics
	




scroll right
































computer science







computer science prepares students to lead in a world experiencing sweeping technological change. students choosing to major in computer science can look forward to a career in one of the many fields to which computer technology has become vital, including the sciences, arts and entertainment, banking and commerce, and of course the communication and computer industries themselves.








			about computer science at smith
	









scroll left




about the department




selecting a computer science major or minor adviser




scroll right















computing and the arts
artistic applications of computing are a growing initiative in the department. in recent years we have added new minors in digital arts and digital music. visiting faculty and active interdisciplinary ties with related departments make this an exciting and vibrant area.
student involvement
computer science students are very active in the department. three liaisons attend department faculty meetings and run monthly social gatherings, such as movie night and game night. a student-led club organizes career-oriented training and offers community outreach via a local chapter of girls who code. many students work as teaching assistants, running help sessions, grading and aiding students during teaching labs. students also do research as special studies, as research grant assistants or as honors theses. faculty have summer research projects available for motivated and interested students. for more information, contact a faculty member as early as january of the spring semester.





facilities
computer science enjoys the use of several dedicated classrooms and research facilities in ford hall. installed machines include multiple-boot workstations and dedicated computing clusters. the student lounge provides comfortable furniture, toys and refrigeration for students looking for a break from their work. students and faculty pursue interdisciplinary research and class work using digital circuits and microprocessor kits, lego robot arms and robot dogs, and mobile platforms, plus sensor modules, synthesizers and keyboards for digital sound and music. the center for design and fabrication offers 3-d printers, laser scanners, laser and water-jet cutters, among other tools for rapid prototyping.













computer science studies for non-majors
for non-majors, we offer courses demystifying the inner workings of computers and the internet. students can take a course in interactive web design, providing them with bankable skills on the job market. for those interested in exploring further, we invite you to check out our courses on beginning programming, computer graphics and artificial intelligence.

























online questionnaire
to pick a computer science major adviser, please fill out the cs major/minor declaration & adviser form. the form will automatically notify the computer science administrative assistant. 
next steps

the department's administrative assistant will process your request and assign you a faculty advisor, depending on the number of advisees currently assigned to cs faculty.
both you and your new adviser will receive an email from the administrative assistant indicating that you have a new adviser.
get a change of adviser form (scroll to bottom of page) from the registrar's office, fill it out, and have your new adviser sign it.
that’s it!














			requirements & courses
	





expand all




collapse all






computer science learning goals




goals for majors in computer science


students majoring in computer science at smith will gain a broad understanding of the core concepts of computing, as well as exposure to a variety of modern theoretical and programming paradigms. moreover, they will develop the essential ability to successfully apply these concepts and tools in diverse contexts arising in the arts and sciences. specifically, they will learn how to:

approach real-world situations from a computational perspective
solve problems abstractly
evaluate and implement proposed solutions
adapt their solution to relevant domains, and
reason critically about the broader implications and consequences of the design and use of computational methods.

measurable outcomes
the skills, knowledge and behaviors that students acquire through our curriculum are observable through their ability to:

learn new programming languages, use multiple programming paradigms, and describe the similarities and differences between these paradigms, articulate how computing systems function, in terms of software-hardware interfaces, resource management, and communication between their parts, and adapt to new platforms.
demonstrate understanding of the power and limitations of various algorithms and computational models through abstract formulation, concrete implementation, correctness and efficiency analysis.
map abstract computation to specific physical and software implementations, as well as draw appropriate conclusions about real systems, including efficient resource management, communication between parts, and practical constraints.
work both independently and as part of a team, engage in dialogue about computational problems and their solutions, and reason critically about the societal implications of the resulting system.







the major




computer science major
requirements
twelve full-semester courses or the equivalent

two introductory courses

csc 110 (s/u only)
csc 120


three core courses

csc 210
csc 231
csc 250


two mathematics courses

mth 111 or a math course with a prerequisite of mth 111 or phi 102
mth 153 or a math course with a prerequisite of mth 153


four intermediate courses

one csc or sds theory course: csc 205/ mth 205, csc 235/ sds 235, csc 240, csc 252, csc 256 csc 266, csc 274, csc 290, csc 294, a topic of csc 334, csc 353pm, csc 356ni, csc 370, csc 372 or a topic of csc 390.
one csc or sds programming course: csc 205/ mth 205, csc 220, csc 223, csc 235/ sds 235, csc 240, csc 249, csc 251, csc 262, csc 266, csc 274, csc 290, csc 294, a topic of csc 334, csc 352, csc 356ni, csc 370 or csc 372
one csc systems course: csc 223, csc 230, csc 249,  csc 251, csc 256, csc 262, csc 270, csc 327, csc 352 or csc 353pm 
one csc course at the 200 level or above.


one 300-level course, taken only after completion of the core courses

major requirement details

beyond csc 110, students may count one course (or up to 4 credits) s/u towards a csc major or minor with the approval of their advisor. 

an additional course at the 200 level or above is required if a student places out of csc 110. courses in other programs and departments may be used to satisfy this requirement by permission of the department.
an advanced undergraduate or graduate course taught at another of the five colleges for a letter grade may satisfy the 300-level course requirement with permission of the department.

honors
please consult the director of honors or the departmental website for specific requirements and application procedures.






the minor





on this page

computer science minor
digital art minor
digital music minor


computer science minor
requirements
six courses

csc 120
csc 210
one additional csc course at the 100 level or above (e.g., csc 110)
three additional csc courses at the 200 level or above*

*applying more than 4 credits of csc 400 to satisfy the requirements of the minor must be approved by the department. 
digital art minor
this minor accommodates students who desire both grounding in studio art and the technical expertise to express their art through digital media requiring mastery of the underlying principles of computer science.
requirements
six courses equally balanced between computer science and art

three computer science courses

csc 120
csc 210
csc 240


three art courses

arh 110 or other art history course
ars 162
ars 263 or ars 361



relevant five college courses may be substituted for any requirement with permission of the minor adviser.
digital music minor
this minor accommodates the increasing number of students who desire both grounding in music theory and composition and the technical expertise to express their music through digital media that requires mastery of the underlying principles of computer science. the minor consists of the equivalent of six courses equally balanced between computer science and music.
requirements
six courses equally balanced between computer science and music

three computer science courses

csc 120
csc 210
csc 220 or csc 250


three music courses

mus 110 or mus 210
mus 233 
mus 345



relevant five college courses may be substituted for any requirement with permission of the minor adviser.






courses





on this page

courses
crosslisted courses


courses


csc 109/ sds 109  communicating with data  (4 credits)
offered as sds 109 and csc 109. the world is growing increasingly reliant on collecting and analyzing information to help people make decisions. because of this, the ability to communicate effectively about data is an important component of future job prospects across nearly all disciplines. in this course, students learn the foundations of information visualization and sharpen their skills in communicating using data. this course explores concepts in decision-making, human perception, color theory and storytelling as they apply to data-driven communication. this course helps students build a strong foundation in how to talk to people about data, for both aspiring data scientists and students who want to learn new ways of presenting information. enrollment limited to 40. {m}
fall, spring


csc 110  introduction to computer science  (4 credits)
a gentle introduction to designing programs (recipes) for systematically solving problems. students learn to build programs including designing, coding, debugging, testing and documenting them. an introduction to block-structured procedural control flow including branching, iteration and functions, using primitive and simple data types (lists). students learn the high-level internal operation of computer systems (inputs, outputs, processing and storage) and their applications. students are exposed to the social and historical aspects of computing. this course is recommended for those who have no prior experience in computer science at the high school, ap or college level. s/u only. may not be taken concurrently with csc 120. restrictions: not open to students who have taken csc 111. enrollment limited to 30. {m}
fall, spring


csc 120  object oriented programming  (4 credits)
this course emphasizes computational problem-solving using a typed object-oriented programming (oop). students learn core computer science principles including: control flow, functions, classes, objects, methods, encapsulation and information-hiding, specification, recursion, debugging, unit testing, version control, using libraries and writing code in multiple files. students also learn and apply the model-view-controller (mvc) architecture, the basics of graphics and guis, working with external files and foundations of algorithm design. abstract data types and simple data structures are used to illustrate concepts of oop and solve computational problems through regular programming assignments (in java and python). this course assumes prior programming experience including a basic understanding of branching (if-statements), iteration (loops), functions and simple data types (integers, strings, lists/arrays). prerequisites: csc 110 or equivalent. cannot be taken concurrently with csc 110. enrollment limited to 30. {m}
fall, spring


csc 205/ mth 205  modeling in the sciences  (4 credits)
offered as csc 205 and mth 205. this course integrates the use of mathematics and computers for modeling various phenomena drawn from the natural and social sciences. scientific case studies span a wide range of systems at all scales, with special emphasis on the life sciences. mathematical tools include data analysis, discrete and continuous dynamical systems, and discrete geometry. this is a project-based course and provides elementary training in programming using mathematica. designations: theory, programming. prerequisites: mth 112. csc 110 recommended. enrollment limited to 20. {m}
fall, spring, annually


csc 209  web programming  (4 credits)
this course covers the fundamentals of programming for the web. students explore client-side development using html, css, javascript and jquery to craft interactive and visually appealing web experiences. next, the course transitions to server-side programming, using php and ajax to build robust and responsive web applications. the course also covers foundational topics in software design and project development through both hands-on projects and guided instruction. prerequisite: csc 120. enrollment limited to 30. (e) {m}
fall, spring, annually


csc 210  data structures  (4 credits)
explores elementary data structures (arrays, linked lists, stacks, queues, maps, trees, graphs) and algorithms (searching, sorting, tree and graph traversal) in a variety of contexts. using a typed object oriented programming language (e.g. java), students develop their own implementations as well as more complex applications based upon existing, standard data structures libraries. not open to students who have taken csc 212. prerequisite: csc 120. enrollment limited to 30. {m}
fall, spring


csc 220  advanced programming techniques  (4 credits)
reinforces programming skills learned in previous programming courses through working on a number of projects. offers practice for developing modular, reusable, maintainable code. students gain more experience with design and development. designation: programming. prerequisite: csc 210 or equivalent. enrollment limited to 30. {m}
fall, spring, variable


csc 223  introduction to software engineering  (4 credits)
introduction to software engineering theory and methodologies, with an emphasis on rapid prototyping and development. this course is a survey of topics: requirements elicitation and specification, prototyping and infrastructure, basic project management, architecture and design patterns, and verification and testing. students work in teams on a significant design and development project. prerequisite: csc 210 or equivalent. designations: programming, systems. enrollment limited to 32. {m}
fall, spring


csc 230  introduction to database systems  (4 credits)
databases form the foundation of modern commerce, social media and government. this course investigates the design and use of database systems from the traditional to the present day. designation: systems. prerequisites: csc 210 or equivalent. enrollment limited to 30. {m}
fall, spring, variable


csc 231  microprocessors and assembly language  (4 credits)
an introduction to the architecture of the intel pentium class processor and its assembly language in the linux environment. students write programs in assembly and explore the architectural features of the pentium, including its use of the memory, the data formats used to represent information, the implementation of high-level language constructs, integer and floating-point arithmetic, and how the processor deals with i/o devices and interrupts. prerequisite: csc 210 or equivalent. enrollment limited to 30. {m}
fall, spring


csc 233  introduction to electronics and arduino  (4 credits)
beginning with the basics of circuitry and electronic diagrams, the class studies several components commonly used in electronics, combining them in different ways through labs designed for hands-on learning. after the class has covered the basics, students design and build a creative hardware project of their own creation using an arduino microcontroller. prerequisite: csc 231. enrollment limited to 30. (e) {m}
fall, spring, variable


csc 235/ sds 235  visual analytics  (4 credits)
offered as csc 235 and sds 235. visual analytics techniques can help people to derive insight from massive, dynamic, ambiguous and often conflicting data. during this course, students learn the foundations of the emerging, multidisciplinary field of visual analytics and apply these techniques toward a focused research problem in a domain of personal interest. students who elect to take this course as a programming intensive course should have previously taken csc 212. in this track, students learn to use r, python and html5/javascript to develop custom visual analytic tools. students preferring a non-programming intensive track may elect to use existing visual analytic software, such as tableau or plotly. designations: theory, programming. prerequisite: csc 120 or equivalent. {m}
fall, spring, variable


csc 240  computer graphics  (4 credits)
covers two-dimensional drawings and transformations, three-dimensional graphics, lighting and colors, game design, perspective, curves and surfaces, ray tracing. employs postscript, c++, gamemaker, pov-ray, and radiosity. the course accommodates both cs majors, for whom it is programming intensive, and other students with less technical expertise, by having two tracks of assignments. prerequisite: csc 120 or equivalent. mth 111 or equivalent is an additional required prerequisite for majors. designation: theory, programming enrollment limited to 30. {m}
fall, spring, annually


csc 249  computer networks  (4 credits)
this course introduces fundamental concepts in the design and implementation of computer communication networks, their protocols and applications. topics covered include layered network architecture, physical layer and data link protocols; and transport protocols; routing protocols and applications. most case studies are drawn from the internet tcp/ip protocol suite. designation: systems. prerequisites: csc 120 or equivalent. {m}
fall


csc 250  theory of computation  (4 credits)
automata and finite state machines, regular sets and regular languages, push-down automata and context-free languages, linear-bounded automata, computability and turing machines, nondeterminism and undecidability. prerequisites: csc 110 and mth 153. enrollment limited to 30. {m}
fall, spring


csc 251  network security  (4 credits)
this course covers a wide range of topics in network security, with a focus on both core principles and practical information. students learn core network protocols, cryptography as information protection technologies, and the attacks and defenses most closely related to the network rather than the endpoints (e.g., laptops, desktops) on a network. subtopics include: authentication protocols, firewalls, intrusion detection, routing and dns security, scanning, eavesdropping, dos attacks, pki, password, privacy, anonymity, and recent advancements in the field. the course consists of a mixed format of lectures, in-class labs and hands-on sessions. designation: systems. prerequisites: csc 210 and csc 249. enrollment limited to 30. 
spring, variable


csc 252  algorithms  (4 credits)
covers algorithm design techniques ("divide-and-conquer," dynamic programming, "greedy" algorithms, etc.), analysis techniques (including big-o notation, recurrence relations), useful data structures (including heaps, search trees, adjacency lists), efficient algorithms for a variety of problems and np-completeness. designation: theory. prerequisites: csc 210, mth 111 and mth 153. enrollment limited to 30. {m}
fall, spring, alternate years


csc 256  human-computer interaction  (4 credits)
principles and practices of human-computer interaction, with a focus on human-centered design. this course provides a foundation in the methods and tools for conducting user research, gathering requirements, designing prototypes and evaluating interactive interfaces. discussions include human capabilities, ethnographic methods, universal design, interface technology and usability testing. students work in teams on a substantive interaction design project. designations: systems, theory. prerequisites: csc 210. enrollment limited to 30. {m}
fall, spring, variable


csc 262  operating systems  (4 credits)
an introduction to the functions of an operating system and their underlying implementation. topics include file systems, cpu and memory management, concurrent communicating processes, deadlock, and access and protection issues. programming projects implement and explore algorithms related to several of these topics. designations: programming, systems. prerequisite: csc 231. enrollment limited to 30. {m}
fall, spring, annually


csc 266  introduction to compiler design  (4 credits)
in this course, students learn the formal definition of programming language syntax and semantics. they are introduced to the functions of compilers and their design and implementation details. the course reinforces the students' knowledge of context-free grammars and automata and uses this knowledge in designing lexical analyzers and translators for high level programming languages. topics covered include lexical analysis, type checking, context analysis and code generation. designations: theory, programming. prerequisites: csc 231 and csc 250. 
fall, spring, variable


csc 268  image processing fundamentals  (4 credits)
images fill the media, and most are processed by computer at some point or another. this course examines a variety of algorithmic image processing techniques, exploring implementation and applications, as well as some of the social impact and ethical issues surrounding their use. prerequisites: csc 212 and mth 111. enrollment limited to 30. {m}
fall, spring, variable


csc 270  digital circuits and computer systems  (5 credits)
this class introduces the operation of logic and sequential circuits. students explore basic logic gates (and, or, nand, nor), counters, flip-flops, decoders, microprocessor systems. students have the opportunity to design and implement digital circuits during a weekly lab. designation: systems. prerequisite: csc 231. enrollment limited to 12. 
fall, spring, variable


csc 274  discrete and computational geometry  (4 credits)
topics include the core of the field: polygons, convex hulls, triangulations and voronoi diagrams. beyond this core, curves and surfaces, and computational topology are covered. throughout, a dual emphasis is maintained on mathematical proofs and efficient algorithms. students have a choice of concentrating their course work in mathematics or toward computer science. designations: theory, programming. prerequisite for mth major credit: mth 153. mth 111 recommended. prerequisite for csc major credit: csc 120. {m}
fall, spring, variable


csc 290  introduction to artificial intelligence  (4 credits)
an introduction to artificial intelligence including an introduction to artificial intelligence programming. discussions include: game playing and search strategies, machine learning, natural language understanding, neural networks, genetic algorithms, evolutionary programming and philosophical issues. designations: theory, programming. prerequisite: csc 210 and mth 111, or equivalent. enrollment limited to 30. 
fall, spring, variable


csc 293/ sds 293  machine learning  (4 credits)
offered as csc 293 and sds 293. the field of statistical learning encompasses a variety of computational tools for modeling and understanding complex data. in this introductory course, we will explore many of the most popular of these tools, such as sparse regression, classification trees, boosting and support vector machines. in addition to unpacking the mathematics underlying the computational methods, students will also gain hands-on experience in applying these techniques to real datasets using r. prerequisite: sds 201, sds 220 or csc 210, or equivalent intro statistics course. enrollment limited to 60. {m}
fall, spring, annually


csc 294  computational machine learning  (4 credits)
an introduction to machine learning from a programming perspective. students develop an understanding of the basic machine learning concepts (including underfitting/overfitting, measures of model complexity, training/test set splitting and cross validation), but with an explicit focus on machine learning systems design (including evaluating algorithmic complexity and development of programming architecture) and on machine learning at scale. principles of supervised and unsupervised learning are demonstrated via an array of machine learning methods including decision trees, k-nearest neighbors, ensemble methods and neural-networks/deep-learning, as well as dimension reduction, clustering and recommender systems. students implement classic machine learning techniques, including gradient descent. designations: theory, programming. prerequisites: csc 210, csc 250, (mth 112 or mth 211), and knowledge of python. enrollment limited to 40. {m}
fall, spring, annually


csc 325  seminar: responsible computing  (4 credits)
when is disruption good? who is responsible for ensuring that an innovation has a positive impact? are these impacts shared equitably? how can bias be eliminated from algorithms, if they exist? what assurances can anyone make about the technology they develop? what are the limitations of professional ethics? this seminar examines the ethical implication (i.e., ethics, justice, political philosophy) of computing and automation. participants explore how to design technology responsibly while contributing to progress and growth. discussions include: intellectual property; privacy, security and freedom of information; automation; globalization; access to technology; artificial intelligence; mass society; and emerging issues. prerequisite: csc 210. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. {s}
fall, spring, variable


csc 327  seminar: internet censorship  (4 credits)
internet censorship deals with practices of information control. this seminar covers topics related to 1) the existing blocking mechanisms at different layers of the internet protocol stacks used by network censors and 2) the broad issue of detecting the type of network interference as indicative of internet censorship. discussions include traffic differentiation, surveillance and blocking of content. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. 
fall, spring, variable


csc 328/ egr 328  seminar: digital circuits and sensors  (4 credits)
offered as csc 328 and egr 328. previously egr 390dc. digital circuits are everywhere, from basic thermostat controls and stop light sequencers to smart phones, computers and even mars rovers! this course covers the basic building blocks for all electronics. students investigate basic logic circuits, combinatorial logic and sequential logic with an introduction to the basic digital circuits such as encoders and multiplexers. the second part of the semester focuses on microprocessors, using the arduino. students build a variety of circuits with input (from a computer, or from the environment via sensors) and programmed output (leds, sound, data sent to a computer), in order to learn how information from our analog world can be converted into digital data. prerequisites: one of csc 110, csc 120, csc 205/mth 205, csc 210 or csc 220; and either egr 220 or csc 231. restrictions: junior and seniors only; engineering and computer science majors only. enrollment limited to 12. {n}
fall, spring, variable


csc 334bd  seminar: topics in computational biology-biomedical big data  (4 credits)
this course explores the intersection of computer science and biomedical research. in the genomic era, biological and clinical research generates vast amounts of omics data, much of which is publicly available. students examine the scientific literature to learn about ways that researchers are harnessing this data to make new discoveries in biomedical domains. this course also discusses the challenges that biomedical big data presents in terms of storage, access and analysis. finally, students engage in hands-on, project-based learning where they implement the approaches discussed to mine biological repositories, develop their own algorithms and test their own hypotheses. prerequisite: csc 294. a working knowledge of biology strongly recommended. restrictions: seniors only; computer science majors only. enrollment limited to 12. instructor permission required. {m}{n}
fall, spring, variable


csc 352  seminar: parallel programming  (4 credits)
the field of high-performance computing (hpc) leverages the largest and most powerful computers on the planet to enable cutting edge scientific breakthroughs that help us understand fundamental research questions. these machines and programs push the limits of speed and scalability and require a practical understanding of the entire computing stack as well as familiarity with novel and emerging hardware platforms. in this course, students learn and apply both the theoretical and practical aspects of the field. this includes exposure to both foundational texts and ideas along with cutting-edge research, and culminates in a student-directed group project that leverages both the technologies and techniques learned in this course. by the end of the semester, students are able to design, execute and evaluate potential parallelization strategies in a target domain. prerequisites: csc 210 and csc 252. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. 
fall, spring, variable


csc 353pm  seminar: topics in robotics-robotics perception and mapping  (4 credits)
robotic perception is a crucial aspect of robotics. it lets artificial agents, like robots or software automatons, gather information about their environment to make informed decisions. perception includes sensing of light information (vision), sound information (audition), tactile or limb-position information (touch/proprioception) and several other aspects that can be integrated to give the agent a sufficient idea of its context. the class discusses the basics concepts, and the history and future directions of robotic perception. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. 
fall, spring, variable


csc 356ac  seminar: topics in human-computer interaction: accessible computer  (4 credits)
this course explores how computing can enhance accessibility and how disability studies can guide effective solutions. students learn to assess and improve the accessibility of documents, websites, apps, and advanced technologies like ar/vr and ai/ml. the course covers practical skills, including evaluating accessibility and implementing inclusive design, and addresses future-oriented topics such as intersectional issues, accessible healthcare, and disaster response. the course culminates in a major project focusing on access technology, while also covering disability justice and advocacy. ideal for those creating interactive technologies and committed to fostering inclusivity. csc 256 strongly recommended. prerequisite: csc 212. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. (e) 
fall, variable


csc 356ni  seminar: topics in human-computer interaction-natural user interfaces  (4 credits)
in the study of human-computer interaction, a natural user interface (nui) is an interaction paradigm in which the interface is largely invisible to the end user. contrasted with wimp ("windows, icons, menus, pointer") interfaces found in traditional computing systems, nuis rely on seamless, intuitive interaction rather than artificial control devices. while companies such as apple and google have rapidly popularized the nui model, this interaction paradigm brings with it a unique set of design challenges, constraints and ethical considerations. this course explores ongoing research in this evolving area and puts these techniques into practice in various application areas. prerequisites: csc 210. csc 256 strongly recommended. restrictions: juniors and seniors only. enrollment limited to 15. instructor permission required. {m}
fall, spring, variable


csc 356pa  seminar: topics in human-computer interaction-platform activism  (4 credits)
networked platforms like social media sites, gig sharing apps and game consoles have become important sites of study for human-computer interaction. contemporary research on the subject includes both platform studies, which offer a critical perspective on the power that large companies have to shape the creative labor and communication patterns of their users, and technology design activism, which seeks to amplify grassroots movements for positive social change on those platforms. this course explores these emerging areas of scholarship and puts our learnings into practice by using participatory design to create new technological interventions on various media platforms. restrictions: juniors and seniors only. enrollment limited to 15. instructor permission required. {m}
fall, spring, variable


csc 370  seminar: computer vision and image processing  (4 credits)
explores the challenge of computer vision through readings of original papers and implementation of classic algorithms. this course considers techniques for extracting useful information from digital images, including both the motivation and the mathematical underpinnings. discussions range from low-level techniques for image enhancement and feature detection to higher-level issues such as stereo vision, image retrieval and segmentation of tracking of objects. designations: theory, programming. prerequisites: csc 210 and mth 111 or equivalent. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. {n}
fall, spring, variable


csc 372  seminar: applied algorithms  (4 credits)
covers advanced data structures and algorithms with an emphasis on object-oriented implementation, comparative efficiency analysis and applications. a variety of algorithmic approaches are discussed (divide-and-conquer, dynamic programming, greedy algorithms, graph traversal). the course goes beyond classical searching and sorting to graphs and networks and other applied problems, as well as a selection of np-hard ones. designations: theory, programming. prerequisites: csc 110, csc 210, mth 153 and mth 111, or equivalent. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. {m}
fall, spring, variable


csc 390lu  seminar: topics in artificial intelligence-natural language understanding  (4 credits)
this special topics course provides an introduction to programming computer systems that can understand and interact with humans through natural languages (such as english). the aim of this course is to go beyond “shallow” methods of parsing and computing word distributions and towards artificial intelligence software systems that think, understand, and communicate like real people. prerequisites: csc 231 and 250. restrictions: juniors and seniors only. enrollment limited to 12. instructor permission required. {m}
spring, variable


csc 400  special studies  (1-4 credits)
for majors. instructor permission required. 
fall, spring


crosslisted courses


csc 109/ sds 109  communicating with data  (4 credits)
offered as sds 109 and csc 109. the world is growing increasingly reliant on collecting and analyzing information to help people make decisions. because of this, the ability to communicate effectively about data is an important component of future job prospects across nearly all disciplines. in this course, students learn the foundations of information visualization and sharpen their skills in communicating using data. this course explores concepts in decision-making, human perception, color theory and storytelling as they apply to data-driven communication. this course helps students build a strong foundation in how to talk to people about data, for both aspiring data scientists and students who want to learn new ways of presenting information. enrollment limited to 40. {m}
fall, spring


csc 205/ mth 205  modeling in the sciences  (4 credits)
offered as csc 205 and mth 205. this course integrates the use of mathematics and computers for modeling various phenomena drawn from the natural and social sciences. scientific case studies span a wide range of systems at all scales, with special emphasis on the life sciences. mathematical tools include data analysis, discrete and continuous dynamical systems, and discrete geometry. this is a project-based course and provides elementary training in programming using mathematica. designations: theory, programming. prerequisites: mth 112. csc 110 recommended. enrollment limited to 20. {m}
fall, spring, annually


csc 235/ sds 235  visual analytics  (4 credits)
offered as csc 235 and sds 235. visual analytics techniques can help people to derive insight from massive, dynamic, ambiguous and often conflicting data. during this course, students learn the foundations of the emerging, multidisciplinary field of visual analytics and apply these techniques toward a focused research problem in a domain of personal interest. students who elect to take this course as a programming intensive course should have previously taken csc 212. in this track, students learn to use r, python and html5/javascript to develop custom visual analytic tools. students preferring a non-programming intensive track may elect to use existing visual analytic software, such as tableau or plotly. designations: theory, programming. prerequisite: csc 120 or equivalent. {m}
fall, spring, variable


csc 328/ egr 328  seminar: digital circuits and sensors  (4 credits)
offered as csc 328 and egr 328. previously egr 390dc. digital circuits are everywhere, from basic thermostat controls and stop light sequencers to smart phones, computers and even mars rovers! this course covers the basic building blocks for all electronics. students investigate basic logic circuits, combinatorial logic and sequential logic with an introduction to the basic digital circuits such as encoders and multiplexers. the second part of the semester focuses on microprocessors, using the arduino. students build a variety of circuits with input (from a computer, or from the environment via sensors) and programmed output (leds, sound, data sent to a computer), in order to learn how information from our analog world can be converted into digital data. prerequisites: one of csc 110, csc 120, csc 205/mth 205, csc 210 or csc 220; and either egr 220 or csc 231. restrictions: junior and seniors only; engineering and computer science majors only. enrollment limited to 12. {n}
fall, spring, variable













			additional programmatic information
	





expand all




collapse all






the honors program




what is an honors thesis?
an honors thesis is a yearlong investigation undertaken by a student in senior year under the supervision of a faculty member. the research counts as 8 credits—4 in the fall, 4 in the spring. the student writes a thesis by april 15 of her final semester and defends the thesis by giving a public presentation on her work to faculty and students. this presentation is usually scheduled for the last week of the semester. the thesis supervisor grades the 8 thesis credits. the department faculty vote on the level of honors to be awarded at graduation.
the computer science department maintains a copy of all theses written since the formation of the department. these are bound in red and can be found in a bookcase in the faculty offices. a copy of each thesis is also filed in the science library. check out a list of past theses.
why do an honors thesis?
if you are eligible (see below), it is an option that should be considered seriously. it is an intense but rewarding experience. few students regret it, and it is often the highlight of their undergraduate careers. it is not uncommon for thesis work to lead to a published paper, and in any case it gives the student a leg up on graduate school applications.
honors director
alicia grubb is the current honors director and should be contacted for questions regarding working on an honors thesis.
am i eligible?
the computer science admission criteria are as follows:

at least a 3.3 (b+) grade point average (gpa) through the junior year in all courses in the major.
at least a 3.0 (b) gpa through the junior year in all courses outside the major.
exceptions to the above gpa criteria granted by majority vote of the cs faculty in response to a written petition by the student.
approval by the department [which comes after you apply]

how do i apply?
detailed instructions are available from the guidelines found on the class deans website (filed alphabetically under "apply to enter the departmental honors program" and so easy to overlook). but here is the summary.
the formal application is due by mid-september of your senior year; it can be started and/or submitted in the late spring of your junior year. the formal application is not complicated. the most crucial aspect is securing a supervising faculty member and settling on a topic. the latter need only be worked out sufficiently to write up a one-page abstract of what you hope to accomplish in the thesis. but it is important to emphasis that you do not need to have a topic in mind before starting the process, as explained below.
concerning securing a thesis supervisor, there are essentially two models:

model 1 is that the student comes up with a topic, and convinces a faculty member to supervise it. this is more rare than:
model 2, in which the student goes to the faculty member, and says (effectively), can you suggest a topic? and then the student gathers the topics suggested by all the willing faculty, and decides what to pursue.

several faculty in computer science prefer model 2, for two reasons: (1) they can most knowledgeably supervise a thesis in an area with which they are thoroughly immersed, and (2) because faculty enjoy advancing their own research. typically faculty will meet weekly with their thesis student, and more intensively at crucial junctures of the research and writing.
we encourage students considering a thesis to contact all the faculty with whom they would be comfortable, and ask each if they have ideas for theses topics, perhaps under some constraints (e.g., avoiding programming, including programming, something related to artificial intelligence, etc.) in general faculty consider it a gift to be asked to supervise a thesis for a good student (and all thesis students are by definition good!), so do not feel that you are asking for a favor. it is best, although not essential, to initiate this topic investigation prior to the fall of your senior year, so that this process does not have to be compressed into the first two weeks of the semester.
please consult the director of honors or the departmental website for specific requirements and application procedures.
five computer science courses have no prerequisites. these are 102 how the internet works, 103 how computers work, 106 introduction to computing and the arts, 111 introduction to computer science through programming and fys 164 issues in artificial intelligence. students who contemplate a major in computer science should consult with a major adviser early in their college careers.






sample pathways through the major




with study abroad
sequence 1
example course sequence #1 for major in computer science with study abroad in a foreign language (entering with no prior experience in csc, one semester away)
 




year
fall
spring



1
 


csc 110
mth 111 or log 100
foreign language
writing intensive [eng or fys]


csc 120
mth 153
foreign language
elective




2
 


csc 210
elective
elective
elective


csc 231
csc intermediate
elective
elective




3
 


csc 250
csc intermediate
elective
elective


csc intermediate (study away)
elective (study away)
elective (study away)
elective (study away)




4
 


csc intermediate
elective
elective
elective


csc 300-level
elective
elective
elective





csc intermediate indicates one of the three 200-level courses satisfying the theory / systems / programming distribution requirements for the major.
elective indicates a course that is entirely free from constraints – could be within computer science, could be outside.
courses frequently taken abroad by computer science majors include csc intermediate courses, more advanced mathematics courses, additional programming courses, and courses in the humanities and social sciences
this course sequence assumes no prior experience in computer science and a single semester away. students with prior exposure to computer science (courses in high school, summer camp, etc.) should skip csc 110 and begin their course sequence with csc 120. alternate pathways through the major appear on subsequent pages. in these examples, we have attempted to maximize flexibility in course selection while abroad; however, students studying abroad at programs such as the ait budapest program in computer science may elect to satisfy additional major requirements while abroad (e.g. csc intermediate courses).
sequence 2
example course sequence #2 for major in computer science with study abroad in a foreign language (entering with prior experience in csc, one semester abroad with no major requirements while away)
 




year
fall
spring



1
 


csc 120
mth 111 or log 100
foreign language
writing intensive [eng or fys]


csc 210
foreign language
elective
elective




2
 


csc 231
mth 153
elective
elective


csc 250
csc intermediate
elective
elective




3
 


elective (study away)
elective (study away)
elective (study away)
elective (study away)


csc intermediate
csc intermediate
elective
elective




4
 


csc intermediate
csc intermediate
elective
elective


csc 300-level
elective
elective
elective





sequence 3
example course sequence #3 for major in computer science with study abroad in a foreign language (entering with no prior experience in csc, full abroad with light major requirements while away)
 




year
fall
spring



1
 


csc 110
mth 111 or log 100
foreign language
writing intensive [eng or fys]


csc 120
mth 153
foreign language
elective




2
 


csc 210
elective
elective
elective


csc 231
csc 250
elective
elective




3
 


csc intermediate (study away)
elective (study away)
elective (study away)
elective (study away)


csc intermediate (study away)
elective (study away)
elective (study away)
elective (study away)




4
 


csc intermediate
csc intermediate
elective
elective


csc 300-level
elective
elective
elective




without study abroad
example course sequence for major in computer science entering with no prior experience in csc and starting in the second semester sophomore year.  students can incorporate junior year study abroad by taking courses equivalent to those listed while away from campus.
 




year
fall
spring



1
 


writing intensive [eng or fys]
elective
elective
elective


elective
elective
elective
elective




2
 


elective
elective
elective
elective


csc 110
mth 111 or log 100
elective
elective




3
 


csc 120
mth 153
elective
elective


csc 210
csc 250
csc intermediate
elective




4
 


csc 231
csc intermediate
csc intermediate
elective


csc 300-level
csc intermediate
elective
elective





example course sequence for major in computer science intending to continue studies in graduate school, entering with no prior experience in csc, with thesis in the senior year.  students can incorporate junior year study abroad by taking courses equivalent to those listed while away from campus.
 




year
fall
spring



1
 


csc 110
mth 111 or log 100
writing intensive [eng or fys]
elective


csc 120
mth 153
elective
elective




2
 


csc 210
sds 220
elective
elective


csc 231
csc 250
elective
elective




3
 


csc 220 or 223 (programming)
csc 252 or 253 (theory)
elective
elective


csc 230 or 262 (systems)
csc 294 (ml)
elective
elective




4
 


csc senior thesis
csc 300-level
elective
elective


csc senior thesis
csc intermediate/advanced
elective
elective





students should expect some variation from the timing shown above, depending on when courses are offered. the course sequence above includes all of the strongly recommended courses below:

csc 252: algorithms or csc 253: applied algorithms (theory)
csc 220: advanced programming or csc 223: software engineering (programming)
csc 230: databases or csc 262: operating systems (systems)
csc 294: computational machine learning (additional elective)
sds 220: introduction to probability and statistics













			faculty
	








johanna brewer



									computer science
							
assistant professor of computer science


















shinyoung cho



									computer science
							
assistant professor of computer science


















r. jordan crouser



									computer science
							
associate professor of computer science; chair, department of computer science


















pablo frank bolton



									computer science
							
lecturer in computer science


















hia ghosh



									computer science
							
lecturer in computer science


















alicia m. grubb



									computer science
							
associate professor of computer science


















nicholas howe



									computer science
							
professor of computer science


















katherine m. kinnaird



									computer science
							
clare boothe luce assistant professor of computer science and of statistical & data sciences


















jamie macbeth



									computer science
							
associate professor of computer science


















ab mosca



									statistical & data sciences
							
visiting assistant professor in computer science and statistical & data sciences


















halie rando



									computer science
							
assistant professor of computer science


















michael robson



									computer science
							
assistant professor of computer science


















ileana streinu



									computer science
							
charles n. clark professor of computer science


























emeriti faculty
merrie bergmanassociate professor emerita of computer science
judy franklinassociate professor emerita of computer science
joe o'rourkespencer t. and ann w. olin emeritus professor of computer science
dominique thiébautprofessor emeritus of computer science





recent visiting faculty
mihaela malita (amherst college)sahar al seesi (southern connecticut state university)john foley (middlebury college)razieh fathi ( whitman college)












			resources & opportunities
	









scroll left




helpful links & wiki pages




student research




surf




scroll right

















			departmental wiki pages
	

the department of computer science hosts wiki pages on research groups, workshops and communities. you can also learn about class projects, special studies projects and more.
main wiki page
(access limited to campus network or smith vpn only.)







			helpful links
	

clark science centerstem at smithgirls who codeanitab.orgnational center for women in information (ncwit)smith college study abroadsmithies in cs











many students complete independent research projects in computer science under the supervision of a faculty member. often these are undertaken over the summer, or they may be completed during the academic year as a special studies or honors thesis. funding for these projects comes from a variety of sources. if you are a student interested in working on a research project, it is best to speak as soon as possible to the faculty member with whom you wish to work. some research labs have information pages linked below; for others please contact the faculty member directly.

johanna brewer's research lab
alicia grubb's research lab

since 2008 students have documented their research projects on the departmental wiki pages.
 













			what is surf?
	

summer undergraduate research fellowships (surf) is the centerpiece of smith’s summer research fellowship program. the application for surf is available on the clark science center website.







			who is hiring?
	

alicia m. grubb
each summer i accept 5-8 students interested in software development and/or empirical research (i.e., software engineering).
we usually have at least one development project ongoing using our tool, bloomingleaf, and this summer is no exception. we seek the help of enthusiastic students with strong programming skills and an exposure to web development (javascript), who have excellent communication skills (written/verbal english) and an ability to work independently and collaboratively. our online codebase will help you create a portfolio for future applications to employers and graduate schools. in prior development projects, we worked on refactoring our code base to enable new model management features and restructured the code base to take advantage of underlying libraries. our next step is to continue to implement new visualizations and model management features.
for those more interested in empirical software engineering research, we are currently working on evaluating the usability of some of the algorithms we’ve developed over the past two years. past surf research projects include studying goal model construction and evaluating a framework for uncertainty.
additionally, we are investigating how to model artifacts in a github repository. these are evolving projects and we welcome the insights of enthusiastic students interested in research, who have excellent communication skills (written/verbal english) and an ability to work independently and collaboratively.
students with an interest in research and/or an interest in quantitative (e.g., spreadsheets, r, statistics) or qualitative (e.g., open coding, ethnography) data analysis should state this on their application.
see more details about the grubb lab and other student projects on the grubb lab website.
r. jordan crouser

the automated scribal identification project uses ancient manuscripts written in the aramaic dialect of syriac as a case study for exploring how recent advances in the digital analysis of handwriting can help scholars better ascertain a manuscript's provenance, identify manuscripts written by the same scribe, and trace out the chronological development of ancient scripts. although the initial project goal is to substantially advance our understanding of syriac christianity, its greatest effect would be in providing a platform and a model for similar ventures in other languages such as arabic, greek, hebrew, latin, and sanskrit.
individual differences project: researchers have conducted many studies that observe a data analyst performing a particular task, and have used those observations to define an analytic workflow. individual analysts have distinctive workflows: they may combine canonical actions in unique patterns, focus on particular areas over others, and so forth. but, how do we predict which workflows an analyst is likely to favor in advance? in this project, we will design and conduct a series of experiments aimed at understanding the invariant features of the user that can be used to identify which features of an analytic tool we can modulate to better support individual analyst. by mapping features of the user on to features of the tool, we aim to provide a better, more streamlined experience for the user, thereby amplifying human analytic capabilities in areas where purely computational analysis fails.
computing for mental health project: a collaboration with clinicians at the justice resource institute on exploring the role of computation and interactive systems in community-based mental health initiatives.

katherine m. kinaird
i am looking for students interested in building a new python package and/or interested in building an interactive visualization platform for a representation of musical scores. additionally, i may have funding for a student interested at the intersection of data science education research and text mining.

building a new python package that reimagines existing matlab code for building aligned hierarchies, a representation for musical scores. this builds on work published at ismir 2016, but requires no background knowledge in music information retrieval (mir). students interested in this project should have experience coding in python (ie. cs 111), and they should be excited by the prospect of building code that will be publicly available.
the interactive aligned hierarchies also builds on the aligned hierarchies, but links the static output to the score. this will allow for interactive exploration of both the score and the representation simultaneously. students interested in this project should have experience designing large-scale projects and are excited about connecting visualizations with sound files.
(possible funding) as part of a tripods+x grant, there is summer work to explore investigating students’ data science misconceptions before and after their first formal course in data science. this project will rely on aspects of text mining in addition to data management.

ileana streinu
recent projects:

geometry of viral capsides
prototyping auxetic materials
educational materials for a new robotics course

 
nick howe
handwriting recognition & historical manuscripts. find more information on nick howe’s research page.


see who's hiring





















			an inviting community
	
the department of computer science offers many opportunities for students to get involved in clubs, activities and events both on and off campus. 



































































































			contact department of computer science
	

ford hall 255smith collegenorthampton, ma




phone: 
 
  
	413-585-3804
	
email: 
 
  
	fdooleyfairchild@smith.edu
	



administrative assistant: ferron dooley fairchilddepartment chair: jordan crouser













smith college logo



smith college





			smith college
	
10 elm streetnorthampton, ma 01063
 phone:
	
 
  
	413-584-2700
	




footer



 
  
	portal
	


 
  
	directory
	


 
  
	dining menus
	


 
  
	campus map
	


 
  
	give to smith
	


 
  
	employment
	


 
  
	libraries
	


 
  
	botanic garden
	


 
  
	museum of art
	






celebrate smith’s 150th anniversary with us!







social navigation






twitter







instagram







facebook







youtube






©
				2025
				smith college.

meta



 
  
	privacy
	


 
  
	terms of use
	


 
  
	title ix
	


 
  
	equity and inclusion
	


 
  
	nondiscrimination statement
	


 
  
	consumer information
	


 
  
	contact us
	






experiencing an accessibility issue on a smith web page?
 
  
	please let us know.
	















