




sirtimbly


















			tim bendt
			blog



skip to latest
			article
homearchives













2024-07-01
prefer boring technologies


boring technology prevents surprises.surprises slow down development. use boring technology unless overridden by another constraint.i tend to get a lot done when i‚Äôm excited about the newness of something. i feel the excitement and get into ‚Äúthe zone‚Äù a lot easier when i‚Äôm trying out new tech. when it‚Äôs time to build a project for maintainability and longevity it‚Äôs best to have already gotten that out of one‚Äôs system. know the tech that you like using the best and are most familiar with. learn new things so that when it‚Äôs time to build something serious you have the knowledge base so fewer things will be surprises. adopt very few ‚Äúsurprising‚Äù things. surprising other developers (and future you) is a bad thing. it causes frustration and confusion. people will make assumptions about tools and libraries instead of reading documentation. so chose tools and languages and libraries that are widely understood and easy to learn about. try not to implement things in surprising and clever ways.
use well-maintained technology.if the tool is simple and just ‚Äúfinished‚Äù then evidence of frequent maintenance releases isn‚Äôt really a problem.normally i want to see that maintainers of a project are putting out minor patches pretty frequently. hopefully they are updating their dependencies and responding to support requests and merging pull requests. if the tool is very niche, and if it doesn‚Äôt have any dependencies to update then that‚Äôs actually better because there is less for the library author to maintain. but generally i want to see that some releases have happened in the last 6 months and issues do get answers or comments sometimes.
the biggest risk we are trying to mitigate with checking maintenance frequency is, if you run someone else‚Äôs code, and it runs in a dynamic context where we see frequent new and emerging interactions with other technologies, or where users and clients will be calling it directly (like an api server), then it had better be frequently updated and maintained and scanned for security vulnerabilities.











2024-06-29
research notes: testing 


gotta just stash a few of the interesting links about testing i‚Äôve saved here.
there are some faster jest-like test runners to consider https://github.com/swc-project/jest compare to vite compare to bun compare to node.
other articles:

mocking is an anti-pattern
https://kentcdodds.com/blog/write-tests
how load performance testing works
testing the dark scenarios of your node.js application













2022-01-25
world-schooling: life abroad with kids


we‚Äôre on the move again after many years. we wanted to pursue a new way of life with our kids for a while. we wanted to see if we could be happy and healthy in a central-american country with our little ones, while i work remotely for granular and becca educates them. we are able to do this with the help of our friend adriana and chris, they wanted their kids to have the chance to see more of the world and experience life in other cultures too. our children all get along really well, so last year we began planning and searching for the right place to go together.
in early january we first traveled to valladolid, mexico where a wonderful couple set up and hosted a great world-school program for 2 weeks. the whole thing went so fast. and gave us a great introduction to this lifestyle. we experienced families living together in intense community - we learned about mayan culture and traditions, we explored ruins, cenotes, beaches and caves.
the kids grew a ton through this experience - i‚Äôm not at all worried about them missing out on important educational content. we‚Äôre taking their 6 and 8 year-old minds to places that will make them better people along so many dimensions. becca and adriana work hard to give them some school-like structure and to keep them focused each morning.
now we‚Äôve arrived in costa rica, and we are staying in a mountain town here for at least a month. i took time off while we were in the yucatan peninsula, but now am back to a daily working schedule. i find that i‚Äôm way happier to wake up and start work in the morning during the last week or so. the days go quickly, and i can hop in the pool or lounge on the hammock when i need to take a break.
it‚Äôs pretty hot in costa rica compared to mexico this time of year. but a strong breeze comes through in the evenings and mornings to cool things off, and tonight it‚Äôs actually very comfortable.
the cicadas are loud. really loud.
i‚Äôm excited about exploring a new country, driving around and seeing new places, just getting to know a place and the cool things to eat here. our hope is that we and the kids will get a big boost in our spanish language learning here from a tutor we‚Äôve hired. and i really hope this trip gives us energy and excitement to keep traveling and seeing more of the world. we don‚Äôt know what is in store, but i‚Äôm not going to miss this because of fear of the unknown. also, it‚Äôs really freaking cold in colorado. ü•∂
the internet has been ‚Ä¶ kinda meh everywhere. i have to use a cellular hotspot pretty regularly. pre-paid data in costa rica is about $4 usd for 10 gigs. the glocalme duo turbo is the hotspot i chose.
i brought along a few work gadgets to make my office more comfortable. unfortunately it‚Äôs not practical to pack my office chair and standing desk, but i have this compact laptop stand from elfant and i packed a logitech mx keys mini keyboard and logitech mx anywhere 3 for mac mouse. i use my surface headphones 2 with noise cancelling. i forgot to bring my trackpad for my left hand ‚Äî and i miss it a lot.
i also have a few backup batteries that can provide usb-c pd strong enough to give my laptop a little extra time, or run a router here in the rental house if power goes out. that may have been over-kill. power has not been a problem at all yet.
i‚Äôm excited to learn more, to see how my perspective and priorities change, and to see what we want to do as a family when our current itinerary runs out in march. will we immediately have more to do, or will we want to go back home then?












2021-12-01
desk-ercise: working on a bike is working out


a few months ago i started a new job with a great company that provided some budget for setting up home-office equipment. i decided it was time to try out a standing desk for real, and i added an extra special acessory, a stationary bike that fits under a desk.
i have a real on-again-off-again relationship with fitness. i tried standing at my desk at work 8 years ago, but gave up because i didn‚Äôt have a powered desk that goes up and down easily. if i wanted to stop standing i had to move my laptop and extra monitor off the shelf. more recently i have tried fitbit trackers over the years, but stopped wearing my versa 2 about 6 months ago.
so i‚Äôm back into the gadget zone, i have the standing desk from flexispot the adjustable standing desk pro series and to go with it a sit2go fitness chair. 

i started out using the bike at the 2nd difficulty setting (out of 6). and this was comfortable and fun, it got me moving and it felt easy to rack up 10+ miles on the display each day. i could still talk and think clearly during meetings without being winded. i‚Äôve been pretty regular about using it for the last month.
then i decided to put my fitbit again and start working towards a tracked goal. since i don‚Äôt get to walk every day especially during the winter months, i set my primary goal as ‚Äúactive zone miunutes‚Äù. the fitbit uses it‚Äôs heart-rate sensor to detect when you are in the fat-burn zone (worth 1 minute) or cardio zone (worth 2 minutes) and that seemed like something i can do easily each day from my desk. i set the goal to 22 minutes, which is the default, then tried to get my minutes counted. 
unfortunately, when i ride the bike normally i only get my hr up to about 100bpm. this isn‚Äôt good enough! i only earn azm minutes on the fitbit when my hr is above 115. and i only get my 2x cardio minutes when i‚Äôm above 130. so i cranked the difficulty level up to 4 and started really pumping on those pedals. unfortunately this means i can‚Äôt do the exercise during meetings anymore, i have to find a spot where i‚Äôm not expected to talk or think deeply for 20+ minutes. but at least i don‚Äôt have to go to the gym for it.
also i love the standing desk, it has 3 different height settings. of course i still don‚Äôt love how shaky and bouncy my monitor is when i move or type, but that problem could only solved by switching back to my heavy steel workbench.











2021-09-21
adhd dev journal: module federation thoughts


8:52 amusing task management software consistently for more than a couple weeks is hard. 
9:02 amhttps://stackoverflow.com/questions/23844761/upstream-sent-too-big-header-while-reading-response-header-from-upstream
https://gist.github.com/magnetikonline/11312172#determine-fastcgi-response-sizes
https://tech.setepontos.com/2018/03/25/control-synology-dsm-services-via-terminal-ssh/
9:55 amwebpack module federation creates a really interesting opportunity to evaluate code ownership and maintenance in a web application. if we break up any application into small pieces then there has to be tools and processes in place that reliably reassemble those pieces together back into the running application that the user interacts with. the reasons for breaking the code apart into different modules in the first place is important. there‚Äôs several reasons:

understanding. it‚Äôs easier to understand and comprehend the scope of a function when it‚Äôs been isolated and designed with a specific interface.

engineer ownership. the actual people that do the work may not want to be slowed down by understanding and running tests for a larger code-base, they may want to write, test and deploy a piece of code that is smaller in scope so they can move faster.

isolation from side-effects. depending on the technology and interface definition, the two different code-bases may be less impacted by bugs in each other when they are isolated.


most of the other reasons i can think of depend on the method of isolation/separation. for instance, in module federation, js components are loaded from an http endpoint and injected into the host application in the browser at runtime. this means the developer of the host application isn‚Äôt able to see and predict the effects of every change that happens in a federated module they are loading. whereas if the module was loaded a build time, using webpack on the ci/cd server, then the js code that is loaded will always be knowable and testable by developers before it is run by the user‚Äôs browser. 
the big drawback of build-time integration is that fixes and updates to the module must be pulled, tested, and approved by a developer before they are deployed to any users. so, runtime integration through webpack module federation gives us back some of the freedom we had on the web before we all started using bundlers and npm for our dependencies. back in the day we could choose which dependencies were loaded as always the latest version, or which ones were pinned to a specific version or ‚Äúfingerprint‚Äù.
12345678<html>    <head>        <!-- this component will be cached by the browser, but can be updated by whoever can push changes to the cdn, no change to this html file is needed. -->        <script type="text/javascript" src="cdn.mydomain.com/js/always-latest-component.js"></script>        <!-- this component has a fingerprint which means if a new version is pushed, then this html file must be updated too -->        <script type="text/javascript" src="cdn.mydomain.com/js/pinned-component.6fe4afd32a.js"></script>    </head></html>
that‚Äôs a simplified example of what we‚Äôre talking about. it wasn‚Äôt an issue when the html file and js file were maintained and owned by the same team. but, as organizations grow and ownership is divided further and further, the repo and build process responsible for the html file may not be the same as the js file. this can cause terrible slowdowns when a component developer can‚Äôt see their changes in production until the upstream team adopts them and deploys them.
the adoption of webpack and npm set the default for modern applications to always have every dependency pinned and fingerprinted at build time. this type of bundling and compilation step made the end result more predictable for web developers by simplifying the mental model of where your code comes from.
changing that model to include runtime dependencies through webpack module federation, modern es modules in the browser, or a script tag with a src that wasn‚Äôt compiled in webpack will complicate the maintenance and debugging story for an application, while offering certain advantages in letting different developers update and maintain different parts of an application independently.











2021-09-20
adhd dev journal: after a long weekend


getting away with my wife for some relaxation and eating out was truly special. we had some close friends offer to watch the kids for a couple days. it‚Äôs been over a year since we‚Äôve gotten to completely unplug and relax like that for more than a couple hours. our favorite things to do were eating out, and shopping for little decorations to go around the house.

some articles i‚Äôve been looking at this morning.https://www.slowboring.com/p/china-speech
wikimedia threats?
hyperkitty
keybase‚Ä¶ belongs to zoom?
handshake
keys.pub
tasmota
https://github.com/ct-open-source/tuya-convert
https://github.com/xoseperez/espurna
https://platformio.org/
home ventilation project
10:44 amtime to write up some recommendations for authentication steps.
9:43 pmi spent a little more time on the self-hosted budgeting app firefly-iii. setting it up was not quite as straight-forward as i had hoped. basically the author is aggressively moving forward with minimum system requirements and forcing php 8 for the latest version, which isn‚Äôt available on my 8 year old nas chip architecture. had to figure out how to roll back, since php will still attempt to execute the new code but will fail on newer syntax. also there are always little gotchas if you don‚Äôt keep each element of the application up to date, so since i was running a version of mariadb that was old, it didn‚Äôt install correctly at one point. that troubleshooting process took a while, and then for some reason the csv-importer application that is a sort of side-car to the main application is erroring out without showing me the message, and that makes it very difficult to troubleshoot. without csv importing i‚Äôm not sure it‚Äôs worth setting up the budget app at all. i‚Äôm certainly not going to enter transactions manually. i‚Äôm not even certain i‚Äôm willing to import them on a monthly basis based on my past patterns with these types of finance apps.











2021-09-15
adhd dev journal: middle of the hackathon


the amazing thing about php and mysql web apps is that i can troubleshoot and fix them even though i know so very little about php. it‚Äôs a really robust ecosystem. i don‚Äôt want to manage my own application servers for everything but the php applications are the simplest to manage. and searching stackoverflow returns just about everything you could imagine.
it‚Äôs good because i staked a part of my business on a self-hosted paid php application 5 years ago: pancake and it‚Äôs still going strong and relatively easy for me to fix even when it‚Äôs running on an 8 year old synology diskstation.
this looks like an interesting budgeting app to try out. firefly-iii











2021-09-13
adhd dev journal: starting a hackathon


i need to remember to get up and move and exercise sometime today when i‚Äôm starting to lose focus. i woke up late, stayed up late working last night, but it was fun. i‚Äôm looking forward to expaining what i did to some of my coworkers.












2021-09-12
adhd dev journal: serverless next.js


doing a little catching up on the weekend, trying to get this demo site working for a hackathon. my preferred stack is nextjs + prisma. i‚Äôve always deployed it on vercel before, but at my current company we use aws directly and extensively. i am finally trying out the serverless tool for deploying apps, and it has not been the easy straightforwrad experience i hoped for.
first, i needed to sort out the authentication thing, and of course a big corporate it organization manages their aws access in a very particular way, which was a little confounding to me coming from the startup - quick and dirty way of doing things.
second was the fact that i was using a newer configuration thing called ‚Äúserverless components‚Äú and specifically the one for nextjs which is supposed to take all the config for a nextjs app and abstract it into a single line with good defaults. 
unfortunately i ended up running into an edge case because the client binaries for prisma are not copied into the deployment package that is uploaded to aws lambda. there is an example workaround in this repo config which almost worked. but for some reason i had to copy the client files directly into the root of my deployment directory, otherwise prisma couldnt find it and i would get errors int the logs like:
12345678910111213141516171819202122error   prismaclientinitializationerror3 [prismaclientinitializationerror]: query engine binary for current platform "rhel-openssl-1.0.x" could not be found.this probably happens, because you built prisma client on a different platform.(prisma client looked in "/var/task/chunks/query-engine-rhel-openssl-1.0.x")searched locations:  /.prisma/client  /users/tim/granular/csf-portal-next/node_modules/@prisma/client  /var/task  /var/task/chunks  /var/task/chunks  /tmp/prisma-engines  /var/task/chunksyou already added the platforms "darwin", "rhel-openssl-1.0.x" to the "generator" blockin the "schema.prisma" file as described in https://pris.ly/d/client-generator,but something went wrong. that's suboptimal.please create an issue at https://github.com/prisma/prisma/issues/new    at cb (/var/task/chunks/930.js:36253:17)[truncated]    
anyway, you see this is a big pain and it requires customizing the serverless config with custom shell scripts. and if there‚Äôs one thing i‚Äôve learned it‚Äôs that writing shell scripts in .yml files is sign that things are going off the rails in a bad way.
here‚Äôs my serverless config
12345678910111213141516171819mynextapp:  component: "@sls-next/serverless-component@3.3.0"  inputs:    build:      env:        database_url: ${env.database_url}      postbuildcommands:        - pdir=node_modules/.prisma/client/;          ldir=.serverless_nextjs/api-lambda/;          if [ "$(ls -a $ldir)" ]; then            cp "$pdir"query-engine-rhel-* $ldir;            cp "$pdir"schema.prisma $ldir/chunks/;          fi;        - pdir=node_modules/.prisma/client/;          ldir=.serverless_nextjs/default-lambda/;          if [ "$(ls -a $ldir)" ]; then            cp "$pdir"query-engine-rhel-* $ldir;            cp "$pdir"schema.prisma $ldir/chunks/;          fi;
this puts the files in the place that prisma is looking for them on the lambda.
of course you still need to make sure your project can actually access your database and is in the same vpc with the lambdas. there is no end to the configuration power you have with aws, but, i heartily recommend just using vercel and some publicly accessible hosted postgres database.
or maybe i should have just used a serverlss configuraiton that put a create-react-app build into an s3 bucket and a seperate express api on a lambda instead of trying to put them together into a single project. my current approach could be an example of too much magic again. 
aws security roles are such a pain to deal with. it‚Äôs after midnight now but i feel like i really accomplished something. a nextjs application deployed on lambdas and cloudfront, where the api handlers connect to a postgres database using prisma db client. was that so much to ask for? apparently it is. tomorrow i‚Äôll probably just scrap the whole thing and put it on a plain ec2 instance. but this ci deployment script should be super simple compared to what it would take to deploy a whole next app to a ec2 instance. npm ci && npx serverless











2021-09-09
adhd dev journal: api keys


9:24 am
learned that for rest endpoints, the pancacke app api key is passed in through the http header x-api-key

10:43 amabsorbing more information about carbon and climate change.
brighten the clouds? - don‚Äôt forget that it reflects energy back onto the earth that would have been radiated out‚Ä¶
sequestration of plant material may not actually work if you just bury it.
olivine seems fine‚Ä¶ but it‚Äôs impurities are kinda toxic i guess?
parasols in spaaaaace!
recyling‚Ä¶ not our finest idea
what a mess. global analysis paralysis has set in‚Ä¶ and for good reason.  
10:56 amdiscussion of a hackathon project for next week. i‚Äôm good at starting new things from scratch.
2:29 pmbeen setting up a new application environment in aws for the hackathon. trying to make lots of decisions.

4:32 pmalways double-check the region in the aws console. and rds with postgres and rds aurora with postgres are two totally different things.











2021-09-08
adhd dev journal: dentistification


going to the dentist today to fill a cavity.

spent time trying to write a node cli tool script to simulate web calls to my time tracking app, and failed to get authorization cookies to stick around. so annoying. i don‚Äôt want to build a whole fake authentication lifecycle, but that‚Äôs probably the best option since there‚Äôs no real api. well, their api ‚Äúdocumentation‚Äù doesn‚Äôt have any details on auth tokens.
i thought i could add a custom menubar app to my mac that allowed me to track my time and stay on focus better. it‚Äôs a classic way of spending time on a productivity tool instead of being productive. it‚Äôs amazing that after a few weeks of not doing much coding i have to go back to documentation for things that i‚Äôm sure i had memorized before.
later‚Ä¶now i‚Äôm reading about magnetic-confinement for fusion. fusion energy, man! such an exciting mad-scientist type of thing to think about. 

i want to lay out all the areas of work in my big project on the whiteboard and think about a cascade of issues that need to be solved. i enjoy zooming out on the problems more than writing code some days. if i do that for too long then i swing back and then just want to write code. it‚Äôs hard to do any one thing for too long.
wow that was a really unfocused day. i had such a hard time getting anything useful done. we had a sick kid that messed up our sleep last night. maybe that was the problem. it‚Äôs hard have days like this where my mind wandered so much. i need to find ways to apply my energy towards useful things. 











2021-09-07
adhd dev journal: off & on


great 3-day weekend. played with my kids, picnicked with neighbors. it‚Äôs amazing how much easier it is to enjoy the weekend with this new job compared to working for an early stage startup. 
lots to catch up on today. feeling a little overwhelmed again. 
over the weekend i read some more about add and considered a few different things to try. 

large daily doses of a multi-vitamin like emp+

a desk bike like the flexispot, as reviewed on ars.


what about a standing desk? hmm might need to do some business expenses at the end of the year. wait‚Ä¶ is my lg 5k actually vesa mount compatible? is the built-in stand tall enough for standing desk configuration?
9:03 ami‚Äôm very interested in watermelon db. i actually tried using nozbe (they own this github repo) as my task manager like 10 years ago. it was very powerful.


so it‚Äôs a database for making react-native apps fast that would be slowed down by loading and unloading large persisted caches into redux stores. multi-threading, native threads, indexing. what is it using for it‚Äôs db on native? on the web it can use loki.js. 
is the app i‚Äôm building really a offline-first app?
watermelon does not really take care of syncing. wait they have flow types? not typescript? wat? 
so if we want to build the app with strong offline support we need to consider if it needs a full offline database? doe the use-cases support that? does data get created and updated on the mobile client that will then be synced to the back-end eventually? and i know we have sync endpoints for reading data but do we have endpoints for bulk updating data that was changed locally?
checked into pouchdb years ago. i don‚Äôt think couch db on the server is a viable option for this app. it‚Äôs not a great, or feature-full production app database.
11:21 amhaving trouble caring about work at the moment.
2:12 pmlooking up information about oauth and react-native.
2:52 pmthinking about digital nomad life in costa rica. apparently cost of living isn‚Äôt actually that low any more. new digital nomad visa doesn‚Äôt really apply since i would be spending less than 6 months anyway.
3:12 pmreact-native-app-auth
microsoft authentication library (msal)
react native msal
4:06 pmsolidjs - i like that people are still perfecting the front-end functional reactive programming paradigm.
4:19 pmoh wow. ‚Äúmoonfall‚Äù. this new roland emmerich film looks like exactly the kind of escapist nonsense i want to see. 








next








      about me
    



      contact me
    



      inquire about consulting
    






  
  ¬© 2024 tim bendt
  







