ï»¿





mike's flight deck















welcome to mike's flight deck







getting started
primary flight controls
instruments
center pedestal
seats
dimensions
scenery display
enclosures
head up displays
interfacing
lvdts
annunciator lights
led dimmer
micro controllers
rwr project
links
simpit links
comments
update history
old news
 



 

mike's flight deck books
building recreational flight simulators
building simulated aircraft instruments
building immersive display systems






mike's flight deck is an introduction to home 
		cockpit building, the hobby that takes off where flight simulation game 
		software ends. when staring at a 17" monitor on a crowded desk, and 
		pushing, pulling and twisting a wimpy joystick just doesn't do any more, 
		it's time to build a simulated cockpit or flight deck. this site offers 
		information on how to do just that.
mike's flight deck is also home to mike's flight 
		deck books, a very small company that sells the books i've 
		written about building flight simulators. so far i've written and 
		published two trade paperback books and the first three ebooks in "the mike's flight 
		deck guide" series.
clicking on a cover image will take you to the information/order page for 
		the respective book.

		 


 ** note: a few copies of building 
		recreational flight simulators are still 
		available and can be purchased  here.**
 
what's new:
 
using can bus for flight simulation (28 june 2024)
can is a lightweight, inexpensive networking technology that you can 
		use to simplify wiring in a simpit. if you're using some of the more 
		recent micro controllers (esp32, feather can, arduino uno r4) you 
		already have built in can capability. if not, a low cost ($3~4) module 
		can add it. for some reason can seems to be almost unknown in the diy 
		flight sim world. my latest book,
		using can bus for flight 
		simulation, aims to change that.
using can bus covers the essentials 
		of can then walks you through a project that shows how to to connect 
		instruments, switches, and leds to a cessna 172 in x-plane (or other 
		planes & sims). 


using can bus is available as an 
		ebook from amazon. clicking on the cover will take you to the ebook's 
		purchase page.
 
micro-stepping a switec (26 may 2024)
i revisited the design of the instrument in the "building single 
		pointer instruments" ebook. the issue is that the switec movement used 
		in the instrument is a bit too noisy and jerky when driven by the spec 
		sheet official step pattern.
  
these movements make noise and produce less than smooth needle motion 
		because they contain a two-stage gear train with significant backlash. 
		the abrupt shaft movement from the stepping motor bangs the gear teeth 
		together and jerks the needle. the solution is taming the stepping motor 
		shaft movement through micro-stepping. 
switec movments are widely used in cars where they perform quite 
		well, but car manufacturers have access to specialized micro-stepping 
		chips, something that is expensive and hard to get in the hobby world. 
		the stepping motor inside the switec is a "lavet" type motor which is 
		different from the types of stepping motors typically used by the hobby 
		community. the micro-stepping motor drivers we might typically turn to 
		don't work well with switec or similar movements. (plus, they cost too 
		much.)
the processor chip used in the arduino is capable of generating 
		micro-stepping patterns for the switec, but we have to tweak its setup a 
		bit to get it up to speed.
the arduino nano has three timers each capable of producing two pwm 
		outputs which can be used for micro-stepping.  timer 0 is used by 
		the millis function so is not available because that function is needed 
		to set the motor step timing. timer 2 shares i/o pins with the spi 
		functionality which is needed elsewhere. fortunately, timer 1 can be 
		co-opted for motor control. the analogwrite function will produce a pwm 
		signal but at too low a frequency. the switec needs something around 
		30khz . fortunately nothing else is attempting to use timer 1 so a 
		direct write to the timer 1 control register will work to select a 
		suitably high clock frequency. a data sheet  from a switec 
		competitor provided the final bit of info needed to develop a 
		micro-stepping sequence.
micro-stepping results in significantly smoother and quieter needle 
		movement. it's a big enough improvement that i'll likely release a 
		second edition of the single pointer instrument e-book. this will also 
		be an opportunity to include a third sketch showing how to use can with 
		a sim instrument.
can bus (26 may 2024)
can is a lightweight networking protocol that is optimized for 
		broadcasting small data packets among a small group of devices. 
		developed for the automotive industry several decades ago, its use has 
		expanded widely. can is increasingly seen as a standard peripheral 
		alongside usb, spi, wi-fi, etc. can is easy enough to add by using a 
		cheap daughter board, and recent offerings from arduino, adafruit, and 
		others have can built in.
can works well in diy flight sim applications. it basically does the 
		same things in a simpit that it been doing in cars: carrying engine data 
		from the ecu to the dashboard instruments and relaying manually operated 
		switch events to the appropriate chunk of electronics in the car. we 
		just need to change a few names. "dashboard" becomes "main instrument 
		panel", and "chunk of electronics" becomes "sim computer". really, 
		that's all there is to it. mostly.
there are a few minor details to stumble through. the car ecu speaks 
		can natively. the sim computer has a preference for usb. and once you're 
		in the usb realm, there's still that leap from the os to the commands 
		and data within the simulation itself. details. minor... mostly.
and actually, it is fairly easy to bridge the gap between can and 
		usb. the data packets are small, and there is no addressing or routing. 
		a gateway consisting of an arduino nano and an mcp2515 can bus 
		daughterboard can handle it.


software angst is largely eliminated by using air manager to gain 
		access to flight simulation data values and to push commands into the 
		simulation. even better, it's got a utility called message port that 
		supports communication with arduinos plugged into the simulation 
		computer. air manager and message port allow you pretty much ignore the 
		computer os. the arduino sketch simply shuttles data between the can 
		library code and the message port library code with a bit of buffering 
		to handle timing differences. sourcing data from the simulation and 
		sending it commands are controlled by a lua script run within air 
		manager in the simulation computer.
to test this, i built up a basic instrument panel of six instruments, 
		eight toggle switches, and three leds (outer, middle, and inner marker 
		beacon lights). the lua script ties these to a steam gauge cessna 172 in 
		x-plane 12. seems to work.


 
digital inputs using can bus (6 april 2023)
a friend has a sim project with a few hundred digital inputs, mostly 
		manually operated switches. this is a great application for can bus. can 
		was developed by the automotive industry to simplify wiring of low speed 
		switches and sensors. since can is currently used in hundreds of 
		millions of cars and trucks, the tech is well tested and cheap.
i knocked together a simple card that scans 64 inputs using an 
		arduino nano. any changes to the input lines result in a message being 
		send out over the can bus. a gateway unit receives the message and 
		passes it over usb to the simulation computer. if there are no changes 
		to inputs there are no messages and no loading on the simulation 
		computer.
this is a simple design using widely available, low-cost parts. the 
		nano scans the inputs one at a time using eight, eight-to-one 
		multiplexers to expand on the nano's limited i/o pin count. 


cheaper digital to synchro converter (18 february 2023)
cheap dts works, and surprisingly, hasn't blown up anything yet 
		though i keep trying. i thought by now at least one of the amplifier 
		modules would have expired but not yet.
the code is slowly morphing into a cleaner more documented state as 
		testing progresses. the stand alone test sketch is no more. instead 
		there is a built in test mode to a sketch that accepts inputs through 
		usb and can bus. a siminnovations air manager connection is on the list, 
		somewhere downstream.
the unit can synchronize to an external 400hz power source. this 
		isn't needed for simple synchro receiver style gauges but is useful for 
		servo-ed instruments that take synchro inputs and require more power 
		than this dts version can supply. synchronizing is done with a software 
		phase lock loop. 
next on the list: more testing, air manager code, and writing, lots 
		of writing. i'd like to get this into an ebook and move on to another 
		project.
cheaper digital to synchro converter (23 december 2022)
asking an 8-bit, 16-mhz arduino to produce three 400-hz sine waves 
		with 48 samples per cycle is possible as long as you don't expect much 
		else. since there are other tasks to be done, a different approach has 
		been taken: two samples per cycle followed by a lot of filtering. the 
		hardware cost is slightly cheaper. there's one less chip, fewer 
		resistors, but a few more caps, a difference of a few pennies. software 
		is not too different. it mostly just runs less frequently using less 
		data, leaving a lot more processor time available for other tasks. 
		essentially, it's generating two square waves with variable amplitudes 
		and one with a fixed amplitude. all three are filtered by four-pole low 
		pass filters to produce clean sine waves. 
the output voltage from the amplifier modules is limited to about 40% 
		of the nominal synchro rating. a higher voltage would produce more 
		torque, but the test synchro operates well.


the next steps are testing operation with lower frequencies to boost 
		synchro torque, testing with larger synchros, and getting the can bus 
		connection working.
cheaper digital to synchro converter (3 december 2022)
the project has an updated circuit board. it pulls everything onto a 
		single board and improves an input that samples a reference 400 hz 
		signal.


this is still in the proof of concept stage. it works in that it can 
		make a synchro operate, but to be useful, it has to also communicate 
		effectively while doing so. there may be some issues there.
the inner synchro loop in the sketch is interrupt driven by a timer. 
		the interrupt service routine loads three digital to analog converters 
		that produce the synchro signals. the isr timing is critical to 
		producing clean waveforms. aggregate isr execution takes up about 40% of 
		the arduino's time. the remaining 60% is enough to handle everything 
		else as long as the timer interrupts get priority,  and that's not 
		a given.
ideally, the device would be able to communicate through a choice of 
		channels: usb as a virtual serial port, can bus, and usb under the 
		control of a utility like sim innovations air manager. since these 
		services almost certainly make use of interrupts there's the very real 
		possibility that competing isrs will get in the way of the synchro 
		signal generating loop.
part of the appeal of this project is seeing just how far the 
		venerable arduino can be pushed. there are certainly better choices 
		available today. the imported nanos had a real cost advantage for a 
		number of years, but that's pretty much history now. still, i like the 
		nano, and i'll push it a bit more in upcoming tests, but if it can't 
		hack it there are esp32s and pi picos on my bench waiting their turns.
cheaper digital to synchro converter (17 november 2022) 
this project got started by asking what's the cheapest way to connect 
		a single, synchro based gauge to a sim. it's a question that's been 
		asked before, but parts cost increases and availability problems keep 
		changing the answer. plus, those little class d amplifier boards keep 
		calling out, begging to be used in a different, non-audio  
		application.
a synchro based engine gauge uses perhaps 2 or 3 watts of 400 hz 
		power. this is a simple gauge that's little more than a synchro receiver 
		with a pointer on the shaft. class d amplifier boards capable of 
		supplying 30 watts cost only a few dollars. using one of these boards to 
		produce power for the gauge seemed like a great way to avoid the cost of 
		a 400 hz power supply. better yet, the 400 hz signal driving the amp 
		could be generated by the synchro converter which would simplify the 
		design. there would be no need to worry about synchronizing the synchro 
		signal generation with an external 400 hz power source.
the basic idea is to use an arduino nano and three digital to analog 
		converters (dacs) to generate three 400 hz sine waveforms.  two 
		would be used to make sin and cos synchro components that could be 
		combined to form the synchro stator signals while the third would be 
		amplified to become a source of 400 hz power. inexpensive class d 
		amplifiers, like the one pictured below, would provide the needed power 
		levels. seems like a great concept, but of course, there are some 
		caveats.


a glaring issue is that the amplifiers are designed for low impedance 
		loads like 4 ohm speakers, so you get power delivered at higher than 
		needed currents and lower than desired voltages. the largest output 
		swing is around 40 volts, (and that's when the amplifier's overvoltage 
		safety feature is turned off). a synchro rotor typically needs 26 volts, 
		but that's an rms value, a type of average. the peak to peak swing is 73 volts.
there are several ways to approach this. you could just use step up 
		transformers. this unfortunately adds weight and expense.
or, you could operate the system at a lower frequency. the problem 
		with the lower voltage is that it pushes less current through the 
		synchro. the synchro's ability to rotate a pointer inside the gauge 
		depends on torque generated by that current. less current means less 
		torque which means a reduced capability swinging pointers. but, if you 
		lower the operating frequency, the synchro windings present lower 
		impedances to the voltage, so more current flows, and the torque is 
		restored, or at least, increased.
or, you could just ignore the problem. synchro gauges are designed to 
		operate reliably in aircraft with hundreds of feet of wiring. the actual 
		voltage that gets to the gauge can be well below the nominal rated 
		voltage, and the gauge keeps on working. using the gauge in a sim with 
		much shorter connecting wires means there won't be voltage loss from 
		long wires.
and then there's another caveat. class d amplifiers typically have 
		differential (bridged) outputs. an "output" is actually two outputs 
		working together. the voltage on one goes higher while the other goes 
		the same amount lower. the load, normally a speaker, is connected from 
		one output to the other. when there is no output signal, both outputs 
		sit at a voltage close to half the power supply voltage. it's the 
		voltage difference between these outputs that delivers the output power.
this would seem to be a show stopper. after all, who wants to put dc 
		on their synchro gauge? turns out, that's not a problem, because the 
		synchro isn't connected to electrical ground. the synchro only cares 
		about voltage differences across its windings. if there are identical dc 
		components on both ends of its windings, it simply doesn't matter. dc 
		current only flows when there is a difference in voltage.
the differential outputs actually work to the benefit of the design. 
		synchro stator voltages must be generated with a 120 degree amplitude 
		variation between lead pairs. if an amplifier is driven by vsin, one 
		output will be (0.5) avsin while the other will be -(0.5)avsin. "a" is 
		the gain of the amplifier. if a second amplifier is driven by 
		(1.732)vcos, it's outputs will be (0.866)avcos and -(0.866)avcos. the 
		benefit shows up when you measure the voltage from one output on the 
		first amplifier and another output on the second amplifier. you get a 
		vector addition (or difference) that produces the 120 degrees that the 
		synchro needs.
when i designed the prototype, the availability of 8 bit dacs seemed 
		problematic, so i made my own from 74hc595 shift registers (~$0.35 each) 
		and a resistor network (~$0.015 each). there's a buffer and filter on 
		each of three channels based on tl084 opamps (~$0.80 each). add a few 
		more dollars for the nano, random parts, and the board.


bottom line: it works. it supplies 10 volts rms to the synchro rotor 
		instead of the rated 26. the stator voltage are scaled down 
		proportionally to keep the system in balance. torque is low but 
		adequate. changing the operating frequency to 200 hz noticeably boosts 
		torque.
digital to synchro converter (7 january 2022)
the new boards arrived two days ago, and one has been built up and 
		successfully tested. the only problem appears to be typos on the silk 
		screen layer. the heatsink warms to about 25 degrees f above ambient, so 
		just warm to the touch. the next step is proper documentation.


digital to synchro converter (27 december 2021)
the dts prototype is functioning reasonably well though i have 
		identified and corrected two issues, one thermal and the other 
		electrical.
the first issue is that the lm1875 output amplifiers simply generate 
		too much heat for the heat sinks i had hoped to use. the heat sinks are 
		adequate as long as there is air blowing over them, but i've had second 
		thoughts and want to at least reduce the need for moving air. at first i 
		tried a diy approach, making a larger heat sink from aluminum sheet and 
		two bits of c-channel. that worked better, but a quick look online 
		convinced me that buying a commercial heat sink (through amazon, 
		surprisingly) was cheaper and more convenient. this requires moving 
		things around on the board, but as the board has an issue with the 
		transformer placement which already requires revision, that's not a 
		problem. 


i stumbled upon the second issue while exploring options to reduce 
		the voltage from the 400 hz inverter. the suggestion from the 
		manufacturer, load the inverter with an output resistor to establish a 
		minimum load, was rather inconvenient. i needed 150 ohms or less to get 
		the voltage down to 26, and that dissipates a fair amount of heat. i 
		don't have very many high power resistors so i was only getting a few 
		dozen seconds of testing using what i had on hand before needing to let 
		things cool. (hmm, overheating again...) so i set up a transformer as a 
		tapped auto-transformer. this got me 24.5 volts along with bursts of 300 
		khz parasitic oscillations.
the dts uses a sample of 400 hz power to generate the synchro stator 
		voltages. apparently adding the auto-transformer changed the impedance 
		looking into the inverter output enough to allow a feedback loop from 
		the dts outputs through the synchro via the rotor connection to the 
		inverter then though a step down transformer used to sample the inverter 
		voltage and back into the dts. disconnecting the rotor from the inverter 
		stopped the oscillations. fortunately, so did a simple rc filter at the 
		400hz sample input on the dts.
it only took a couple hours to revise the board design. it's back in 
		the hands of the people at jlcpcb. in a week or so i should be able to 
		build up the "final(??)" prototype.
digital to synchro converter (12 december 2021)
the new dts boards showed up from jlcpcb. very pretty! sadly 
		(embarrassingly) i was reminded that beauty is only skin deep. i made a 
		mistake in developing the pcb footprint for the isolation transformers, 
		and they will not fit on the board together. and once i got the board 
		assembled (as far as possible) i discovered a cooling problem with the 
		output amplifiers. this caused me to reflect a bit on how synchros work.
it's important to remember that synchros are rotary transformers. if 
		you put a voltage on one winding, you'll see voltages on the other 
		windings. a synchro can be confusing because turning the rotor changes 
		the transformer coupling between the rotor and stator windings. further, 
		the stator consists of three, interconnected windings. so, if you have a 
		synchro with a 26 volt rotor and an 11.8 volt stator (a common 
		standard), where is the 11.8 volts? well, it's buried in the math. 
		there's no way around it, you have to do a little math to figure out 
		what voltages to place on the three stator connections to make the 
		synchro operate properly. that said, if you do it right, there will be 
		one rotational position of the rotor that will produce the specified 
		rotor voltage on the rotor connections. if you were to connect the rotor 
		in this position to a power source supplying this specified voltage, no 
		current would flow thorough this connection because there would be no 
		voltage difference. however, if the rotor is not in this position there 
		would be a voltage difference and current flow which generates a 
		magnetic force on the rotor that pushes it toward the zero current 
		position.
but this zero current position only exists if the proper voltages are 
		applied to the stator. if the stator voltages are too high, the rotor 
		still rotates to the proper position, but the voltage from the rotor is 
		too high and the synchro begins pushing power back into the power 
		supply. if the stator voltages are too low, the power supply pushes 
		power into the synchro and whatever electronics is connected to the 
		stator. in either case, things start to get hot.
let's take a look at a demonstration of this theory in action, for 
		example, on my workbench.
i have a 24 volt, 400hz static inverter that powers the synchro rotor 
		and provides the 400 hz voltage sample that the digital to synchro 
		converter operates on. as it turns out, the 24 volt inverter actually 
		puts out 28~29 volts. additionally, my dc bench power supplies used to 
		power the dts were under performing, and the dts output amps were being 
		over driven. i added a voltage divider to reduce the 400hz sample so i 
		could verify dts operation. i created a situation that put too much 
		voltage on the rotor and far too little voltage on the stator. the rotor 
		turned (good), the synchro got warm (bad), and the dts output amplifiers 
		got excessively hot (very bad).
my first response was to be disappointed that the heat sinks weren't 
		up to the task. i spent some time doubling up the heat sinks. that 
		helped, but also got me wondering (productively) why things were heating 
		up. once the rotor has properly positioned itself, there shouldn't be 
		any power transfer in either direction. the amplifiers shouldn't have 
		anything to do and shouldn't get hot. eventually it occurred to me that 
		i had created the problem myself.
i've corrected the voltage mismatch as well as i can with the power 
		supplies i currently have. this has substantially reduced the 
		overheating, and the synchro appears to function as expected. (there's 
		an arduino just out of the picture sending data to the dts that makes 
		the rotor spin slowly.) i have another power supply on order that will 
		allow me to continue, and hopefully complete, the testing. i've already 
		corrected the pcb transformer placement problem, but i'll wait on 
		ordering more boards until i've completed this phase of testing.


digital to synchro converter (27 november 2021)
i have the revised board design ready to send out for manufacturing. 
		the rendering below gives an idea of what the assembled devise will look 
		like minus the isolation transformers and heat sinks. this version 
		reflects both design and packaging changes. 
a major change in the design is to leave the discrete output 
		amplifiers behind, replacing them with lm1875 audio power amps. i had 
		thought these chips had been discontinued, but a visit to the ti website 
		shows otherwise. i'm a little concerned about the price (they go for 
		about $5, single quantity), but there are other options. the tda2050 
		offers similar performance, and while no longer made by the original 
		supplier, there is a chinese clone available for under a dollar. i 
		haven't tested this option yet, but i've got a few 2050s on order.
packaging changed in a big way. there is no longer an arduino or 
		canbus module on the board. it looks like it makes more sense to have a 
		single arduino controlling multiple dts boards through what are 
		essentially spi connections. removing the arduino and canbus module 
		frees up a lot of board space, enough in fact to put a pair of isolation 
		transformers on a board that is still small enough to fall within 
		jlcpcb's "5 boards for $4" special pricing.


digital to synchro converter (19 november 2021)
aircraft instruments like an hsi don't pull much current from the 
		synchro s1, s2, & s3 connections. these instruments rely on internal 
		servo amps and motors to move the instrument mechanisms. however, simple 
		gauges like a remote reporting oil pressure gauge don't have amps or 
		motors. they depend directly on power from the synchro signals to 
		operate a synchro receiver, and this can sometimes demand a surprisingly 
		large amount of current. a digital to synchro converter must be able to 
		meet the worst case demand.
one of the improvements i had hoped to make in this version of the 
		dts is a cost reduction in the amplifier that drives the synchro. i 
		replaced a large power amplifier chip with a much cheaper opamp and a 
		number of buffer transistors. this "works", but those little buffer 
		transistors get pretty toasty at times. i'm not happy with this so it's 
		time for plan b: bring back the large power amplifier chip. <dramatic 
		sigh>
in addition to verifying the basic functionality of the dts, the set 
		up below is a first test of a low cost commercial 400hz inverter with 
		the dts. it's certainly possible to build a 400hz power source, but at 
		$125 for 40 watts, it's hard to justify the effort. that's the black box 
		in front of the scope. it's from power stream technologies, and it's 
		been happily supplying 400hz electrons for my debugging efforts.
i've also been verifying the use of low cost 50/60hz transformers for 
		electrical ground isolation of the s1, s2, & s3 connections.  
		though there are technical reasons for isolation, an instrument will 
		generally operate just fine if one of the connections has a direct 
		ground connection, and it's cheaper to do so which is often an important 
		factor in home sim building. but transformers also provide a degree of 
		protection for the instrument. transformers do not provide a direct 
		current path, so if the dts suffers a catastrophic failure, you're far 
		less likely to loose a perhaps irreplaceable vintage a/c instrument. the 
		issue has been finding suitable transformers at affordable cost. what 
		i'm working with here are pcb mounted transformers with two identical 
		output windings. they are intended to either be wired in series for 
		higher output voltage or in parallel for higher current. i'm using them 
		separately as input and output windings of a 1:1 isolation transformer. 
		they work great and only cost $4~5 a piece.
the next steps start with updated pcbs.


digital to synchro converter (5 november 2021)
the first prototype has been asssembled. the next step is developing 
		test code.


digital to synchro converter (24 october 2021)
the topic of synchros pops up now and then as people investigate the 
		possibility of using real aircraft instruments in simulators. some 
		instruments utilize simple control voltages and are relatively easy to 
		press into sim service. some instruments contain mechanical gyros and 
		are next to useless in stationary service unless you can alter the laws 
		of physics. somewhere in the middle are remote reporting instruments 
		that incorporate synchros. these instruments can often be used in a 
		simulator. however, doing so can be a bit a of a challenge.
synchros are electromechanical devices that are frequently mistaken 
		for small three phase motors. they have three wires referred to as 
		stator phases and two wires that connect to the rotor. worse yet, in 
		many applications an instrument pointer is stuck on the end of the rotor 
		shaft which turns to move the pointer. sure sounds like a motor, doesn't 
		it? the fact is, a synchro is a rotary transformer, not a motor. it is a 
		device for encoding a mechanical angular position into a three wire 
		electrical signal referenced to a two wire power signal. used in 
		reverse, a synchro can decode this electrical signal to follow the 
		angular position of the transmitting synchro. 
without an understanding of what a synchro is, using synchro based 
		instruments can be rather frustrating. once you understand, it's pretty 
		straightforward. you don't even need a transmitting synchro. you just 
		need the three wire, synchro signal, and there are digital to synchro 
		converters that provide just that. unfortunately, they are outrageously 
		expensive. it's the alluring neatness of using real a/c instruments 
		coupled with the expense of commercial synchro converters that leads us 
		to yet another diy digital to synchro converter.
this revisits a project i did about ten years ago and published in 
		brfs. the core functionality remains the same. a sample of the 400hz 
		power supplied to the aircraft instrument is passed through two parallel 
		channels that scale the samples by factors ranging between -1 and +1. 
		the scaled signals are amplified suitably then can be connected to the 
		instrument. connected directly, the ground connection acts as the third 
		synchro phase. if the specific instrument does not permit such a ground 
		connection, a pair of transformers can be used to isolate the ground.
there are a few differences (improvements, i hope) from the original 
		design. the microchip microcontroller programmed in assembly has been 
		replaced by an arduino nano and c/c++. the interface is now usb and/or 
		can bus. the original 13 bit resolution has been dropped to 12 bits to 
		avoid a potential problem and reduce complexity. the output amplifiers 
		have been redesigned to avoid using now obsolete components.
i was going to build a prototype on proto board, but jlcpcb is just 
		too, too cheap. besides, i ultimately want a pcb version of this, and i 
		figured i may as well start the board development process now (3d 
		preview below). the board is being made as i type this.


radio head project (27 august 2021)
radios, both nav and comm, are an integral part of the flight sim 
		experience. using a mouse to adjust them doesn't help immersion. you can 
		fix that. just buy a radio stack for your sim. alternatively, you could 
		build it. if you're the type who likes building, the fact that you can 
		save some money probably isn't your main decision factor, but just for 
		the record, you can save serious money by taking the diy approach. in 
		either case, adding radios nudges immersion up another notch.
what got me started was the availability of cheap 6-digit led modules 
		with serial interfaces. they were almost perfect for displaying the 
		frequency. their major shortcoming was being not quite as small as i'd 
		like. a common size of the face of general aviation radios is 1.75" high 
		by 6.03" wide. if i used two of these led modules, one for active and 
		one for standby, i'd have a 2" high radio face. since i'm not trying to 
		make an exact narco or king replica, i decided i wouldn't worry about 
		it. two inches would be just fine. 


as it turns out, there is an0ther advantage of 2": cheap 5cm by 7 cm 
		prototyping boards. this is a convenient size for holding an arduino 
		nano, a voltage regulator, and a few rotary encoders. the 5cm width is a 
		good match to the 2" radio height. i could certainly have cut a larger 
		piece down to size, but it's nice when you can use off the shelf bits 
		and pieces without the need to trim them.
and speaking of off the shelf bits, there's more than enough room for 
		an mcp-2515 can bus module. my aim is to include can bus connectivity on 
		all new projects. can bus was developed for just these sorts of 
		applications. while the arduino usb can support connectivity, either as 
		a windows virtual serial port, or as a custom i/o device care of sim 
		innovations air manager, i expect can bus to be easier overall as the 
		simulator grows.
at this point the electronics exists only as a fuzzy block diagram in 
		my head. the project's mechanical aspects, however, are well along. all 
		that's missing are the frequency swap button and the knob for the volume 
		control.


attitude indicator project update (13 august 2021)
the electronics has been pulled together. it will probably work, but 
		i can't say for sure until i generate some test code. there shouldn't be 
		any huge surprises, because this is pretty straightforward stuff. (there 
		will undoubtedly be some smaller surprises though.)
the availability of off the shelf modules allows simple block diagram 
		design to handle potentially complex performance. the heart of it all is 
		the ubiquitous arduino nano. there's a pair of micro-stepping motor 
		drivers, one for pitch and one for roll. the module underneath the perf 
		board is for an optional can bus connection. there are a few discrete 
		components, and that's it.


attitude indicator project update (27 july 2021)
the design seems to be converging nicely. i've printed and assembled 
		the mechanical portions, and the electronics is designed and awaiting 
		solder. that shouldn't take too long as there isn't much soldering 
		required. i'll make use of pre-made modules like stepper motor drivers, 
		a can bus transceiver, and an arduino so wiring is mostly power and 
		module interconnects.
actually, wiring might be an issue. more specifically, the wiring for 
		the pitch motor and sensor. since the whole pitch assembly rotates to 
		indicate aircraft roll, the pitch wiring must tolerate a bit of flexing. 
		in theory this will be handled by loosely wrapping the wires around the 
		roll motor shaft. small gauge stranded wire should be fine. if not, i've 
		got some super flexible, silicone insulated wire that should.
this build has also uncovered a few more small issues, which is why 
		we build prototypes.
 the pitch mechanism is slightly too far from the wings and 
		could be moved forward. this will require a small change in the pitch 
		horizon to create a bit more clearance from the faceplate mounting 
		screws.
the cage that surrounds the pitch mechanism is made of four pieces 
		which are printed separately. this avoids huge amounts of support 
		material and provides an opportunity to correct for less than perfect 
		tramming of the 3d printer. it's not super difficult to glue the pieces 
		together, but i think adding a few alignment tabs might be a good idea.
some of the mounting hardware is difficult to hold in place during 
		assembly. i'd normally include a hexagonal recess to hold the nut, but 
		that's probably not workable in this case. another potential solution is 
		using epoxy to hold the nuts in place before final assembly.


attitude indicator version 3 (12 july 2021)
i'm now on the third major revision of the project. the roll motor 
		has been moved making the pitch mechanism shorter and much lighter. the 
		pitch mechanism has been stiffened a bit to reduce lateral motion. the 
		case has also been stiffened by adding top and bottom supports. finally, 
		there is a more nearly complete 3d model. it's missing some circuit 
		model supports that i won't be able to add until the electronic module 
		arrangement is finalized.


attitude indicator prototype evolution (20 june 2021)
the hybrid stepper motors used in this project might seem a bit 
		overpowered. they are. they also have a robust frame, and their bearings 
		will support significant side loading. this allows for a simpler design. 
		an earlier version had a shaft and support bearing for the roll motion 
		of the horizon. this version eliminates the shaft and bearing along with 
		a shaft to motor coupling by supporting the horizon mechanism directly 
		on the roll motor shaft. the allows the electronics to be mounted on the 
		instrument back. the design is a bit less complex, the instrument is 
		smaller and lighter, and the stress on the pla body is reduced making 
		warping or drooping less likely.


overall, it's better, but i think there's further room for 
		improvement. in this version the roll motor is part of the horizon 
		mechanism so the motor is supporting its own weight along with the rest 
		of the horizon mechanism. that's not likely an issue for the motor 
		itself, but it does increase the bending force where the motor shaft 
		fastens to the back of the instrument body. this may not actually be a 
		problem, but mounting the motor on the rear of the instrument body would 
		reduce the bending force which seems the more conservative approach. 
naturally there are tradeoffs. moving the motor will increase the 
		leverage its weight exerts against the top mounting screws and 
		instrument case structure. mounting the electronics becomes a bit more 
		demanding. on the positive side, moving the motor will result in four 
		fewer wires to worry about flexing when the horizon mechanism rotates.
attitude indicator body prototype (10 june 2021)
each time i start a project i tell myself "this time i'll finish the 
		design before i start building". 
didn't finish this time either. somehow, it's just more fun if i have 
		stuff cluttering my desk. adding to the clutter is an early prototype of 
		the structure that's intended to hold the attitude indicator pitch 
		mechanism and the electronics.


in theory the 3d model in fusion 360 should be enough, but handling 
		the physical prototype seems to generate more ideas for improvement. 
		maybe it's feeling where the  weight balances that leads to 
		thinking about stress in the plastic which leads to considering other 
		approaches. in any case, there's a good chance i'll be taking this 
		design in another direction.
new project: g/a attitude indicator (25 may 2021)
i've begun a new project, a steam gauge, general aviation attitude 
		indicator. if all goes well there'll be an ebook about about. so far 
		i've got a lot of ideas and a working prototype of the pitch mechanism. 


there's a 35mm pancake stepping motor on the far side of the central 
		plate that drives an arm that moves the 1/4" tube poking out of the slot 
		in the horizon support. the motor is driven by a microstepping driver 
		module. with a 400 step per rev motor and a 1 to 16 microstep, movement 
		of the horizon flag is quite smooth. i'm pretty happy with that. there's 
		some play in the mechanics which occasionally makes noise. with that, 
		i'm a bit less happy.
i'm reasonably certain i can get the whole thing working and talking 
		with x-plane (thought air manager). something i need to investigate is 
		the long term stability of the mechanical structure given that pla isn't 
		the strongest of plastics. there's the load on the roll bearing which 
		will support the pitch mechanism, and there's the cantilevered load of 
		the whole instrument hanging off the mounting screws in the instrument 
		panel. 
building a heading indicator done! (14 may 2021)
it's finally done and available as an ebook from amazon. clicking on 
		the cover image will take you to the amazon product page.


this is a detailed guide to making a directional gyro style heading 
		indicator using an arduino nano, a stepper motor, and a 3d printer. i 
		chose a nema 14 motor because compass disks present a higher dynamic 
		load than a simple pointer, and i didn't think a little switec motor 
		with its tiny plastic gears could be expected to last. nema 14 motors 
		are readily available and easy to drive using the same inexpensive 
		micro-stepping driver found in desktop 3d printers.
soldering has been minimized by making use of modules. there's the 
		arduino, of course, and a tmc2208 motor driver. optionally, there is 
		small can bus module. these things plug into a carrier/interconnection 
		board made using a 6 cm by 8 cm protoboard. there are wires to the motor 
		and such, but no smd parts.
to simplify interfacing, the guide includes an arduino sketch that 
		uses a sim innovations air manager library. it lets the heading 
		indicator communicate directly with air manager. all you have to do is 
		write a few lines of lua script. air manager has modules that do the 
		heavy lifting interfacing with fsx, fs2020, x-plane, and p3d. you don't 
		have to use air manager, which is payware. there's a separate, non-air 
		manager sketch. if you're happy writing the code, you can make use of a 
		serial com port utilizing the arduino's usb connection.
i threw in an optional can bus module, because home cockpits seem to 
		turn into a mass of wires, cables and hubs. can bus was developed to 
		control wiring complexity in vehicles and is in every car made today.  
		it might seem a bit esoteric, but it's cheap, it works, and it's been 
		around for years, decades actually. it hasn't received the exposure in 
		the flight sim community it deserves even though it was designed 
		precisely for this sort of application. 
building a heading indicator - status update (7 april 2021)
this ebook was supposed to be a 2 month, 50 page project. it's become 
		a 5 month project pushing 100 pages. why? well, reasons.
interfacing a simulated instrument is a big deal. and it gets bigger 
		with each instrument you add. literally. each adds more wiring for data 
		and for power. there are the inevitable hubs, whatever additional power 
		wiring is needed, and perhaps issues enumerating connections. the 
		automotive industry faced, and solved, a very similar problem a few 
		decades ago with the can bus. controller area network technology made 
		inter-connection of a growing assortment of electronics in vehicles far 
		more manageable, as well as less expensive.
 can shows similar benefits in growing home flight sims. can bus 
		modules are cheap and readily available. the book took a jump in size 
		and time invested when i decided to include the option for can bus in 
		the project.
another point about interfacing is that an instrument isn't all that 
		useful if it's not logically connected to the simulation software you're 
		running. there are several flight sim programs you can choose among, and 
		each has its interfacing challenges. since this series of ebooks was 
		intended to be focused on a specific project, interfacing seemed too 
		broad a topic to cover and therefore outside the scope of the book. 
then i spent a little more time looking at sim innovations air 
		manager, and interfacing became a smaller, more manageable topic and was 
		suddenly within scope. (at least, if you choose to use air manager.) so, 
		the manuscript grew some more.
then there's the material i took out. i had intended to have internal 
		lighting on the project. what i had was mediocre. i have a lot of ideas 
		for improving it, but being 5 months into a 2 month project, i decided 
		to take it out. of course, that took time, though hopefully less than 
		would have been required to improve the lighting feature.
at that point i thought the manuscript was done. a subsequent read 
		through turned up a hole where some test code should be and some 
		assembly instructions that seem a bit anemic. 
that's where things stand now: "done" except for a bit of polishing.


a $10 vertical card compass (10 march 2021)
it might seem that i am haring off onto another path largely on 
		evidence that i have hopped down another rabbit hole. admittedly, that 
		is the case. fortunately, it's not a terribly deep rabbit hole.
it all started innocently enough. i was working on the revisions on 
		bspi (see below) which makes use of a switec stepper motor, and i 
		wondered how much weight you could hang on its shaft. this is a bit more 
		involved than it might appear because it's not just the total mass that 
		has to be considered. you have to think about rotational inertia as 
		well. the actual dead weight mass is probably not an issue for 
		reasonable applications, pointers and so on. switecs are used for 
		automotive speedometers which can have pretty big pointers. these seem 
		to be supported well enough by the switec's steel shaft and the plastic 
		bushings that are part of the switec body. 
the real issue comes up when you want to start swinging that mass 
		around. now you've got to look at the inertial load on the motor. rotate 
		the pointer, and it resists. that's inertia. this pushback isn't seen by 
		the plastic case bushings so much. but it's certainly seen by the teeth 
		on the plastic gears, and they are really, really small.
bottom line, put too much mass on a switec, and the gear teeth have a 
		short miserable life.
still, while speedometer pointers are demonstrably not too heavy 
		(they're in cars, right?), the long shape presents a significant 
		inertial load. so, would it be workable to have more mass but shaped to 
		present a smaller inertial load? maybe a disk rather than a long 
		pointer?
i'm uncomfortable with a large disk that you'd find in a directional 
		gyro, but maybe something smaller like a vertical card compass would be 
		okay. 
maybe what i should do, i thought, is try it. just 3d print a 2 inch 
		disk and stick it on a switec. four wires to an arduino nano, a bit of 
		code adapted from another project, and it could just sit there spinning 
		until it didn't. then i'd know.
of course, i couldn't stop there. too easy.
i printed a support for the switec and the nano. the support became a 
		box. i opened up the switec, just to look around, and since i was there, 
		i removed the output shaft end stop. that lead to adding an opto 
		interrupter to the supporting box. the disk acquired a little tab that 
		lines up with the interrupter, as well as some compass artwork. 
i wanted to keep it cheap, but that didn't happen. not if you add the 
		time i invested. dollar wise though, the cost is pretty low. i'd bought 
		a bag of switecs at $2.50 each. same thing with some import nanos: $2.70 
		each. the opto interrupter cost me $2.03. throwing in screws, nuts, a 
		couple resistors, pla at $.025 per gram, and a chunk of clear acrylic 
		for the lens brought the money outlay to $9.66 plus or minus. call it 
		$10. 


book update (1 march 2021)
i've revised building single pointer 
		instruments to correct a few issues and to add new material. the 
		revised ebook is live on amazon and is available at no cost to people 
		who bought the original release by logging on to their amazon account 
		and visiting the "manage your content and devices" page. find the title 
		in the list and you should find a link for the revised ebook.
if you haven't already bought a copy, may i recommend that now's a 
		great time? not only do you get a well illustrated guide to making 
		single pointer instruments using a 3d printer, you get expanded content 
		which now demonstrates how to connect those instruments to air manager. 
		once you're connected to air manager pulling data from x-plane, fsx, 
		fs2020, fs2, and p3d is just a few lines of lua script away.


ebook 2 progress & air manager (22 february 2021)
i spent some time learning about air manager, and i've decided to add 
		a bit more to the book. when you think of air manager you mostly think 
		of virtual instrument panels. but air manager also supports interfacing 
		physical things like leds and switches by using arduinos as intermediary 
		i/o blocks. when you use this capability you mostly use pre-programmed 
		functions, but there's a generic messaging system to take care of things 
		that the pre-programmed functions miss. it's called message port and it 
		lets you do magic: it lets you easily interface diy instruments to fsx, 
		fs2020, x-plane, fs2, and p3d. and that's something i want to put in the 
		book.
and that's what i'm doing. in fact, i'm also adding to the earlier 
		book on single pointer instruments and will be uploading a revision. so, 
		as far as progress status goes, i'm back to more testing and more 
		editing. 
ebook 2 progress (11 february 2021)
it's down to the editing and clean up (mostly) . and i'm still doing 
		a little testing. everything seems to work, but i keep coming up with 
		"improvements" and changing things.  so, more testing. for example:


the uno on the right is talking through the can bus module in the 
		middle with the dg on the left. more specifically, the uno implements a 
		loop back mode to test, well, a lot. turn the knob on the dg and the 
		debounce code does its thing and passes the results to the communication 
		code. the comm code builds a data packet and fires it off to the dg's 
		can bus module (which you can't see). that modules does the can bus 
		thing and sends the packet to the can bus module you can see. the uno 
		pulls the received packet from the module and decodes it which is pretty 
		easy since there are only two messages: the knob clicked left, and the 
		knob clicked right. based on which one it got, the uno replies with 
		either rotate left a bit or rotate right a bit, and we get a test of 
		moving data the other direction plus, once the data has been received,  
		the motion control code get exercised. 
i really like the can bus. i think it's a natural for diy flight sim. 
		it reduces wiring complexity and it's cheap. it's easy to set up. you 
		don't have to assign addresses to devices on the can bus. each data 
		packet has an id that typically identifies the data type or contents. 
		data is provided by whatever has it and used by anything that needs it.
for example altitude probably comes from a gateway device like an 
		arduino connected through usb to the simulation computer. when it gets 
		new data to throws it onto the can bus with the altitude id. the 
		altimeter on the mip is listening for the id. when it sees it, it grabs 
		the packet and moves the instrument needle. if you put a second 
		altimeter in place, you just plug it onto the bus and it reads the same 
		packet. easy.
it works for things like switches too. you might for example take an 
		arduino nano and use its inputs to monitor a cluster of switches on the 
		panel. if something changes it puts a packet on the bus. you don't have 
		to wait to be polled to provide switch data. you send it when it 
		happens. you could even code it so it sends switch data every few 
		seconds even if there are no changes. this could take care of the start 
		up synchronization issue and provide some behind the scenes diagnostics. 
		if something isn't heard from every several seconds you know something's 
		wrong.
lots of reasons to like can bus.
ebook 2 progress (27 january 2021)
i'm in the last 10% that takes 90% of the time. at least, that's what 
		it feels like. i keep finding things i want to change, and this leads to 
		more 3d printing to check the results. i've accumulated a fair pile of 
		bits and pieces along with a small pile of prototypes. 
i've spent the last few days making flowchart drawings and explaining 
		the arduino sketch. that should be done in a day or so. then there's the 
		artwork for the lens, some how-to-put-it-together images, and some 
		can bus testing.


i still expect to have a decent draft by the end of the month, though 
		i'll likely make more changes after that.
upcoming ebook progress (12 january 2021)
the manuscript is about 75% there. the 3d printing instructions are 
		very nearly complete. the circuitry construction was there... until i 
		decided on a substantial layout revision. now all the illustrations are 
		in the to-be-redone pile. i'm getting a lot of inkscape practice.


firmware still needs some attention, and i'm working out the best way 
		to present the final mechanical assembly. all in all, though, it's 
		starting to look like a book. end of the month should see a solid first 
		draft.
dg/hi project for upcoming ebook (29 december 2020)
the directional gyroscope / heading indicator project is firming up 
		nicely. there are eight 3d printed items, nine if you want to print the 
		knob rather than buying it. 3d printing is easy,  assembly uses 
		standard screws and nuts plus a tiny blob of epoxy. a nema 14 stepping 
		motor  supports and rotates the compass disk. the electronics fits 
		on a 6 cm by 8 cm protoboard which acts as a carrier for an arduino 
		nano, a tmc2208 motor driver, and a can bus module. 


the unit will be controllable through the arduino usb connection or 
		across a can bus though i have to admit that i haven't written that part 
		of the code yet. (what could possibly go wrong???)
completing the code is just one of the remaining steps. i'm also 
		working on the instrument lighting. the white light diffuser surrouding 
		the compass disk can be lit by a ring of eight leds just behind it. i'm 
		experimenting with ways to make the illumination more even. and then 
		there's the part where i actually write the directions on how to make 
		this thing. 
thank you, and more's coming (12 december 2020)
thank you to those of you who bought 
		building single pointer instruments. i do appreciate it.
bspi is the first in a series of flight sim related guides. the 
		second, a guide for a dg/hi project, is coming along nicely. i have a 
		partial manuscript and a moderate amount of hardware. i pulled together 
		prototype 3d printed components in november of 2019 then set it aside to 
		finish bspi and address other pursuits. it's back on the top of the 
		priority list and the prototype electronics is the most recent chunk of 
		hardware to materialize.


the electronics consists of an arduino nano, a tmc2208 motor driver, 
		a 7805 voltage regulator, an mcp2515 can bus module and a few caps and 
		resistors. it all fits on a generic 6 cm by 8 cm prototyping board. 
		assembly was straightforward. all the tricky surface mounted stuff's 
		been taken care of by the people who put the modules together.
this is the first time i've tried using a motor driver module in a 
		sim instrument. i'm expecting great things, like really smooth rotation 
		and quiet operation. in any case, it seems like a really easy way to 
		drive a nema 14 stepper motor.
a motor this size might seem like an over kill, and i suppose it is 
		to an extent, but look what you get. the motor frame is robust, and the 
		shaft has a significant diameter. it's going to provide a very stable 
		support for the compass disk, and the shaft is large enough that there's 
		no worries about the disk slipping on the shaft. 
the can bus module's another first for me. yes, the arduino has usb 
		which talks just fine with the sim computer, and that's probably the way 
		to go for a small simpit. once you start adding up all those instruments 
		and switches and things in a moderately sized simpit, you can have a 
		real rat's nest of usb cables and hubs. can bus was developed to avoid 
		just this kind of thing in the automotive industry. since can bus 
		modules are so cheap, we can do the same with simpits.
a new guide for diy sim instruments (4 december 2020)
building single pointer instruments for 
		flight simulation is now live on amazon as a ebook.
this is an introduction to building basic, single pointer style 
		instruments and gauges like airspeed indicators, fuel gauges, and 
		tachometers. it's the same topic i covered almost two decades ago in 
		building simulated aircraft instruments, but it's been brought up to 
		date with 3d printing, arduinos, and switec meter movements. it also 
		capitalizes on free software like fusion 360, inkscape, and the arduino 
		ide. 
just to be clear, this is not by itself a replacement for the book 
		bsai. it is a far shorter guide that focuses on just one type of 
		instrument, the single pointer style. i do have tentative plans for 
		producing additional guides, each focusing on specific instruments or 
		types of instruments. (heading indicators, dual pointer gauges, 
		artificial horizons, etc.) taken together, these hypothetical guides 
		might be considered a bsai replacement. we'll see. 
click on the cover image below to be taken to the amazon product 
		page.

 
 
coloring instrument artwork (5 november 2020)
the markings on an instrument faceplate sometimes have color, and 
		when it does, it's often important, like red lines or safe operating 
		regions. so it makes sense that if you're making a simulated instrument, 
		it would be important to have color in the faceplate markings. this can 
		be problematic when you don't have access to a color printer. that's the 
		background that lead up to me trying to add color to a black and white 
		print.
my first attempts made use of cheap water based markers. results were 
		dismal at best. ignoring the fact that the colors available in the basic 
		assortments don't include an acceptable green, i found it impossible to 
		get anything even close to a uniform color density.
the best result came from an inexpensive set of alcohol based "art" 
		markers. these allow you to blend colors on the paper, or as it turns 
		out, blend a color with itself. it's not perfect (not for me, anyway), 
		but it's far better than what i started with.


there's still room for improvement, but it's at least serviceable. i 
		may yet buy a color printer, but until then, i'll use alcohol based 
		makers to add color to the arcs then use a white paint pen to add the 
		radial markings over the color.
dual engine gauge prototype (13 august 2020)
somehow a month+ has gone by, in part eaten by random house projects 
		too boring to mention. on the techie side of things i have a partially 
		constructed prototype of a dual engine gauge based on a pair of the 
		ubiquitous 28byj-48 stepping motors. a nominal 64:1 gear ratio gives 
		these little motors enough output torque to operate valves and air 
		handling louvers, as well as, a very small step size. unfortunately this 
		is done at the expense of rotational speed. so, while you would get very 
		smooth needle motion if you used this motor in a gauge, the needle 
		dynamics would be terrible for applications like rate of climb or even 
		airspeed. 
still, there are applications that fit this motor quite well. fuel 
		quantities, exhaust gas temperatures, oil pressure, etc. tend to change 
		more slowly.
this is a dual pointer gauge project which uses two 28byj-48 stepping 
		motors, a 3d printed structure, an arduino, a uln2803 motor driver chip, 
		and eventually a can bus module.


the 3d printed motor shaft extensions have a pie wedge shaped flag 
		which passed into the gap of a optical interrupter which tells the 
		arduino when the pointer has rotated too far in either direction. 
		currently the arduino sketch is just a rudimentary test making the 
		needle swing left and right. still, it does work.
i'm not sure i'll stick with the nano. the project doesn't need much 
		of what's on the board, particularly so if i use the can bus. i know 
		it's small and cheap, but space it tight. if i use a bare atmel 328pu, i 
		might be able to put everything on a single proto board and reduce the 
		amount of wiring.
flight sim gauges & can bus modules (8 july 2020)
i'm back working on 3d printed flight sim gauges along with a diy 
		guide to making the single pointer variety. i've got several working 
		prototypes and if i had a color printer they would look like this:


since i don't have said color printer (and because i'm not using blue 
		filament), they tend to look like this:


there's a 2.4" by 2.4" proto board on the back supporting a switec 
		meter movement and an arduino nano. so, for only several dollars, you 
		get a usb-interfaced basic gauge that could be an airspeed indicator, 
		rate of climb indicator, tachometer, etc.
i'm not totally convinced that i want a separate usb connection for 
		each instrument. i suppose with powered hubs i could connect quiet a 
		lot, but windows and enumeration of a heap of usb devices on the sim 
		when powering up the host computer makes me a bit nervous. that brings 
		me to can bus.
can bus is the bit serial communications network used in cars. it's 
		been around for about twenty years, works well, and thanks to the 
		wonders of volume manufacturing, it's cheap. for a bit more than two 
		dollars you can buy a can bus module that plays nicely with arduino.


i haven't worked with these yet. i just got a pair yesterday, but 
		they look very promising, especially when you consider how tangled 
		simpit wiring gets as the project grows. can bus lets lots of devices 
		share the same bus, and the bulk of the messaging protocol is handled by 
		the module. so, it looks like you could have only one or two usb devices 
		(which might be arduinos or teensies) acting as gateways onto the 
		simpit's can bus.
junk receiver lo & bfo (24 may 2020)
i cheated on the local oscillator and beat frequency oscillator. i 
		ccould have made them from discrete components, but not only was it 
		easier to base them on a clock chip, it's also far more convenient to 
		operate the radio using a clock chip. it's controlled by an arduino 
		which can also be used to operate an lcd display. you can see exactly 
		what frequency the radio's tuned to. very cool. besides, i'm just 
		totally impressed by the si5351 clock generator chip.
the si5351 series was designed as a clock generator for digital 
		circuitry, but the very same qualities that make it good for that also 
		mean it's good for many radio applications. it's main downside from my 
		perspective is that it's an smd part that, realisitically, requires a 
		circuit board. fortunately, it's available from multiple sources, such 
		as adafruit, on a tiny board that includes the reference crystal 
		oscillator and voltage regulator. and it's cheap: $8 for the assembled 
		board.
here's the lo-bfo module.


many thanks to charlie morris, zl2ctm. this is based largely on his 
		work which he very generously published on his site,
		http://zl2ctm.blogspot.com/ 
a junk 40 meter receiver (10 may 2020)
i changed tracks and decided to work on a basic receiver before 
		completing the ssb transmitter. i'm attempting to make it out of 
		materials i have on hand, so it's something of a "junk receiver". i got 
		it working last night even though it's not actually complete. i've yet 
		to build the local oscillator or the beat frequency oscillator. i'm 
		using a dual channel dds function generator instead.


it hasn't been designed so much as thrown together off the cuff. i 
		knew i had a 10.7mhz crystal filter with a relatively narrow (30khz) 
		bandwidth and decided i'd use it for the if. since i'm targeting the 40 
		meter band (7mhz) the radio would have to up convert to the if so i 
		could use a low pass filter on the input rather than a bandpass. this 
		let me try out something called an "ultra spherical" filter which is 
		potentially very  low loss. this sounded good from the perspective 
		of later using it on the transmitter output as well. that's the filter 
		at the top left hand corner of the circuit board. that feeds a 2n3904 
		gain stage which in turn feeds a double balanced mixer.
now, i have several very nice commercial mixers that would do a bang 
		up job in this application, but i also have a bag of hp hot carrier 
		signal diodes purchased at a swap meet somewhere in the forgotten past. 
		this radio seemed like a great project to test my toroid winding skills 
		and therein roll my own mixer. four diodes, two ferrite toroids, and a 
		couple feet of enameled wire later i had a double balanced mixer ten 
		times the size of the commercial mixer which likely performs one tenth 
		as well, but hey! it's fun.
the mixer feeds a second 2n3904 gain stage which pumps things up a 
		bit before handing the signal off to the crystal filter, the silver box 
		in the middle of the board. the filter output drives an mc1350p, which i 
		was surprised to see is still available. i thought these things were 
		beyond obsolete, but apparently not. it's a nice little variable gain if 
		amp that comes in a plastic 8 pin dip. i bought 10 a very long time ago, 
		and it was time for one of them to put in a little work on my behalf 
		which it seems to be doing just fine.
now we head into the demodulator, which is actually a second double 
		balanced mixer identical to the first. the output of this mixer goes 
		into a tda1015 which i'm pretty certain is obsolete. it's an audio 
		amplifier containing both a ~1 watt power amp and a preamp. it's not a 
		great part, but i have a number of them from back in the swap meet days, 
		so why not?
something i'm missing that's soon to be a problem is a good antenna. 
		for the near term i'm making do with an extremely casual mag loop 
		knocked together from 12 feet of #14 house wire and a 365pf tuning cap. 
		i'm using a ferrite toroid to couple into it and get a vswr of about 
		1:1.2. the whole mess is supported by a stack of (empty) cardboard 
		boxes.  dollars expended: zero.
i'm getting a so-so level of performance. there's no reason to expect 
		more. the if is too wide. there's no audio filtering. i'm picking up 
		noise from both sidebands due to the simple demodulation approach. the 
		antenna has a low aperture, and it's located in the basement. 
		nonetheless, it's fun.
ssb phase shifting (24 april 2020)
as mentioned before, pete, n6qw, got me interested in tinkering with 
		phasing ssb radios. single sideband radio may seem a bit complex, but 
		conceptually, it's really simple. you just take the audio spectrum of 
		speech and shift it up into the rf realm. am, on the other hand may seem 
		simple, but take a look at its rf realm and you see not only the speech 
		audio spectrum shifted up, but also an inverted copy of the audio 
		spectrum along with a huge amount of mostly useless rf carrier energy. 
		sadly, the complexity of am requires only simple hardware to make, while 
		the simplicity of ssb requires, well, a tangle of circuitry (or 
		software).
of course, it it were simple, pete wouldn't have suggested it as a 
		covid-19, stay at home project.
there are multiple ways to generate ssb. pete has focused us on the 
		phasing method, an older approach from the days of vacuum tubes when 
		crystal filters were big ticket items. phasing was the less expensive 
		approach that traded  finesse for dollars.
phasing requires the use of 90 degree phase shifted audio and rf, 
		carefully combined so that the unwanted complexity in the rf realm 
		almostly magically cancel themselves out, leaving the simple purity of 
		the audio spectrum shifted into the rf realm.
creating the 90 degree phase shifted versions is what i've been up to 
		recently. it's relatively easy to phase shift a single frequency. it's a 
		bit more of a challenge to handle a broadband signal like audio. back 
		when vacuum tubes ruled, you bought a plug in module containing a 
		handful of carefully selected resistors and capacitors. it hit the sweet 
		spot for performance versus cost. it gave satisfactory, though not 
		great, performance, but you couldn't do better without adding additional 
		expensive gain stages. today op amps cost pennies a piece, and we can 
		make broadband audio phase shifters with astounding performance.


all it takes is a little time checking component values, and you can 
		build a phase shift network that would knock the socks off radio amateur 
		from the 1960s.
you also need a phase shifted version of the rf carrier. there are 
		multiple ways to do so, but given the analog nature of the audio phase 
		shifting circuitry, i thought i'd take an analog apporach here as well. 
		i built a hybred coupler. it takes all of three components, an rf 
		transformer of the appropriate impedance and two capacitors.


my first version worked, as did my second. so did my third. i just 
		didn't realize they did. i kept seeing 75 and 80 degree phase shifts, 
		and spent a rather large amount of time trying to figure out why such a 
		simple circuit was not functioning properly. i was looking for the fault 
		in the wrong place. i hadn't adjusted the time delay between the two 
		scope traces.
something unexpected & a new rabbit hole (2 april 2020)
awhile back i ordered a microphone capsule from a chinese vendor. 
		this was before the world covid-19 situation had grown into what it is 
		now. after a few weeks i wrote it off. to my surprise, it showed up.


i'm not quite ready to do anything with it, but it should be fun when 
		i am.
like many, i'm a bit stir crazed from the stay at home situation. as 
		i was wandering about (mentally) looking for shiny topics to take my 
		mind off rl, i fell down a new rabbit hole. pete, n6qw, suggested on his 
		blog that radio-minded individuals should build a phasing ssb 
		transmitter given that we're stuck at home. i had done a bit of research 
		into this several years ago, and pete got me thinking about it again. so 
		far i have the audio phasing network working and am currently following 
		this particular rabbit a bit deeper.
microphone book, ltspice (4 march 2020)
i uncovered the manuscript for the diy microphone book i started a 
		few years back. and, it has grabbed a bit of my time. one of the 
		questions of writing is just how deep to go. too shallow and there's no 
		value, because even weak google-fu leaves your writing efforts far 
		behind. too deep and you leave most of your readers behind. the sweet 
		spot is deep enough to add real value without scaring potential readers 
		away. unfortunately, as the writer i find that spot difficult to judge.
case in point is discussing /not discussing ltspice. it's a very 
		useful tool that does not immediately communicate the need for a bit of 
		technical wisdom in interpreting its output. you run it and it gives you 
		an "answer" which must be the right answer, right? well, yeah, but maybe 
		it's not precisely "your" answer. at best it's a cousin of your answer. 
		the solver simulates an abstraction of a physical circuit. how good is 
		that abstraction? and, how would you know? the answers to all these 
		questions may be very, very distant cousins of the answers you want.
airspeed indicator project (16 february 2020)
i managed to put a little time in on the flight sim airspeed 
		indicator project. i wired the proto-board that supports the arduino and 
		the switec meter movement, and the asi is now moving its pointer.


i could have just connected the switec directly to the arduino, but i 
		added extra protection since the switec is an inductive load. the 
		current demand is only about 20 milliamps, and as long as the protection 
		diodes inside the atmel chip can handle that, there should be no need 
		for additional protection... except...  
i don't really know what happens when the switec shaft is turned 
		manually, say maybe when adjusting the pointer or just playing around. 
		after all, it's a permanent magnet motor, and it does generate an output 
		when operated in reverse. is that a problem (threat?) to the arduino? i 
		don't know. so, just to be safe, i added extra protection diodes.
for now i'm back to writing arduino code. there's a library for 
		stepper motors, unfortunately, it not really suitable for this project. 
		the switec is a bit odd internally and takes a somewhat weird step 
		pattern. the arduino stepper library will make the motor move, but not 
		smoothly. and then there's the issue that the library call is a blocking 
		call. that's not what you want if you expect the instrument to be 
		continually listening for new commands.
it really is different (8 february 2020)
i have the second edition of art of electronics. i resisted buying 
		the third edition; how different could it be? well, turns out, different 
		enough. once i spent some time leafing though the x-chapters i realized 
		i needed to spend the money on the newer edition.


i like the coverage of fets. i really like the coverage of low noise 
		design...  this is not really an entry level book on electronics 
		even though it does present a fair amount of basic information. this 
		basic material serves simply as an introduction to in depth coverage of 
		a topic.
more to read (31 january 2020)
real life got interesting again with the result that i did less of 
		the technical stuff i had in general planned to do. that's not all bad. 
		in fact, some of it is very, very good. i now have a new grandson, and i 
		am extremely pleased to spend significant time being a fawning 
		grandfather. at the other extreme is dealing with income taxes. they are 
		somewhat more complex this cycle as we sold a house, moved, and bought 
		another. the taxes, per se, are not too terribly difficult; it's finding 
		the pieces to plug into the holes. the process of moving one's household 
		tends strongly to randomize everything regardless of how hard you might 
		try to keep them organized. it's taken days of digging through boxes and 
		sorting papers to make sense of the mess. it's just about done, but 
		that's just about all that i've done.
a bright note (of the technical kind) came in the form of the arrival 
		of this book. 

 
the art of electronics, the x chapters 
		contains material that did not fit into the 3rd edition of
		the art of electronics. it's the 
		advanced stuff, the cool stuff you want to know when you realize knowing 
		the basics won't get you where you want to go.
fuel selector v4 (22 january 2020)
i'm still looking at options for a fuel selector valve. this fourth 
		version is recessed and circular. so far i've only printed the label and 
		a half size test of the body. currently i'm most interested in how the 
		label will look. i cut the text into the outer ring then changed the 
		filament during the print. results are workable though i'd prefer more 
		contrast.


 
fuel selector v3.1 (15 january 2020)
there's been a number of minor tweaks. overall the selector is 
		functional, i've just continued to make minor improvements.


an obvious change (and hopefully, an improvement) is printing the 
		handle with red filament and adding identifying text to the top surface. 
		i had thought of painting inside the characters, but the font is too 
		small for the brushes i have on hand. a less visible change to the 
		handle is a reduction in the mechanical clearances with the other parts. 
		the assembly is tighter now and turning the handle feels a bit more 
		realistic. there's still room for improvement, but currently, it's not 
		bad.
the remaining effort went toward improving the text on the placard. 
		last week's attempt was to do a filament change mid-print with the 
		placard body in black and the text in white. that mostly worked though 
		the "t" on "both" was malformed due to an extraneous blob of black pla. 
		i was able to correct most of the problem with a bit of micro-trimming, 
		but would prefer an approach not requiring rework.
the next attempt was to print only in black, enable ironing, and 
		paint the resulting smooth surface white. that was done on the above 
		print with the red handle. the surface was smoother, but not really 
		smooth. also there was an obvious variability in finish quality across 
		the surface that i don't care for.
my last attempt (on the right, no handle) was to print with black 
		filament and no ironing. i then wet sanded the surface with 320 grit 
		sandpaper to get a uniform surface. finally, i painted the text and 
		border using a fine tip paint pen. this is the best looking yet.
fuel selector v3 (8 january 2020)
i've continued to refine the fuel selector switch, and i have a 
		workable prototype (though it could still be enhanced). there are three 
		3d printed components which support and activate snap action limit 
		switches. this version is 3 inches square.




i have red filament on order, and printing the handle in red is a 
		planned improvement. i might also add the text "fuel" to the top of the 
		handle, perhaps as a cutout in a white layer over the red. i'd like a 
		bit more resistance to turning the handle. i"m not currently sure how to 
		get that without complication or creating excessive wear. something to 
		ponder as i get back to writing.
happy new year (1 january 2020)
i took a brief break from writing to throw together a somewhat clunky 
		prototype of a fuel selector for sim use. the handle and the shaft it 
		turns were 3d printed as one part. the lower end of the shaft (which is 
		round) ends with a short rectangular extension. a cam with a matching 
		rectangular hole fits over it and holds the cam/shaft combo in place. 
		turning the handle rotates the cam which operates the snap action 
		switches, or will once i get them mounted.


this is just a proof of concept prototype. it appears to work though 
		there are a few things i will change. i've been a little generous with 
		operating clearances. i didn't want the shaft to bind, but i got carried 
		away. i'll tighten those a bit. 
i'll print the text layers with white filament so the characters and 
		the placard edge stand out. i may also add an aircraft outline in a 
		style similar to that used with cessna fuel tank selectors.
i think the handle should be printed using red filament. black on 
		black simply does not provide enough contrast.
finally, i might change the switches to units have a roller. i'm 
		using these because they were in my junk box. or, maybe i should change 
		the mounting to accomodate switches that have a straight lever since 
		that style seems more readily available.
happy holidays (26 december 2019)
i've mostly been involved with family and preparation of the 
		holidays, though some progress has been made on the draft guide to 
		instrument building.
arduinos & software (19 december 2019)
i've been digging through my box of arduino bits and pieces 
		determining which ones still work. so far they appear to be okay. for a 
		while it seemed as though the chinese "nanos" were dead, but apparently 
		they aren't really nanos. if i tell the arduino ide that it's connected 
		to a pro mini, everyone's happy. tell the ide there's a nano at the 
		other end of the cable, and it's just crickets chirping. 

 
for the time being i'll treat them as working. hopefully they'll 
		continue to do so.
anyway, on to software... the intent is to use the nano clone as the 
		motor controller behind the switec. i initially planned on using the 
		"stepper( )" function included with the arduino ide. unfortunately, 
		there are a couple of problems with that. turns out the switec is a 
		somewhat unusual type of stepper motor. its optimal step pattern is not 
		the basic quadrature square wave pair most steppers default to. the 
		switec will work when driven by stepper( ), but lose a third of its 
		potential resolution. another issue is that stepper( ) is a blocking 
		call. it won't return until the step or steps are completed. if there's 
		a requirement to monitor a serial connection, and of course there will 
		be in a sim, being stopped dead waiting for an instrument pointer to 
		move risks missing commands or letting a buffer overflow.
asi prototype (11 december 2019)
i'm close to having a functional prototype airspeed indicator. i had 
		initially thought that i would have a small batch of printed circuit 
		boards made, but protoboard seems the way to go for now. the circuit is 
		just too simple. there's an arduino, a switec, and a few protection 
		diodes. if i were to make several of these instruments i'd probably opt 
		for commerical boards, but for now, protoboard is the order of the day.


this is likely the least expensive instrument i've built. the arduino 
		nano is a $2 ebay purchase from a few years ago. the switec meter 
		movement is likewise a purchase through ebay at a cost of $4 or $5? the 
		protoboard was, hmm, a dollar? fifty cents of pla, maybe. i'm sure there 
		will be other charges against the project. i'll have to pay a few 
		dollars to print the faceplate artwork with color arcs, since i don't 
		have a color printer. all in all, i think it's coming in around $10 or 
		so. 
drawing, writing and lighting (4 december 2019)
most of the week has gone to working on a draft guide to making basic 
		single pointer instruments. it's an updating of material i covered years 
		back in building simulated aircraft 
		instrumentation. there's a heavy focus on 3d printing and on 
		materials and components available today. the intent is to e-publish, 
		and to do so in much smaller chunks. e-publishing lets me use color 
		images, something i couldn't do in dead tree format. i'm hoping this 
		will be more accessible on several levels to readers.
what that's meant is that while i'm "writing" i'm actually spending 
		more time drawing. the color images are in large part illustrating 
		various steps in creating the stl files for 3d printing. so i've been 
		learning how to create meaningful images and how to get then to stay 
		where i want them inside the written document. it's frustrating slow.
i'm also trying a few experiments with instrument lighting. i used 
		clear filament to 3d print a light diffuser surrounding the instrument 
		faceplate. i have leds shining into the diffuser. there's room for 
		improvement. i think the leds are too close to the inside edge of the 
		diffuser. maybe they should be embedded within the diffuser, rather than 
		just shining into it.


making artwork (27 november 2019)
most of my time this week seems to have gone into finding the right 
		software to make artwork for gauges and flight instruments. these are 
		not particularly difficult things to draw, and there are surely any 
		number of drawing packages that could be used, but i'm interested in 
		free. why? well, i'm considering developing updated versions of my 
		flight sim books. since they're project oriented, the cost of those 
		projects bears on the attractiveness of whatever i put out there. so, 
		free is good.
in the (increasingly distant) past i relied on turbocad. when i first 
		started using it, it was an almost unknown title i picked up at a swap 
		meet for a few dollars. not great, but good enough. it let me develop 
		artwork for sim instruments. it let me illustrate my flight sim books. 
		but turbocad has changed. it's far more capable, and it now costs real 
		money. i'm not happy with the thought of projects for hobbyists which 
		require expensive software that gets only tangential use in those 
		projects.
my first attempt at free was using librecad. unfortunately, librecad 
		appears to take a very casual approach to text. all i could get from it 
		were crappy single stroke characters. nope, can't do crappy text on an 
		gauge faceplate, so on to attempt number two.
qcad handles text nicely. i like that. what i didn't like was the way 
		some important (to me, anyway) features were stripped out of the paid 
		version to make the free, non-commercial version. drawing color-filled 
		arbitrary shapes became unacceptably cumbersome. the colored arc on the 
		asi would have been too painful to do.  hello, attempt number 
		three.
i took another look at inkscape. i'd used inkscape a bit some time 
		ago, but didn't find it all that useful for the work then at hand. i 
		prefer cad programs because i like the tools that cad programs have. 
		inkscape is aimed at other clients. it's not an engineering package, and 
		it doesn't feel like a 2d cad program. but, if you look, you can find 
		the basic functionality there, and guess what, you can make nice looking 
		instrument artwork without much trouble.


3d printed hi/dg and a few knobs (20 november 2019)
since last week's 3d printed airspeed indicator turned out so well, i 
		decided to try something more complex, a heading indicator / directional 
		gyro. rather than a little, low torque switec meter movement, i've based 
		the hi/dg on a nema 14 stepper motor. that may appear to be overkill, 
		but not really. the compass rose disk presents much more rotational 
		inertia to the motor. that would put significant loading on the switec 
		gear train resulting in a shortened life. and then too, there's the 
		issue of making a good connection between the disk and the small 
		diameter shaft of the switec. 
the nema 14 stepper, on the other hand, has no problem spinning the 
		disk, and i've got no problem making a strong connection to its 5 mm 
		shaft.


the disk is sitting too far forward currently. i've got the wrong 
		motor installed. the proper one should be here in a few days. 
this will be arduino based and will use a 3d printer stepper driver. 
		i expect that a micro stepping driver connected to a 400 step/rev motor 
		will result in very smooth and quiet motion. we shall see.
i've also been printing knobs. mostly, it's just for grins. i don't 
		have anything to put the knobs on. if nothing else, it's practice with 
		fusion 360. 


3d printed asi project (13 november 2019)
i built a flight sim airspeed indicator a number of years ago. among 
		other things it took aluminum, acrylic, threaded spacers, and several 
		days of effort. over the past few days i built an asi using a 3d printer 
		and only several hours of effort. a significant portion of that time was 
		directed to learning how to use the printer and correcting my mistakes. 
		i still have some corrections to make, but overall i'm pleased with the 
		results.


there are four 3d printed components including the pointer.


i've used a circuit board from an earlier project based on a switec 
		meter movement and a pic16f648a. i'm planning to redo that. i'll keep 
		the switec, but i'll shift to an arduino nano. it's hard to beat a $2 
		electronic solution that includes the usb interface.
3d printing tests (5 november 2019)
i've been rethinking some of the flight sim instrument designs 
		covered in building simulated aircraft 
		instruments. the designs were developed to be built with tools 
		that i reasonably expected flight sim hobbyists to have on hand in 2004. 
		"reasonably expected tools on hand" now includes tools like fusion 360, 
		cura, 3d printers, and an arduino ide. the list of easily available 
		materials has grown as well. with that in mind, i wondered how a diy a/c 
		instrument or gauge project might be approached.
one obvious step would be to 3d print as much as possible, and that 
		brought me to try 3d printing the text on a gauge face plate. the 
		thought was to print the faceplate with raised text and markings using 
		white pla. i would then spray paint the whole thing black. once dry i 
		would carefully sand the paint from the top of the letters and markings 
		exposing the white pla. genius! except not quite. here's what i got.


the first test is on the left. it should have printed "12345" with 
		"airspeed" below that. apparently cura decided my ender 3 couldn't 
		handle the detail of 5mm arial. the 3 and 4 are botched and the second 
		line didn't see any g code worth mentioning. the second try, the middle, 
		is the same stl with cura scaling it up by 133%. it prints, but the 
		character size is too large for the gauge faceplate. the test on the 
		right is a new file with the characters converted to bold. okay, that 
		slices and prints, but looks not so good.
this would probably print quite well on an sla printer, but that is 
		something i do not have. so, plan b is inkscape and printing on self 
		adhesive paper.
with the faceplate plan a firmly put to bed, i moved on to test 
		printing an instrument bezel. that at least worked reasonably well.


if i'd known it was going to work so well i'd have taken the time to 
		load black filament into the printer.
new toys (29 october 2019)
after a bit more than a year mike's flight deck is mostly unpacked, 
		and the workshop is finally coming back together. there's a new 
		addition:


i've used a tektronix 455 for just about forever. it still works, but 
		the newer scopes keep getting better and cheaper, and smaller. finally i 
		couldn't resist the lure of the shiney and new (and small). 
 i also bought one of these:


i'm sure there are better 3d printers, but the ender 3 pro hits an 
		attractive price-performance point. it's low enough in cost to appeal to 
		a broad range of hobbyists while still being able to produce good 
		quality prints. it's the sort of tool that a person interested in flight 
		sims might add to his bench.
of course that leads to the next step, learning how to do more with 
		it than making copies of items snagged from thingiverse. i've used 
		turbocad for many years, but it's hard to compete with fusion 360. my 
		turbocad is woefully out of date, and they expect real money for a 
		current version. fusion 360 is offered for free to hobbyists. as 
		wonderful as fusion 360 appears to be, it's still a different system, 
		and it's taking some serious effort to learn how to use it. still, it's 
		quiet where i'm at now, and i've got the time.
 
there are still a few cartons of building 
		recreational flight simulators left, and i'm still selling them.
 
rl update, v5.0 & synchros revisited (29 august 2019)
we have established a new household in washington state about an hour 
		from seattle in an unincorporated area. this is the first time we've 
		lived in the pacific northwest, and its beauty is a significant reason 
		that we have not succumbed to the chaos of our move.
while unpacking i ran across the digital to synchro interfaces i 
		built some years ago. because i also ran across a synchro related thread 
		on the eevblog forums, i started rethinking the dts design. dts version 
		2 corrected a design flaw, added features, but was mostly done to reduce 
		cost. most of that plays pretty well today, but cost is beginning to 
		creep up. i'd used lm1875 low power audio amps as output buffers. at the 
		time you could source them for about a dollar a piece. that's rare 
		today.
class d amps are somewhat attractive, but they often are set up with 
		bridged outputs. if an output transformer were used this would be fine, 
		but that's not always the case. there are many small synchros gauges 
		that can be driven without transformer isolation, and that significantly 
		reduces the interface cost.
what i'm considering now is an opamp with a couple of outboard buffer 
		transistors. this seems like a step back in time, but for a hands on 
		hobby project, trading assembly time for cost may be the right way to 
		go.
rl update, v4.0 (16 june 2019)
we have one foot in the new house and the other in an apartment. 
		chaos reigns. all the change of address action we did a few months back 
		must now be redone. in the confusion i neglected to renew the domain for 
		mike's flight deck so the site went dark for a few days. the next major 
		step involves getting the refrigerator into the new house and ourselves 
		out of this apartment.
brfs still shipping!
rl update, v3.0 (13 april 2019)
slow progress. the old house has been sold. the new house is almost 
		ready.
and i'm still shipping copies of brfs.
rl update, v2.0 (27 february 2019)
the big move is 99.3% done, at least from a mileage perspective. most 
		of the household including mike's flight deck books is in storage a few 
		miles from the yet to be finished new house. there are a few steps 
		remaining like insulation, drywall, and oh yes, paying for it. and that 
		requires selling the old house which also has a few steps outstanding.
still, it's all moving forward, and i'm still shipping copies of 
		brfs.
rl update (22 january 2019)
i wouldn't call it panic, not exactly, but as the date of the big 
		move approaches with implacable regularity and we survey the incomplete 
		nature of our preparation, we do experience what might be construed to 
		be an overly elevated state of angst.
i had heard of a condition wherein one's feeling of ownership of 
		things flips around, and you realize that it is the things that own you. 
		i now totally understand. a lifetime of accumulated stuff now directs 
		how i spend my time. clean it, sort it, pack it, or get rid of it. it 
		takes a really long time, and it's a difficult process. turns out when 
		you're an adult with a lifetime collection of adult toys (no snickering, 
		please) you can't just put five or six thousand pounds in the trash and 
		have it disappear. you have to pay to have it hauled away, and when it 
		includes electronics, it's classified as hazardous waste. who knew?
fortunately the end is near, and we may actual survive to enjoy it. 
		construction on our new abode is on schedule, and we've found a suitable 
		rental to live in while the old place is brightened up and sold, and the 
		new place is finished. fast portal to portal moves are a thing of the 
		past when i had access to corporate relocation services. since i am long 
		retired and don't have corporate clout helping us along, it's a long, 
		unsettling process.
but rl still goes on. i'm still shipping copies of brfs. i'll keep a 
		small inventory out of storage and on hand to meet a reasonable number 
		of book orders though there may be an occasional delay.
rl steps in, big time (15 october 2018)
real life does that, you know. one moment you're cruising along, 
		making great progress (at, say, writing) then there's a course 
		correction. everything changes. it's not that you're no longer making 
		progress. you are. it's just a different sort of progress.
a few months back we were visiting the (now adult) kids in far away 
		land where they have apparently settled permanently. while they were at 
		work, we were driving around sightseeing and stumbled across a model 
		home that spoke quite persuasively to us.
so now, progress is aimed at making our current home ready to sell, 
		so that we can pay for our future home in far away land. 
that's real life, you know.
headphone amplifier (16 july 2018)
here's the assembled headphone amplifier. i've used the same size 
		aluminum die cast box as was used for the microphone preamp. these boxes 
		are inexpensive as well as robust, and they provide good electrical 
		shielding.


microphone preamp (3 july 2018)
i've built up a battery powered microphone preamp in a die cast 
		aluminum box.


the two batteries at the top of the picture supply the preamp. the 
		lower five provide a nominal p48 microphone phantom power. the rotary 
		switch selects between 20, 30, 40, and 50 db of gain. the switch 
		immediately to the right enables phantom power, and the left most switch 
		turns the preamp on.
this was not terribly expensive. even so, i'm sure i could have 
		bought an import for less. however, i didn't built it to save money. i 
		built it so that i that i am assured of its performance.
the next step is to build up the head phone amp in a similar box.
microphone prototype body #2 (19 june 2018)
i've got a workable, "one piece" mic body suitable for a flat room 
		mic or "measurement mic". i probably can't call it a true measurement 
		mic since i don't have a traceable calibration file for it.  it 
		will have a jli-61a electret capsule in the tip, and i expect it will be 
		reasonably flat. the body is fairly narrow at the business end, so there 
		shouldn't be shadowing or diffraction to  worry about. if i had a 
		real response curve for the capsule i could use that, but all i have is 
		the nominal response curve that accompanies the spec sheet. it's  
		starting point, i suppose.


the short piece of tubing on the right is the xlr connector with a 
		circular shim glued to the outside of the connector shell so it fits 
		snuggly into the mic body. the pcb carries your basic schoeps circuitry.
the body is intentionally long to allow room for experimental 
		electronics. you could easily cut two inches from the length by making 
		better use of the volume in the body, but i'm lazy and this makes 
		prototyping less of a pain.
microphone prototype body #1 (12 june 2018)
the microphone electronics circuit board is long and skinny so that 
		it will fit inside a body made from copper pipe. the initial body 
		prototype is workable, but i've decided to alter the design before going 
		further. i already see some improvements.




for some reason i had decided it was a good idea to permanently mount 
		the xlr connector shell in the body. the insert would be removable, but 
		the metal connector body, minus the mounting ears, would be soldered or 
		epoxied into the copper pipe. the copper snout of the mic body would be 
		removable for access to the circuit board.
one problem with the two piece body is that the junction between the 
		two pieces begins to look a bit unattractive immediately after the first 
		time it's disassembled. another issue is the difficulty in keeping all 
		the pieces nicely aligned during the initial build. copper plumbing 
		leaves a bit of a gap for the solder to wick into, and this allows 
		pieces to wobble during the soldering process.
a one piece microphone body is now looking far better.
microphone electronics (7 june 2018)
this is the simple version of the microphone electronics.


the board design can support a fet cascode arrangement to reduce thd 
		at higher spls. however, i've only partially populated this board. it's 
		set up with a rather standard schoeps configuration. the electret 
		capsule is loaded with and powered through a 2k2 resistor. a jfet phase 
		splitter buffers the audio signal and passes the resulting differential 
		signals to a pair of pnp emitter followers. it's all pretty vanilla and 
		works as expected.
testing involved connecting this board to the mic preamp and the 
		preamp to the headphone amp. it all runs off a pile of 9 volt batteries. 
		i was wondering if i could get away without putting the preamp and 
		headphone amp into shielded enclosures. the answer is not really. even 
		using batteries and twisted pair connections between boards, i can hear 
		60 hz hum in the background. if i'm to make any sort of serious 
		measurements i'll have to shield the circuitry.
i have a pair of diecast aluminum boxes that will hold the preamp and 
		headphone amp. the microphone body, if things go according to plan, will 
		come together from bits of copper plumbing and a hacked xlr connector.
microphone preamp (3 june 2018)
here's the assembled, but untested, microphone preamp.


it's based on an in217, and will work with an ssm2019 as well. since 
		i'm planning on using this for testing microphones, the gain is 
		selectable at only one of four values: 20, 30, 40, or 50 db. i've used 
		paralleled 1% resistors to create the specific resistance needed for 
		each gain setting. having fixed, known gains allows me to better 
		determine sensitivity of microphones being tested.
the circuit's pretty much textbook. it's got clamp diodes protecting 
		the inputs and can supply p48 phantom power. it is intentionally 
		colorless and flat. it's meant as a tool for investigating microphone 
		behavior, so i don't want anything to distract from the mic.
i'll be running this on batteries, even the 48 volt phantom power. 
		five 9 volt batteries in series come in just within the low side of the 
		p48 spec, 48 volts +-4.
i'll test the preamp along with the third jlcpcb circuit board (a 
		microphone circuit) once i collect enough batteries.
headphone amplifier (1 june 2018)
the headphone amplifier on the jlcpcb circuit board is built and 
		working. it went together almost without problems. i did miss tying an 
		opamp pin to ground while creating the board design. an easy fix, but an 
		annoying oversight on my part.


the amp uses parallel opamps to drive the output. it's a common 
		enough approach, one that works very well with the ne5532. good power 
		output coupled with great frequency response and low distortion. what's 
		not to like?
i tacked on a basic input buffer driving a "baxandall" volume 
		control. this arrangement places the volume potentiometer in both legs 
		of the opamp feedback network.  you get a very nonlinear change in 
		volume from using a linear potentiometer. normally you'd think of using 
		an audio or "log" taper pot for volume control. problem is, the so 
		called log taper isn't. it's actually two linear segments back to back. 
		a baxandall setup is far better at producing volume changes that appear 
		to vary smoothly to the logarithmic human ear.
another advantage of the baxandall volume control comes from the 
		relative manufacturing tolerances of linear versus log taper 
		potentiometers. you are far more likely to get dual linear 
		potentiometers with good tracking between the two individual 
		potentiometers than you are when buying log taper dual units. this 
		results in better channel to channel volume tracking when using dual 
		potentiometers in stereo amplifiers.
diy microphone book (22 may 2018)
the content of the diy microphone book is project oriented. that 
		means i have to build prototypes. obviously, there are microphones 
		involved, but also there are some bits for testing microphones. while 
		it's reasonable to expect that people interested in building or 
		modifying microphones will have mic preamps and such, it's not to be 
		assumed that the characteristics of these ancillary bits are well known 
		or benign from a testing standpoint. when you're testing something, it's 
		ideal to have everything else be as neutral as possible.
turns out it's not particularly expensive or difficult to build high 
		end ancillary circuits to help in testing mic projects. in particular, 
		i'm referring to a mic preamp and a head phone amp. the preamp has a 
		professional chip at its heart and has a stepped rather than 
		continuously variable gain adjustment. the head phone amp is designed to 
		have a flat frequency response so any coloration will be known to 
		originate with the mic under test.
it's not hard to build these circuits on perf board, but it's easier 
		and far more attractive to build on professionally made circuit boards. 
		cost has often been a deciding factor in favor of perf board, but that 
		is now much less of an issue. after running across a number of youtube 
		videos that highlighted using chinese pcb prototyping services, i 
		decided to give it a try.
jlcpcb has a ridiculously good deal which is why they keep popping up 
		in youtube: two bucks for ten double sided boards with solder mask and 
		printed legends. boards must be smaller than 100mm by 100mm. plus they 
		provide cloud-based board layout software for free.
at this price the cost of shipping becomes the larger expense. dhl 
		typically runs ~$18 to the us. airmail is maybe half that, but has 
		significantly longer delivery times. i planned on sending in three 
		different board designs to get the best use out of my shipping expense. 
		i found that the $2 price applied as a special only to the first of the 
		three designs. the other two were billed at $5, still not at all bad. 
		then, as i was a first time customer, jlcpcb picked up the cost of 
		shipping via dhl. so, i got thirty boards for the grand total of $12.
here's the obigatory picture of the box the boards came in.


and here are samples of what was inside.


from the top: mic preamp, head phone amp, electret mic electronics.
the boards look great. i may find mistakes in the layout work i did, 
		but it doesn't look like i'll find issues with the board manufacturing.
the writing rabbit hole (10 april 2018)
i'm back looking at the diy microphone manuscript. this mostly 
		follows my exploration of the topic. the thought is that it will serve 
		as an introlduction to the hobby. it's not super technical though is 
		does have a tech leaning. i'm thinking it will bring a reader from zero 
		to well informed hobbyist in 70 to 80 pages. we'll see...
the writing rabbit hole (18 march 2018)
my latest sf novel, angel resurrected, 
		is now live on amazon as an ebook.
find it here: 
		https://www.amazon.com/dp/b07bjfj8yx 


the writing rabbit hole (10 march 2018)
angel resurrected has moved closer 
		to being released into the wild. a few people have read it and not died 
		from the experience. this is a good thing. work proceeds on the cover.
the writing rabbit hole (2 february 2018)
my science fiction novel (working title: 
		angel resurrected) has crested 90,000 words and hit an important 
		milestone; the story is complete. that's not quite the same as being 
		finished. 
let the editing begin.
the writing rabbit hole (16 january 2018)
a problem with writing projects is that there can be long periods 
		with little physical evidence to show for the effort. i considered 
		posting a picture of my cat, because this is after all the internet, but 
		i admit to being too lazy to chase her down. you'll just have to take my 
		word that there are two fair size projects, and there's progress on 
		both.
my "ancient technology wakes up and makes life interesting" science 
		fiction novel has been the most recent time sink. the working title is
		angel resurrected. in it, bits of high 
		tech debris have fallen to earth. not all of it is inert. not all of it 
		has fallen. strictly speaking, none of it is benign. the manuscript has 
		nudged past 83,000 words, and it looks like it will grow a few thousand 
		more. 
my nonfiction book on diy microphones, with the working title, ah,
		diy microphones, is considerably 
		shorter, but has a boat load of drawings. essentially, this book 
		documents my own exploration of the hobby side of do-it-yourself 
		microphones. i'm not breaking a lot of new ground here, though i do add 
		a bit. what the book does is gather together in one reference the 
		technology that is key to the diyers who build their own microphones. a 
		lot of the writing is done. the next steps involve building and 
		verifying a few projects for the book. 
new toy (31 october 2017)
some large number of years ago i was quite near sighted and wore 
		glasses. one of the few advantages was that without the glasses i could 
		focus on small items held really close to my eyes. i had no problems 
		seeing electronic components.
time has changed that. i am much less near sighted. i can't focus on 
		up close items, and electronic components have shown an alarming 
		tendancy to become, literally, vanishingly small.
i tried hand held magnifiers and head mounted magnifiers. finally, i 
		bought one of these:


this is an amscope model se400x stereoscopic inspection microscope. 
		it is far better than any other option i have tried. the "x" in the 
		model number means the unit shipped with two sets of eye pieces, one for 
		5x magnification and a second for 10x. there are other options for 
		greater magnification, but for the electronics work i do, that would be 
		overkill. in fact, it would be a liability. a magnification of 5 clearly 
		shows surface mount components while providing a wide enough field of 
		view so i don't get lost on the circuit board.
a key feature of this microscope is that it focuses about nine inches 
		below the objective lens leaving plenty of room for hands, tweezers, and 
		soldering iron. the left eye piece has its own focus adjustment so if 
		your eyes aren't identical (mine aren't) you can still get a well 
		focused stereo image. the unit is solid and heavy enough to stay put on 
		the bench. the goose neck led lamp has more than adequate brightness. 
		the fit and finish is a bit on the casual side, but for a sub $200 
		binocular microscope it's an effective tool for getting the job done.
a stepping motor and a book (11 october 2017)
i finally got around to buying a couple of those ubiquitous geared 
		stepping motors, the 28byj-48. these motors are favored by hobbyists and 
		hackers. they're available in 5 volt and 12 volt versions, and many 
		sellers also sell a tiny circuit board with a motor driver chip making 
		the motor trivial to control from an arduino or similar device.
plus, they are dirt cheap.


the motors were designed to activate louvers or dampers in heating 
		and cooling systems, so they are made by the millions with the result 
		that the price has been pushed way down, even in small quantities. the 
		cost of two motors, a pair of drivers, and shipping is generally around 
		$6 or so.
the motor has 32 full steps per revolution giving a step size of 
		11.25 degrees. this can easily be half stepped to drop this to 5.625 
		degrees. the internal gearing provides a nominal 64 to 1 reduction which 
		gives you a 0.0879... degree step size.
at first glance this looks like a perfect solution for low cost 
		aircraft gauge simulation.
well, almost. there are a few caveats.
first off, there is an annoying amount of gear backlash, perhaps as 
		much as 2 or 3 degrees. for small engine gauges this is probably 
		acceptable. for something like a 3 inch airspeed indicator, i'd find 
		that much backlash a real distraction. for indicators that do not have 
		freedom to continually rotate (like the asi) the backlash could be 
		controlled by using a spring to put a small load torque on the indicator 
		shaft. for indicators that do have full rotational freedom (a dg or 
		compass) you might want to look for a better solution. (hint: a 400 step 
		per rev hybrid stepping motor can be half stepped to provide 0.45 
		degrees per step.)
a second caveat is that the 28byj-48 gear reduction is not 64 to 1. 
		it's 25792 to 405 or 63.684... to 1. this may seem like pointless 
		nitpicking, but suppose you don't care about the backlash and use this 
		motor for some sort of continually rotating indicator. because of the 
		non integral reduction factor, there is no integer number of steps which 
		will bring the indicator back to the exact same point after a "360" 
		degree rotation. yes, there are no doubt solutions to this, but it's 
		something that will have to be taken into consideration or there will be 
		a continually accumulating error.
so, is this a "no fly" recommendation? 
not at all. 
the 28bjy-48 motor isn't a perfect solution, but with its ready 
		availability, low cost, and ease of use, it's a device that should be in 
		every cockpit builder's box of parts.
 
a number of years ago jake melampy produced 
		the modern hog guide. many a-10 cockpit builders considered this 
		book to be the best reference they'd seen. 
then it went out of print, and the asking price of used copies 
		soared.
fortunately, melampy has released a second edition. it's bigger, and 
		its price is down to earth.


toy (12 september 2017)
probably the most honest reason i had for buying this is that i had 
		room for it on my workbench. i don't really need it. it just looked like 
		a bit of fun.


it's fundamentally a gate array configured to run a direct digital 
		synthesis algorithm. there's a small handful of support circuitry: a 
		microprocessor, power supplies, display, and output amps, but 
		conceptually it's pretty simple.
it has two outputs which can be selected among sine, square, 
		triangle, ramp, or arbitrary waveforms loaded into its memory via usb. 
		you can play with frequency, amplitude, the phase between channels.
it's really inexpensive, less than $50 delivered with cables and wall 
		wart power module.
there are a variety of videos on line reviewing and dissecting this 
		and similar models. to be clear, this thing is by no means a 
		professional grade instrument. if you need a low noise, highly 
		accurate/stable  signal source, you should look elsewhere. but if 
		you're looking for a low cost sig gen with a few bells and whistles 
		thrown in, this might be worth checking out.
(i bought this through ebay from tomtop wholesale market.)
writing (11 august 2017)
the ancient-technology-wakes-up-and-causes-grief sf manuscript has 
		nudged past 70,000 words.
writing (21 may 2017)
one of the issues with being down the writing rabbit hole is that not 
		much seems to happen for long periods of time, and there's not much of 
		interest to post here, this being a techie electronicky kind of place. 
		still, i'm not dead, and i thought i'd poke my head up long enough to 
		say so.
i'm writing a science fiction novel of the 
		ancient-technology-wakes-up-and-causes-grief type. the rough draft has 
		passed 50,000 words. it's looking to be 80~90,000 words for the full 
		manuscript, so i'm nominally past the halfway point, and i'm still alive 
		and i'm still writing.
building, writing (28 march 2017)
last year i watched steve wagner on his youtube channel as he built a 
		chinese electronic kit bought through ebay. it was a single board 
		component tester with a small graphic lcd display and a pre-programmed 
		atmel micro at its heart. it looked like a fun little project, it worked 
		for steve, and it was really cheap, under $15 delivered. so i bought one 
		and promptly forgot about it.
today i remembered it and built it. it is indeed a nice little kit 
		with good quality components, though it's not without its shortcomings. 
		like the kit steve got, mine had two 33k resistors supplied while two 
		3k3 resistors were called for. other than that, no problems.
there is no assembly manual supplied with the kit. you simply plug 
		parts in based on the markings on the board. still, for what it cost, 
		not a bad deal, and it worked the first time. here's what i got:


and after about two hours, here's what i had:


it tests resistors, capacitors, inductors, transistors and diodes, 
		measures frequency, and acts as a basic pulse generator. it's not 
		something i actually needed, but it's a hoot to play with. if you're 
		interested, it's a "w8y2" component tester and as of today, it was still 
		available on ebay. if you're interested in steve wagner's video about 
		it, it's #223 on his channel, "electronics trivia".
and i'm still working on my ancient-tech-wakes-up-and-causes-trouble 
		sf novel. i wanted to make sure i could wrap things up so i thought i'd 
		write the last 3~5,000 words. well, that piece has grown to 30,000 words 
		and that's with me leaving a few holes along the way. but it does look 
		like the novel will wrap up cleanly and still provide a nice transition 
		into a sequel.
the reading & writing rabbit holes (4 february 2017)
february already. how did that happen?
the most recent distractions are a couple of books and a new writing 
		project.


i picked up another douglas self tome. 
		audio power amplifier design is a very thorough investigation of 
		the subject. well written, comprehensive. if you have more than a 
		passing interest in the topic you should have this book.
empire games is the first book in a 
		series which follows the story line created in an earlier series by 
		stross. the underlying thread is the existence of parallel time lines 
		and a limited number of people who can jump between them. the story 
		covers what happens when governments, cultures, and people deal with the 
		consequences. a very entertaining read. annoyed that i have to wait a 
		year for the next in the series.
i've cranked up another fiction writing project. i've always liked 
		ancient-technology-wakes-up-and-causes-grief stories. creating this type 
		of story raises such interesting questions. if it's ancient, why does 
		the technology still function? if the tech is an ai, how does it 
		communicate? what are its goals? why would the main character care? does 
		trust evolve? how? and if not, then what. developing answers with 
		internal consistency is a good part of the fun. at about 18,000 words so 
		far, it looks like this project has some legs under it. it might just 
		make it to the finish line.
the writing rabbit hole (28 december 2016)
this all started a few months back when i started looking at cheap 
		microphones. the original goal was a cheap mic for an amateur radio 
		transceiver. i read about converting a really low cost knock off studio 
		mic to radio use. this got me looking at diy studio mics and preamps 
		which got me thinking about headphone and studio amplifiers. there's a 
		lot of information floating around and collating it got me thinking 
		about writing it down which got me thinking about maybe publishing my 
		notes... which naturally got me buying more stuff, just to make sure i 
		hadn't left anything out.


it's been a really long time since i took a close look at this stuff. 
		electrets have gone from crappy replacements for crappy piezoelectric 
		mics to solid performers having high end models providing true studio 
		duty. impressive.
reading distraction (3 december 2016)
the book on low level audio design arrived a few weeks back and 
		sucked up a good chunk of my time. anyone who has more than a passing 
		interest in the topic will be familiar with the author's name, douglas 
		self, and probably, with the book as well, 
		small signal audio design.


there's nice coverage of noise sources in electronics, along with 
		what causes distortion and what you can reasonably do about it. there is 
		a surprising, to me at least, large amount of material about riaa phono 
		preamplifiers. i'm not particularly into vinyl, and don't really see it 
		as a big diy area warranting the coverage he gives it. but, even so, 
		it's still good tutorial material in that he explains the design process 
		as gain, noise performance, and frequency domain accuracy are balanced. 
		of course, self covers a great deal more, and it kept (and is keeping) 
		me reading for some time.
good material, well presented, well worth the money to buy it and the 
		time to read it.
ad9850 dds vfo (9 november 2016)
while waiting for a book on low level audio design to arrive i 
		climbed out of the rabbit hole long enough to add the remaining 
		components to the dds vfo board. i applied power and experienced 100% 
		magic smoke containment. yes, that's right, absolutely none of the magic 
		smoke was released, and the board made pretty rf sine waves.


it's pleasing when testing goes that way.
this is a multi-purpose board. it can be used stand along as a stable 
		signal source. it can be used as a radio local oscillator. it can also 
		be used as the signal source in the "poor ham's scalar network analyzer" 
		(phsna).
the phsna also requires a logarithmic signal detector which is likely 
		to be an upcoming project. or maybe i'll doodle around with a diy 
		switchable attenuator. hmm, or finish the spectrum analyzer...
down the rabbit hole, again (2 november 2016)
a couple months ago i built most of a bitx-40 qrp ssb transceiver. 
		i've yet to build the power amplifier, but i couldn't transmit anyway 
		because i don't have a microphone. somewhat more recently i ran across
		
		a post by steve, g1kqh, on amateurradio.com. he described the bm-800 
		microphone, a (not really) professional studio microphone which could be 
		adapted to amateur radio service. the main advantages of this device are 
		its really low cost, its ubiquitous availability, and its pleasantly 
		robust physical construction. (oh, and yes, it does convert sound to 
		electrical signals.) steve further posted a link to
		an article 
		by pete, g4izh, which details the conversion.
peeks at ebay and amazon quickly showed just how ubiquitous the 
		bm-800 is. it's marketed under several company names at a variety of 
		prices even though it appears to always carry the "bm-800" model number. 
		a slightly wider search turned up a number of reviews which were 
		surprisingly up beat.
so, i bought one, and it doesn't look too shabby.


the fit and finish is a bit casual in spots, but overall, it looks 
		like it will do.
this microphone requires external power, and as a (not really) 
		professional studio mic, it's designed to work with the standard 48 volt 
		phantom power one would expect to find in a (for-real) professional 
		recording studio. changing this to something more convenient is one of 
		the steps in pete's modifications. another modification is to limit the 
		bandwidth to something more suitable to amateur radio ssb, because the 
		mic actually has the audio bandwidth one might expect from a studio mic.
i began to wonder just what it would take to use the microphone 
		without modifying it, and that is when i fell down the rabbit hole.
the world wide web is a rabbit hole of truly gargantuan proportions. 
		and of course there is wide ranging commentary on studio audio gear. 
		much seems to me to be wishful thinking and/or phantasy, but here and 
		there i found nuggets that appeared to hold real value.
one that stood out was on a site which described a diy microphone 
		preamp. it advised that if the reader had come to the site looking for a 
		way to improve the quality of recorded music: don't build the preamp, 
		practice more. 
encouraged by this bit of honest advice, i continued slogging 
		through, well... stuff, and found an excellent and most informative 
		article in the form of the slides from a professional presentation 
		titled "designing 
		microphone preamplifiers" by gary hebert of that corporation. it was 
		presented at the audio engineering society convention in 2010. given 
		that the aes is a for-real professional organization offering membership 
		to for-real professional audio engineering types, and that that 
		corporation is one of the suppliers of for-real high end audio studio 
		gear used in for-real professional studios, the article had a certain 
		gravitas for me (which is a snobbish way of saying, "no bullshit here").
now, it's not like i need super quality audio from this mic. i am, 
		after all, planning on hooking it to a low power amateur radio ssb rig. 
		however, i find the engineering very interesting.
if you look close enough, everything, everything is nonlinear, yet 
		the goal of professional audio engineering is to develop equipment
		that faithfully reproduces sound without 
		adding distortion or noise. doing that requires the ultimate in 
		linearity and noiselessness. 
and what do engineers have to work with to achieve this? transistors 
		which are a pair of nonlinear diodes, one forward biased the other 
		reversed biased, working in collusion, capacitors which change value and 
		dissipate the signals they are meant to pass, and resistors that obey 
		ohm's law, more or less but not quite, and, oh yes, add noise. the fact 
		is, audio systems with superb performance do exist, and they are 
		composed of these less than perfect components. 
learning how they come to be is what's keeping me in this particular 
		rabbit hole.
ad9850 dds vfo (24 october 2016)
the project is far enough along that it's starting to juggle 
		electrons. 


the scope shows a pretty nice looking sine wave even without the 
		benefit of the yet to be built output filter. the blue lcd shows the 
		frequency the arduino has told the ad9850 to generate. the green display 
		behind the lcd is a 6 digit frequency counter bought through ebay for 
		$10~12 telling me what it thinks the ad9850 is actually generating. they 
		differ by 141 hertz. not at all bad considering neither the ad9850 nor the 
		counter even pretend to be calibrated.
the two to-220 devices on the board are voltage regulators. the board 
		is powered by 12 volts which is used by the nonexistent output buffer. 
		the 12 volt supply is dropped to 8 volts for use by the arduino. the 
		arduino's regulator could take 12 volts directly, but using 8 volts lets 
		it run a bit cooler as well as isolating it from any flickers and 
		flashes that might come from some of the less than polite, really cheap, 
		only nominally 12 volt wall warts i'll probably use to power the 
		finished board. the 8 volts also feeds a 5 volt regulator which pumps 
		suitably well behaved electrons to the ad9850 board and the lcd.
the left edge and upper left corner of the board are where the output 
		filter and buffer will be. there should be three pi attenuators in line 
		with filter and buffer to provide good impedance matches between the 
		sections and establish the correct output level. i have a great mound of 
		resistors; however, to my great surprise, nowhere in the pile could i 
		find the correct values for the attenuators. i could fudge something, 
		but decided to wait until i could get something close to what i actually 
		need. (what really surprises me, though, is that 1/4 watt, 1% metal film 
		resistors are actually cheaper than 5% carbon film units. who knew?)
the real magic happens underneath the board where the arduino and the 
		ad9850 dds board plug in. to a large extent, the board is a baby size 
		mother board (does that even make sense?). the board provides the 
		interconnect wiring that ties the components together, as well as, 
		offering a bit of shielding for the output filter and buffer on the 
		other side.


i've been using dupont style connectors which are certainly more 
		convenient that soldering everything, but they're a bit annoying for the 
		ease of plugging things the wrong way. so far no problems...
one thing i'd like to improve on is the bare copper boards. the darn 
		things tarnish too fast. somewhere i've got tin plate chemicals. now, if 
		i could just find them.
ad9850 dds vfo (19 october 2016)
i've just hared off down another rabbit hole. i bought one of those 
		ebay ad9850 direct digital synthesis board a few months back, and for 
		some reason it caught my attention again. paired with an arduino, it 
		makes a nice little variable frequency oscillator.
i had already worked out the dimensions of the stackable connectors 
		on the arduino uno board and had that in a turbocad file, so it was 
		pretty easy to come up with a simple printed circuit board design for a 
		vfo. this leans heavily on the richard visokey, ad7c vfo design, and 
		draws also from the phsna yahoo group effort.
the board will support the ad9850 module and arduino on one side and 
		an output amplifier and low pass filter on the other side. there's also 
		a header for a two line lcd character display which will be mounted 
		behind a suitable cutout in a yet to be designed enclosure.


this is the first board i've cut using an end mill. the earlier 
		boards made on the cnc were machined with a v tip engraving tool. i 
		think i like the 0.021 inch end mill better. it gives a very clean edge, 
		and the width of the cut does not vary. it's difficult to keep the board 
		flat so the final depth of cut varies across the board. with the v 
		cutter this translates into variable width cuts. since the end mill is 
		the same width along its length, i get a constant width cut even if the 
		board's not flat.
this is also the first board i've used double side tape to hold down 
		to the cnc table. it seems to work reasonably well, but is something of 
		a pain to remove once the cutting is done.
spectrum analyzer (12 october 2016)
the case for the spectrum analyzer is almost complete. there is some 
		trimming that's needed on the top and bottom covers, and some nuts that 
		have yet to be epoxied in place for holding the covers in place. with 
		what i've got, i can now mount all the circuit boards and will soon 
		begin the "final" wiring.
a view from the top...


and a view from the bottom.


at some point wandering through swapmeets, i bought a box of sma 
		terminated coax jumpers. i finally have a use for them.
the next steps are to complete the assembly of the arduino shield, 
		and to add power and control wiring throughout the box.
spectrum analyzer (5 october 2016)
the spectrum analyzer includes an arduino which is used both as a 
		system controller and as an interface to the computer running the 
		graphing display. the arduino will be supported by a breakout shield 
		which is screwed to the lower surface of the interior floor using 1/2 
		inch standoffs. if that doesn't make sense, here's a picture.


the shield is only partially assembled. some of the straight headers 
		i used are old stock and have an oxide layer that's making soldering a 
		less than joyful experience. i'll probably end up removing the offending 
		headers and using newer ones.
the shield will have the trimmer for lcd contrast adjustment, a pair 
		of voltage regulators, and an assortment of bypass caps. the spectrum 
		analyzer runs on 12 volts supplied by a wall wart. the arduino can 
		operate from 12 volts, it has its own regulator, but since i'm powering 
		the lcd and its backlight from the arduino, i'll use an 8 volt regulator 
		to supply the arduino. this will reduce the load on the arduino's 
		internal regulator as well as providing a bit more isolation between the 
		arduino and everything else.
the 8 volt regulator also supplies the second regulator which drops 
		the 8 volts to 3.3 volts, the supply voltage for the numerically 
		controlled oscillator inside the spectrum analyzer.
both voltage regulators bolt to the aluminum interior floor of the 
		analyzer for heat sinking.
here's a picture of the bare shield.


back to the spectrum analyzer project (29 september 2016)
i have finally made some real progress on the spectrum analyzer 
		project enclosure. i'm using salvaged aluminum extrusion which formed 
		the opening of a sliding shower door. the extrusion has a "c" cross 
		section, and it works well as the sides of the sa enclosure. i have some 
		0.040" aluminum sheet from an ancient airplane project that never took 
		flight, and that's being pressed into service for the top, bottom, and 
		interior floor of the enclosure.


there are three compartments. there are two large compartments for rf 
		modules and a smaller double height compartment for the arduino, lcd and 
		power supply components. i initially thought the enclosure was too big; 
		there seemed to be so much wasted space. 
then i started out checking cable runs.
sma connectors are small, but once you consider the overall length of 
		the mated connector bodies, how they interfere with connectors from 
		other modules, and limits on bending coax, the box begins to feel a 
		little tight.
the front panel is the last piece i need to cut, but i don't yet know 
		exactly where the holes go. that will depend on how i mount the arduino, 
		and that's turning out to be a bit trickier than i expected. yes, there 
		are mounting holes on the arduino uno, but there is very nearly zero 
		clearance around those holes. i don't have suitable standoffs or other 
		mounting hardware. i think hot glue must be a preferred mounting 
		solution for many. or maybe duct tape.
i'm planning on mounting the arduino using the shield connectors, 
		perhaps with a tie wrap as back up. of course, that means i need another 
		circuit board, which is what i'm working on now.
audio module (21 september 2016)
my project work seems to be bouncing around. no, that's waffling. my 
		project work is bouncing around. the bitx radio remains unfinished, as 
		does the spectrum analyzer. instead of working on them, i built an audio 
		module.
it's a pretty vanilla project, just an ne5534 opamp for a preamp and 
		an lm380 single chip power amp on the output end. it's not even my 
		design. i shamelessly lifted it from pete (n6qw) juliano's site. it's 
		part of his "simpleceiver" project. it struck me as a very useful module 
		to have handy when working on radio stuff, so i decided to knock one 
		out. the parts were on hand, so why not?
i built it using through hole components, but taking a surface mount 
		approach. why through hole components when i also have smd parts? well, 
		i've spent about fifty years collecting them, and someone's got to use 
		them. why surface mount them? uhmm, i'm too lazy to drill holes??
 i designed the circuit board layout in turbocad, exported a 
		dxf file to cambam to make a g-code file and made the board on a 
		homemade cnc machine. that gave me this:


the board came out almost perfect on the first attempt. the only 
		issue is the mising "o" from the engraved label in the lower right 
		corner of the board that should read as "out" instead of "ut". turns out 
		the "o" somehow was on the wrong layer of the dxf file and didn't 
		convert to g-code.
assembly took about two hours and was straightforward: bend leads, 
		trim leads, solder part, blow on fingers to cool hot spots, repeat... 
		then finally, this:


it works. thanks, pete.
bitx40 ssb transceiver (11 september 2016)
the spectrum analyzer project is at the point where i need to make an 
		enclosure for it, and rather than cleaning up my shop area, i let myself 
		get distracted into another electronic project, building a ssb radio.
the bitx40 is a basic 40 meter (7 mhz) single side band transceiver 
		which was designed with inexpensive components with the goal of 
		encouraging people to get involved in electronics and amateur radio. 
		this is not my design. that honor belongs to ashhar farhan, vu2ese.  
		you can read the details of the design here:
		http://www.hfsigs.com/ 
i decided to build it because i haven't built a radio from scratch 
		for far too long, and i already had the majority of the parts for this 
		design. i choose to built it "ugly style" because that's the fastest, 
		easiest method.


the transmitter portion has yet to be completed (i haven't built the 
		power amplifier), but the receiver works quite well. using an inverted v 
		antenna cut for 7mhz, i hear central state stations clearly (i'm in 
		california) along with a few weak signals from the east coast. not too 
		shabby for a handful of cheap transistors (2n3904) and a 5 pole crystal 
		filter made from computer grade crystals.
spectrum analyzer (7 august 2016)
i've wired a few more items to the arduino and loaded the arduino 
		sketch that controls the spectrum analyzer.


there is actually very little used for local control. there is a 
		single potentiometer which is used to adjust the center frequency, 
		useful to make spot measurements, and a push button used to toggle 
		resolution bandwidth and tuning speed. a short push changes bandwidth 
		while holding the button changes tuning speed. at this point the arduino 
		appears to be doing what it should.
the next logical step was probably to wire the si570 to the arduino 
		and verify its operation, but instead i decided to play with the second 
		local oscillator.
the second lo is a crystal controlled 100 mhz oscillator that drives 
		the  second mixer. the fifth over tone of a 20 mhz crystal is used. 
		initially the oscillator did not work, and i spent a good deal of time 
		looking for the most likely cause, construction mistakes. after all, the 
		circuit had already been shown to work, i was simply building a copy. 
		when that turned up nothing, i looked for dead parts. i replaced both 
		fets (mpf-102) even though both appeared to be behaving properly as far 
		as self biasing went, but no joy there either. finally i swapped both 
		out for j-310s.
and it worked.
the documentation says that mpf-102s will work, but that was not my 
		experience. my mpf-102s are very old; perhaps there are process 
		differences with more current devices. don't know. fortunately i had 
		decided to stock up on j-310s while i could still get them in to-92 
		packages.
spectrum analyzer (1 august 2016)
the spectrum analyzer is controlled by an arduino which also provides 
		the usb connection to a pc or laptop which acts as a display. the 
		arduino also displays spot frequency and amplitude information on a 2 
		line 16 character lcd. my first attempt at wiring the arduino to the lcd 
		went poorly when i discovered i'd actually used a single line lcd.
the second attempt also had issues, once a 2 line lcd finally was 
		delivered. i was just seeing random stuff displayed. at that point i was 
		using what i thought was a proper sketch, but that turned out to not be 
		the case. locating the right sketch did not improve the situation.
i then tried adapting a tutorial "hello world" style sketch which 
		both worked and clued me in to the problem source.


adapting the sketch required changing the definition of which arduino 
		pins were connected to which lcd pins. that got me looking at the 
		drawing i'd been working from. i discovered that the data pin numbers on 
		the lcd had been reversed. easily fixed. on to more wiring and testing.
spectrum analyzer (9 july 2016)
i assembled the nco board. soldering the si570 wasn't as bad as i 
		thought it might be. at least, i don't think it was... i haven't put 
		power on it yet, but i don't see any shorts though there probably is an 
		excess of solder. here's what the board looks like.


the si570 will be controlled by an arduino. setting that up is the 
		next step. i have an arduino uno floating around here somewhere as well 
		as a couple of arduino mini-micro things that were an impulse buy i 
		added onto an ebay order. i haven't done arduino stuff for quite some 
		time so these next steps should be interesting.
one of the questions concerns the proper signal voltage for the si570 
		which runs on 3.3 volts. i don't know if it will tolerate 5 volts on its 
		control inputs, or if my arduinos are 3.3 or 5 volt versions. and then, 
		of course, there are all the issues associated with downloading the 
		current arduino ide along with the necessary libraries, and learning how 
		to use them. i'm basically a hardware guy. i teach myself how to program 
		once every ten years whether i need it or not. i'm getting kind of late 
		in the current cycle.
spectrum analyzer (6 july 2016)
as i started to add components to the nco circuit board, i noticed i 
		had failed to leave room for a resistor and a capacitor. it would have 
		been easy to bodge them in, but since i hadn't soldered anything at that 
		point, i decided to correct the board. so, here we have version 2:


spectrum analyzer (5 july 2016)
i've made the board for the numerically controlled oscillator. it's 
		basically the support structure for the si570 which is a small smd chip 
		possessing almost as much complexity as the rest of the analyzer. it has 
		its own crystal oscillator, an absurdly fast digital clock synthesis 
		engine, a digital interface for the control logic, and an output buffer. 
		it's remarkably small for what it does, and it's likely to be a real 
		challenge to solder to the board.


i added an additional control line to the si570. it has an output 
		enable (oe) input which can be ignored as was done in the original 
		design. i thought the oe pin might be of use later so i included it on 
		the board.
an obvious possible use for the oe pin is to provide control of a 
		tracking generator for the spectrum analyzer. the original design does 
		not include a tg, but there's no reason not to. its addition allows the 
		analyzer to be used as a basic scalar network analyzer. it would require 
		that the arduino sketch be modified to add this functionality, but why 
		not? 
spectrum analyzer (2 july 2016)
the mixer board is now assembled far enough that it can be tested. it 
		lacks the shielding which will be needed to limit noise pick up, but it 
		should be more or less operational without it.


the signal input from the input low pass filter and the local 
		oscillator signal from the si570 numerically controlled oscillator enter 
		through the two sma connectors on the left. they are processed in a mini 
		circuits lab sbl-1 double balanced mixer. the sbl-1 output sees a 
		resistive attenuator which helps provide a stable, broad band load, 
		something dbms really like. then there's a mav-11 amplifier which feeds 
		a vhf band pass filter. the three (more or less) red coils are part of 
		the filter. the filter output feeds a second sbl-1 mixer which down 
		converts the signal to 12 mhz. that goes through a simple diplexer, a 
		post amplifier and another impedance stabilizing attenuator before 
		popping out the right hand sma connector.
i've got one more board to design and fab before putting power to 
		things.
spectrum analyzer (30 june 2016)
i've now got the mixer board engraved and drilled. this board has two 
		rf mixers, two buffer amplifiers and a vhf bandpass filter on it. at ten 
		inches, it's the longest of the spectrum analyzer boards.


there were a couple of minor problems fabricating it, but nothing 
		that a little hand rework couldn't fix. i hadn't set the depth of cut 
		deep enough for a few of operations as i wanted to limit cutting into 
		the bed of the cnc machine. seems i was just a little too conservative, 
		but that's all been taken care of. the next step is to solder the 
		components on it.
spectrum analyzer (27 june 2016)
the resolution filter for the spectrum analyzer requires a group of 
		nine, nominally 12 mhz crystals that are all within 100 hertz of each 
		other. the typical hobby approach to finding these crystals is to buy a 
		bunch of inexpensive crystals and measure them. here's the setup i used.


i built a test oscillator that i could plug a crystal into, and i 
		bought an eight digit frequency counter through ebay. the counter cost 
		something like $12 which is an astonishing deal. it may not be 
		particularly accurate, but it's repeatable and stable enough to allow me 
		to measure differences between the crystals. i bought a bag of 50 
		crystals, measured them, entered the readings into excel, sorted, and 
		selected a group that spanned only a 39 hertz difference.
and here's the assembled resolution filter board.


spectrum analyzer (23 june 2016)
i'm working on the resolution filter circuit board. the resolution 
		filter sets the bandwidth of the signal channel as the analyzer sweeps 
		through the spectrum being investigated. with a narrower  bandwidth 
		you can see finer detail. of course, there's a tradeoff. a narrower 
		bandwidth means a slower scan rate. typically, spectrum analyzers have 
		selectable resolution filters, and this design is no different. this 
		resolution filter is switchable between 300 khz and 1 khz bandwidths.
the center frequency of the filter is 12 mhz, and and an lc design is 
		adequate for a 300 khz bandwidth, though it does take five coupled lc 
		resonators. the inductors are simple coils wound on standard toroids. 
		the caps are standard ceramic parts.
getting a 1 khz bandwidth at 12 mhz requires a higher q than lc 
		resonators can reasonably provide. here we find a good application for 
		crystals. this filter is actually made of three cascaded, three pole 
		filters composed of inexpensive crystals. the connections between the 
		three pole filters is made with simple amplifiers.
while the individual crystals are inexpensive, the resonant 
		frequencies must be within 100 hz of each other. this is tighter than 
		the manufacturing specs of cheap crytals, so you have to buy a lot of 
		them, measure the resonant frequencies of each, and select 
		appropriately.
here's the bare board.


at 7" by 3.25", this is the largest board so far. it was a pain to 
		make. i don't have a good way to hold down the material so the surface 
		is flat. since i'm trying to engrave to a depth of only 0.007", any 
		deviation from flatness causes heartburn. i understand using double 
		stick tape works well, but i don't have any. (note to self: go buy 
		some.)
it'll probably take a while to get this board built up as i've yet to 
		build a test jig for checking out the crystals. i'm also waiting for a 
		few more components to arrive.
spectrum analyzer project (18 june 2016)
i've nearly completed the if amplifier and detector board. i won't 
		solder the detector chip in place until i've tested the rest of the 
		circuitry, and i won't add the shielding until the detector's been 
		added. all in all, the bulk of the construction work is done.
here's the bare board.


there are a few errors in the board, but since i'm using 2n3904 
		transistors in a to-92 package, the errors are effectively cosmetic. if 
		i'd wanted to use surface mount mmbt3904s, i'd have had to re-do the 
		boards. the leads of the larger transistors are long enough to easily 
		bridge the problem areas. the sot-23 package with its microscopic leads 
		would not have worked.
here's what it looks like (mostly) assembled.


spectrum analyzer project (11 june 2016)
the second spectrum analyzer module i've built is a 100 mhz 
		oscillator used to drive the analyzer's second mixer. details of this 
		are over on ashhar farhan's 
		site.
this is a two jfet, crystal controlled oscillator. it gets its own 
		module to prevent it from adversely affecting other parts of the 
		analyzer, as well as to shield it from noise. we need the oscillator 
		output to be pure, because any noise here places a limit on the 
		analyzer's accuracy.
for this second module i used the cnc to do a bit more. in addition 
		to engraving and drilling holes, i also had it cut the board free from 
		the chunk of pc board stock. this is something i had done by hand when 
		making the first module.


like the input filter board, this board also worked out reasonably 
		well. one improvement for next time is adjusting the locations of where 
		the transistor leads are soldered. what i did here is workable, but it 
		could have been better. this version uses real smd resistors and 
		capacitors. i used to-92 transistors with through hole leads (because i 
		had them), so i cut and formed the leads to make "faux" surface mount 
		transistors.


and speaking of real smd parts, these puppies are tiny, and i'm using 
		the 1206 size, the "big ones". this is 'way different from my high 
		school days in the distant past when i built projects with salvaged 
		vacuum tubes and tv power transformers.
spectrum analyzer project (9 june 2016)
it's time to build something different, and yet, the same in a way. 
		like all my projects it's something neat that i don't really need, but 
		it's fun.
this time, a spectrum analyzer.
a spectrum analyzer is a specialized radio receiver that can scan a 
		range of frequencies and tell you how much energy is at a given 
		frequency. i built one years ago, but it's an analog version, and i've 
		been interested in something with computer control and display. i 
		thought about updating my old one, but hadn't gotten around to it. then 
		i found that ashhar farhan, vu2ese,  had already done so. if you're 
		interested in this sort of stuff, i highly recommend you visit his
		
		site. he describes a low cost, easy to build, yet very useful 
		device.
so, this is my implementation of his design. the main differences are 
		that i will be using a cnc machine to make circuit boards, and i will be 
		using more surface mount components.
the first module i've made is the input filter. it's simple, and it's 
		a reality check on my overall approach. (i've never made circuit boards 
		using my cnc machine.) 
and, it seems to be working...
 i used an engraving bit to cut through the copper on one side 
		of a chunk of double-sided pc board stock. the small holes will be used 
		to provide a low impedance connection between the ground on the top and 
		the ground on the bottom of the board.


here's the filter with the components mounted.


each module will eventually be enclosed to provide tight rf 
		shielding, but that will come later after i've had a chance to assure 
		it's all working.
 
my sf novel is now live on amazon (14 april 2016)
my new science fiction novel 
contact, again 
		is now available as an ebook through amazon. here's the description:
she chose the star long before humans knew of 
		it, long before there was a human colony on the star's pretty blue 
		planet, indeed, long before humankind even existed. she came from far 
		away, traveling through the starry darkness at a fraction of the speed 
		of light, chilled to a temperature nearing that of liquid helium. it was 
		the great voyage, the trip every seed made to found a new home, to 
		become the matriarch of a new nest. after millennia of travel she awoke 
		to a world that was everything she might have hoped for. except that 
		someone had found the world before her.
corporal stansurulahri of sakura island 
		search and rescue arrived with her unit at the university's open air 
		test farm to look for a young child who had wandered into the desert. 
		they found her remains. then the situation really deteriorated.
seventy years later toss takahashi started 
		his job at the mothballed alien incursion research station in the high 
		desert, a job he didnât want, working for people who didn't want him. 
		years earlier the station had been the site of furious activity looking 
		for clues of the aliens that had briefly confronted the colony. now the 
		station is silent and largely forgotten, simply an automated monitoring 
		system overseen by indifferent contract employees who know there are no 
		aliens, because anything of interest was turned into radioactive ash 
		long ago.
tonight that will change.

		http://www.amazon.com/dp/b01e82x502 


 
book shipping back to normal (31 march 2016)
the shipping department is back to its normal one-business-day 
		(usually) turnaround. all orders as of today has been shipped.
brfs still available (19 march 2016)
however, i'll be focusing on my daughter's wedding so won't be 
		shipping books until about march 29.
writing milestone (17 february 2016)
i have (finally) completed the manuscript of my science fiction 
		novel, tentatively titled contact, again. 
		it's now undergoing the first of several "final" edits. each pass 
		through, i think "this is the last one", but there's always something 
		else somehow. i'm sure that as beta readers send comments, there'll be 
		more editing.
contact, again describes what 
		happens seventy years after a disastrous initial contact between aliens 
		and humans on the human colony world sakura. 
i wrote contact, again because i 
		wanted a writing challenge. i wanted alien aliens that a reader could 
		nonetheless empathize with, and i wanted a fictional world with 
		constraints, so no ftl travel, no super powerful guns, no easy 
		solutions. i wanted normal people, each with their own agenda. seems to 
		be working.
 
copies of building recreational flight 
		simulators are still available.
brfs still available (23 december 2015)
copies of building recreational flight 
		simulators are still available.
dts revisited: serial interface (27 august 2015)
the issues with the dts board synchronizing with an external 400 hz 
		power source have been laid to rest. the board automatically 
		synchronizes, and in the absence of the 400 hz signal, the board 
		operates using its own internal timing. i've moved on to verifying 
		operation of the board's serial interface.
the board has a chip location for an rs-485 receiver and a three pin 
		header for connecting to its inputs. the receiver is optional. it's 
		useful for long length cabling where electrical noise is a problem. the 
		board also has a two pin header for connecting ttl-level serial data 
		directly to the micro controller. this works well for very short 
		connections where electrical noise has otherwise been contained, for 
		example, an arduino right next to the dts board.


the firmware running on the dts is based on the structure i've used 
		in just about all my earlier micro controller fs projects. it provides a 
		communication function that i expect to work well in this application. 
		(and that expectation is probably why it won't.)
to test that expectation (and the anti-expectation) i've written a 
		simple arduino sketch that loops, setting both dts dacs alternately to 
		the maximum and to zero with a pause after each transition. setting the 
		arduino up was generally straightforward. likely the biggest effort was 
		locating the stone age version usb cable that fits my old arduino.
dts revisited: synchronizing (20 august 2015)
the dts board must be able to synchronize the 400 hz sine waves with 
		an external source. a synchro applies 400 hz power to its rotor winding 
		and the stator voltages must be of the same phase and frequency if the 
		synchro is to operate properly. 
synchronization is a common function in many systems, so doing so 
		here should be no problem; there's no apparent need to re-invent the 
		wheel. however the desire to minimize cost and the choice to use a 
		fairly low power 8 bit micro controller have made the project a bit more 
		challenging. a phase locked loop is a common approach which would work 
		well in other circumstances. while usually implemented with a mixture of 
		analog and digital circuitry, it can be done completely in the digital 
		domain. sadly, that requires a bit more arithmetic horsepower than the 
		dts micro controller can bring to the task.
the lack of resources calls for a more brute force approach. the 
		external timing reference is used to reset the micro controller code to 
		the point at the beginning of the wave form generation process. a second 
		bit of code has the task of adjusting the length of the generated wave 
		form so that it matches the time between consecutive external timing 
		pulses. this is a bit more complicated than it seems, because the 
		external timing reference is certain to have noise on it and you really 
		would prefer to not have the dts outputs bouncing around in response to 
		that noise.
the best approach so far appears to be two fold. for large changes in 
		timing, a fraction of the difference between desired wave form length 
		and actual length is added or subtracted from the count values 
		controlling the micro controller timing. this is fast but to avoid 
		responding to noise, it is designed to stop well before bringing the 
		error to zero. a second bit of code accumulates remaining error, and 
		when it passes a threshold, it increments or decrements the count values 
		and zeros itself out. this is slower than the first process, but is 
		heavily damped and doesn't respond much to noise.
dts revisited: progress (13 august 2015)
the dts board is now producing useful output. i have the bulk of the 
		code running and have placed some test code to exercise the core 
		functionality of the system: making 400 hz sine waves with varying 
		amplitudes.


the top trace is the "modified sine wave" signal as it comes from 
		the dac. the lower trace is what you get after it's been filtered. the 
		fuzziness is due to the long exposure time coupled with the changing 
		amplitude of the signals. the embedded test code ramps the amplitude 
		through its full range.
the next step is adding code to synchronize the output with an 
		external 400 hz timing reference. for the dts to be useful the two 
		outputs must have the same electrical phase as the 400 hz power applied 
		to the synchro rotor winding. of course, it's never quite as easy as it 
		might seem. there is certainly no guarantee that the power will be 
		exactly 400 hz. so the new code must not only synchronize the phase of 
		the outputs, it must also adjust the frequency to match.
as i began to write the code i realized i'd made a less than optimal 
		choice of timers for establishing the core system timing, and hence the 
		frequency of the outputs. i'd used an eight bit counter which meant i'd 
		have fairly large steps in frequency when tracking the input timing 
		reference. a bit of revision happened and i now have new, larger code 
		that uses a 16 bit counter. i've tested it far enough to know that it 
		still produces 400 hz sine waves, but not to the point of knowing it 
		will adjust the frequency. to do that i need to find my signal 
		generator.
dts revisited: theory & progress (6 august 2015)
a key functionality of a digital to synchro interface is the ability 
		to generate a pair of 400 hz, nominally sinusodial, signals with 
		amplitudes we can control. there are any number of ways to do that; 
		however, a design constraint on this project is being low cost. micro 
		controllers are really good at making pulses with flat tops and low cost 
		digital to analog converters are really good at controlling the 
		amplitude of those pulses. if we spent more money on faster dacs and 
		micro controllers we could make a fair sine wave, but it's cheaper to 
		make something with a flat top and filter it.
the top waveform is what we're aiming for. the second waveform, a 
		square wave, is cheap to make, and filtering it is not too difficult, 
		but the third waveform is also pretty easy to make, and it has the 
		advantage of being easier to filter. square waves have a number of 
		frequency components which are multiples of the fundamental frequency. a 
		400hz square wave has the 400 hz fundamental frequency that we want, 
		plus 1200 hz, 2000 hz, 2800 hz and so on. in fact, if the edges of the 
		waveform are really vertical, there will be infinite odd multiples of 
		the fundamental frequency, each with progressively smaller amplitudes.
the neat thing about the third waveform is that while it does have 
		lots of odd multiples of the fundamental frequency, it doesn't have any 
		of the third multiple; there's no 1200 hz! that gives us more room to 
		let the filter work. if we used a square wave we'd need a filter to pass 
		400 hz while suppressing 1200 hz and above. by using the third waveform 
		we need only supply good filter suppression at 2000 hz and above.


this third waveform is referred to as a "modified sine wave" by 
		manufacturers of some types of commercial power inverters. i personally 
		think that's vastly over selling its "virtues", but it is useful. it's 
		possible to add strategically positioned notches to the pulses to remove 
		higher order multiples, but that quickly begins to push the limits of 
		the cheap microcontroller, so i'll go with the "modified sine wave" and 
		see what i get out of the filter.
some far i'm not seeing very much. 
zero, actually.
i just put power on the prototype today. the lack of smoke appeared 
		to be a good sign, but only because i had not found a voltage regulator 
		installed backward. it died quietly, with no fanfare at all. after that, 
		it was finding out that the microcontroller configuration bits had not 
		been set. 
i'm going to halfway blame the config bits on the new ide. i really 
		should not have miswired that voltage regualtor (come on, the thing only 
		has three pins, how hard could that be???), but the old ide set the 
		config bits for me. on the other hand, i did skip the set up wizard, 
		so...
progress. in fits and starts. (but no smoke.)
dts revisited: assembled pc board (30 july 2015)
the hardware is almost completely assembled. i've left off the output 
		amplifiers so i can debug without needing a heat sink. 
the board is mostly surface mount (smd) though there are a number of 
		through hole components. using smd components allowed me to keep the 
		board small; a smaller board is a less expensive board. in some cases i 
		went with the larger through hole components. the four blue caps at the 
		top are an example. i could have used (slightly) smaller smd caps, but i'd 
		bought a bag of a hundred through hole caps a while back so through hole caps it 
		is now. the three black to-92 voltage regulators are through hole as 
		well. they stick up higher but don't really take up much more (if any) 
		board space, and once again, i already had a bunch of them. the white 
		rectangle is an opto isolator which is available only in a through hole package.
and that orangey beige thing just above the blue widget? that's the 
		ceramic resonator for the micro controller. i used a through hole 
		version. i actually have an smd version of the resonator, and the board 
		is designed for it. but as i was assembling the board, i remembered what 
		a pain in the butt soldering the smd version can be. it has a large 
		solderable contact area under the smd package which requires getting the 
		whole thing really hot, something my hakko soldering iron with its teeny 
		weenie smd tip isn't really designed to do. so, i dug a through hole 
		resonator out of the box, bent its leads 90 degrees and soldered it onto 
		the board's smd pads with zero trouble.


that empty 8 pin smd location in the lower left corner is where the 
		rs-485 receiver goes. rs-485 is a differential data transmission method 
		with high noise immunity. if you're sending data over long cables, have 
		multiple systems components with separate power supplies, or have 
		varying or noisy electrical ground, rs-485 can side step a great many 
		mysterious problems. alternatively, you might have a dts or three right 
		next to an arduino (with a ttl output) so you could just run a twisted 
		pair directly to the pic micro controller, which is pretty much what i'm 
		planning as i debug.
of course debugging assumes i have firmware running on the pic which 
		is not yet the case. i've succeeded in importing some old pic code into 
		the current version of mplab x, the microchip ide. this will help, but 
		i've still got a lot to do, and rl is making other demands. perhaps over 
		the next several days or few weeks i'll have enough running to show 
		whether or not this dts approach will work.
dts revisited: pc boards & parts (23 july 2015)
the prototype circuits boards have arrived. they look pretty good.


there's been an almost steady stream of packages arriving over the 
		past few days, so i have most or all of what i need to assemble a 
		working board.


the above is just a sample of what's come. the chip is a dual channel 
		voltage output digital to analog converter. the resistors and capacitors 
		are an example of me getting carried away. rather than taking the time 
		to track down part numbers of only what i need, i ordered assortments 
		through ebay. it's orders of magnitude more than i need, but it's so 
		cheap. and this way i have alternatives if needed as i debug. or maybe 
		the truth is that even though i'm a retired engineer, i still geek out 
		about this stuff.
i also bought an updated pic micro controller programmer. i've used a 
		pickit2 for years, but that's now obsolete. actually, it would work just 
		fine for the pic16f648a that i'm using, but i lost the software for it. 
		i upgraded my computer some time back and the pickit2 software didn't 
		make it past the transition. after making a half hearted effort to find 
		it, i bought the updated pickit3 knowing that it would come with 
		software.


other than being red and having a "3" on the front of it, it looks 
		pretty much like a pickit2, though according to microchip, it can do 
		more. in any case, i got one.
i also had to download the latest version of the microchip 
		development environment. naturally it has changed greatly from the 
		version i used a couple years ago. it also came with a chunk of software 
		to run the pickit3, so of course now i'm wondering if it is backward 
		compatible with the pickit2. hmm??
next steps: break out the solder and magnifiers, and read the 
		microchip mplab x ide docs.
dts revisited (16 july 2015)
okay! i have a circuit board layout for dts 2.0.


the design is at the dangerous stage. everything looks finished, but 
		it almost certainly has mistakes in it. so, tempting as it is to fire it 
		off to a proto fab house, i need to check it again.
dts revisited (9 july 2015)
i now have a more or less complete schematic for a reduced cost 
		digital to synchro converter. i've taken a different approach from my 
		last design. 
a key function of any synchro signal generator is to produce two 
		(nominal) 400hz signals which are electrically in phase with the synchro 
		rotor voltage, but have different amplitudes. variations in these 
		amplitudes encode the synchro rotor position. commercial synchro signal 
		generators use high resolution digital to analog converters along with 
		assorted electronics to control the amplitudes. really accurate, but 
		also really expensive.
an approach that's been used in the hobby community (myself included) 
		is to take a sample of the 400hz power and scale it using devices like 
		multiplying dacs, digital potentiometers, and voltage controlled 
		amplifiers. using a sample of the power that will feed the synchro rotor 
		assures that the generated synchro signals will be electrically in phase 
		with the rotor signal. good performance at less cost.
the approach i'm taking is to generate the 400hz signals from scratch 
		and use firmware to keep them in phase with the rotor power. this shifts 
		some of the hardware complexity into software. here's a block diagram.


eight bits of resolution per dac (digital to analog converter) will 
		give you about one degree resolution on the synchro shaft. this is good 
		enough for a 2 inch engine gauge, but a bit coarse for something like an 
		adi. ten to 12 bits is far better if you're aiming for smooth motion. if 
		you were looking to produce a high quality sine waveform straight out of 
		the dacs you'd be looking at a requirement for something like 16 to 18 
		bits, plus you'd need a micro controller capable of pushing data to the 
		dacs at a fair speed. since the micro controller has other things to do 
		as well, we'd likely need more expensive hardware.
or we could cheat.
we can produce a 400hz non-sine wave and filter it. that lets us use 
		the full resolution of the dacs to control the amplitude and ignore the 
		wave shape. so the trade off is using cheaper hardware at the expense of 
		adding low pass filters to clean up the waveform. and what do these 
		filters cost? about 60 or 70 cents (total for both). a quad opamp costs 
		roughly 50 cents. the resistors and capacitors add a few more cents if 
		you buy the huge ebay assortments.
with the circuit drawn out the next step is to design a circuit 
		board....
dts revisited (2 july 2015)
synchros are used to send mechanical angular data across electrical 
		wires. they are old, old tech. they are also reliable, robust, and 
		accurate. modern day incarnations are widely used in situations 
		requiring reliability, robustness, and accuracy, so not too surprisingly 
		you find them in avionics.
also not too surprising is that flight sim enthusiasts are often 
		interested in synchros, or at least, in the signals that make synchros 
		do their thing. if you can make synchros operate, you can, in many 
		cases, make real aircraft instruments operate in a simulator.
several years ago i designed a digital-to-synchro converter that does 
		just that. it's described in building 
		recreational flight simulators. recently, there has been an 
		uptick in interest levels regarding these sorts of devices, and that has 
		caused me to revisit my old project.
there are any number of ways to generate synchro signals, but cost 
		easily floats to the top of the important criteria list when sorting 
		through options. if you have a lot of real aircraft instruments, you 
		need a lot of dts converters, and even a moderate price becomes 
		unappealing when you need ten or twenty of them.
in the years since designing the original dts, micro processors have 
		become more powerful and less costly. other parts have become less 
		available and more costly. surface mounted components are a pain to work 
		with because they are so small, but can be really cheap, plus can reduce 
		the cost of the circuit board because it can be smaller too. some 
		components are only available in surface mount packages... anyway, big 
		changes. 
so now i find myself revisiting the dts project looking for cheaper 
		ways to build it.
cnc project: electronics bay doors (25 june 2015)
well, they're done. the painting is less than perfect, the simple act 
		of my holding a spray can seems to magically attract dust from miles 
		around. nonetheless, both doors for the electronics bays have been 
		fabricated, painted, and installed.


cnc project: annoying problems (18 june 2015)
the computer problems with the cnc machine have not gone away, but 
		they aren't so large as to prevent me from using the machine. basically, 
		it seems if i run linuxcnc long enough it will die. i think the ultimate 
		cause is the hardware (and associated drivers) it's running on, though 
		i'm by no means sure.
i installed the most current version of linuxcnc which also meant 
		moving from ubuntu to debian. linuxcnc is released in many ways. the 
		easiest for me is to download an iso image that incorporates the 
		operating system with linuxcnc. so, i moved from an operating system 
		that i know very little about to another os i know almost nothing about. 
		however, now i have a very clean installation. i had added various other 
		programs and updates to the earlier installation. now i know that any 
		further issues are not due to random other programs. also debian has 
		been a bit more friendly in providing information when problems do 
		appear.
and appear they did. about 40 minutes into a test run, the latest, 
		greatest linuxcnc died.
linuxcnc expects the computer to be running a real time operating 
		system. linux is supposedly pretty good at emulating that, but it's not 
		perfect. depending on the specific hardware in the system, the drivers 
		may not always play well together when rapid swapping is required. i 
		have some indications that this is the base cause of my problems, but i 
		don't know enough about linuxcnc or debian (or any linux distro for that 
		matter) to be sure.
i decided to use linuxcnc because it's available for free and i had 
		an apparently useful old computer to run it on. my focus was and 
		continues to be learning about cnc milling. now that the cnc machine is 
		working, i'll put a little effort into stabilizing linuxcnc. if that 
		turns into too much of a time sink i'll look at other options, like 
		running a g-code interpreter on an arduino.
so far i haven't run into catastrophic problems with milling tasks in 
		the 15 to 20 minute range. i successfully milled the ventilation slots 
		into the second electronics bay door.


the material is .063" aluminum. depth of cut per pass was .017" so 
		four passes were required. i used a .125" carbide single flute end mill 
		and a feed rate of 20 inches per minute.
cnc project: fans (11 june 2015)
adding fans has made a world of difference. even after a half hour of 
		milling the motor driver heat sinks are only slightly warm to the touch. 
		better yet, the machine no longer appears to be dropping steps. i 
		mounted a pair of fans on a chunk of sheet aluminum hinged at the 
		bottom. this also supports the 12 volt power supply for the fans, as 
		well as, the emergency stop button. this fixed the last known problem.


it also uncovered the next. 
once the machine was able to run for extended periods of time, the 
		computer began to shutdown my session. this appears to have something to 
		do with the idle timeout period and screen saver. at least, setting the 
		idle timeout threshold to two hours seems to have stopped the behavior. 
		the confusing part is that i've had the screen saver pop up on smaller 
		cnc runs and not had a problem, but somewhere around 15 or 20 minutes 
		into a larger run my session would completely disappear.
i've made one 35 minute run with the 2 hour idle timeout setting, and 
		had no problem. so, maybe the issue has been resolved. if not, i'll do a 
		reinstall of linuxcnc. there's a newer version and i probably should 
		move to it anyway.
ahcp text success, almost (4 june 2015)
reducing depth of cut and feed rate made a great difference in the 
		text quality. using a better cutter resulted in further improvements. i 
		can now produce excellent  engraved characters most of the time, 
		though the poor picture quality below doesn't show it.
i experimented with .025" and .0197" carbide end mills and .015" v- 
		groove engraving cutters. each produced credible results under certain 
		conditions. for the size and style i'm looking for the .0197" end mill 
		does best.


the above tests were done on painted acrylic. the tests below were 
		done on unpainted acrylic, which makes the results particularly 
		difficult to photograph. the characters really need to be viewed though 
		a 30x magnifier to judge the quality. when you do that you can see how 
		straight the cuts are and how clean the grooves are.


what i'm working toward is duplicating the type of light plates that 
		were made during the 1950s and 60s. these light plates had mechanically 
		engraved characters which were backfilled with white paint. i've seen 
		videos of the manufacturing process showing workers using a microscope 
		and a very fine gage blunt hypodermic needle to fill the engraved 
		characters with paint. 
sadly, i don't have the microscope or needle to do this. and, i 
		certainly don't have the steady hands for it. fortunately, none of those 
		are strictly necessary if you're willing to be a little messy. i filled 
		the "baro, delta, and radar" text above by slopping paint on and wiping 
		up the excess. and while you can't see it, i did the same on some of the 
		test lines in the upper picture too. 
at this point i thought i was ready to make a complete ahcp panel, so 
		i started cutting .25" acrylic and milling holes. this is a somewhat 
		longer process than engraving text, and i ran up against my current 
		problem: overheating the motor drivers. at least, that's what i think is 
		happening. cutting starts off great, the motor drivers get hot, and the 
		motors begin losing steps.
i'm using a gecko stepping motor driver with heat sinks, but i don't 
		have it oriented properly for good convection airflow. the plan was to 
		have fans mounted on the electronics bay door to push air over the heat 
		sinks. i just never actually got around to making the door, so the 
		fans... well, they're nowhere near the heat sinks. apparently this is 
		something i need to change before i can go much further.
ahcp text fail (28 may 2015)
no pictures. too embarrassing.
i created a more or less complete drawing file for the a-10 armament 
		hud control panel. the text engraving is the most difficult part, so i 
		created a g-code file of the text for use in a test. the idea was to 
		engrave all of the text on a piece of scrap acrylic then carefully scan 
		the results with a magnifier to judge the results.
magnifier not needed!
the waste acrylic melted to the cutter and ruined the engraving. i 
		was lucky to have been able to halt the test before the cutter broke.
i did find that my g-code had errors, the depth of cut was far larger 
		than i wanted, but even so, this is unexpectedly bad.
craft table and torch clamp (21 may 2015)
i've spent the last week or so building a craft table for my wife. 
		she's interested in lampwork beads, and that means she needs a safe 
		place to work with molten glass. since we didn't have any flameproof 
		tables, i've been building one. fortunately it doesn't need to be 
		completely flameproof; sheet metal over a wood surface is 
		apparently good enough.
since she'll be using a small torch, i also built a clamp for 
		fastening the torch securely to the table edge. the clamp that came with 
		the torch did not inspire confidence. i used the cnc machine to cut 
		pieces from 3/4" plywood which i glued and stacked. the clamp fastens to 
		the under side of the table front edge. i embedded t-nuts in the edge 
		just for this purpose, and to allow quick and easily removal.


note that the table is upside down. the wife does not normally make 
		lampwork beads while standing on her head.
and i don't normally cut 3/4" material on the cnc machine, so i 
		hadn't noticed that there is an apparent tilt in the z-axis. i thought i 
		had the z-axis plumb to the work surface. that appears to not be the 
		case.
sigh.
cnc project: yet another test engraving (14 may 2015)
the cnc machine is back together, complete with the exception 
		(predictably) of the door for the electronics bay. i really should take 
		care of the door, but that's too much like work, no fun at all.
instead, i did another engraving test, this time of printed circuit 
		board stock, and (again, predictably) things didn't quite work as 
		expected.
the reason for using pcb stock was to avoid the distraction of paint 
		chipping at the edge of the cut. i simply wanted to see how smooth the 
		cuts would be. i used a v-groove engraving cutter and set the depth of 
		cut to 0.005". what i found was that my clamping method distorted the 
		pcb stock so that the actual depth of cut varied. pcb material probably 
		would be better held by double stick tape. i also ended up with a 
		somewhat ragged edge to the cut. basically. i left one problem behind 
		and added two new ones. i should have just tested on unpainted acrylic.


still, the test wasn't a total loss. i was able to salvage it by 
		removing the ragged bits with a bit of 600 grit sandpaper and oil. what 
		i was particularly interested in was seeing just how straight the 
		nominally straight cuts would be. the machine uses micro stepped 
		stepping motors to move the cutter. the machine has a theoretical 
		resolution of 0.001"; however, stepping motors don't always provide 
		equal size micro steps. what i see in the test cuts are slight 
		variations from a straight line on some of the diagonal cuts. i have to 
		use a 30x loupe to see them, but they are there. i don't think this will 
		be a problem. the smallest characters in the picture are 0.1", and they 
		look pretty good. my main issue is likely to 
		be selecting the proper cutter and speeds for clean cutting.
cnc project: just loose ends now (7 may 2015)
it's back together and it's cutting. i wrote a simple g-code program 
		to mill the surface of the waste board. i started by taking it down 
		0.01", and was surprised when that didn't quite do it. a portion of the 
		center was untouched. another 0.01" took care of that, and now it looks 
		pretty good. i did find that i'd been over conservative in placing the 
		limit switches. i should have had 15" square of cutting area. what i've 
		actually got is a bit under 14.5" square. not really a problem; if i get 
		enthusiastic i'll change it.
what's slightly more pressing is finishing the window installations 
		on the cover. the plastic is cut to size, more or less, and should be 
		glued in place with a bit of silicone rtv. the electronics bay, on the 
		side of the machine, should have a door with fans, vent holes, and an 
		e-stop button.
so, pretty much, it's done. i'm sure i'll add a few more things (like 
		maybe some leds for lighting the work surface), but once these loose 
		ends are cleared up, it's on to using the cnc rather than builidng it.


cnc project: adjusting (30 april 2015)
i have the cnc machine sitting on the cabinet. this has allowed me to 
		level the bed of the machine and pour a layer of epoxy table topping.


the epoxy layer forms a flat surface, much flatter than the plywood 
		it was poured over. this gives me a reference surface for adjusting the 
		rails. i had initially set up the machine using a tape measure and the 
		nominally flat plywood surface. i got marginally okay results. this 
		approach is working much better.
rather than a tape measure, i'm now using a dial indicator. it's a 
		cheap one from harbor freight, but at $15 and with 0.001" resolution, 
		it's hard to beat. i made a stand from leftover bits from building the 
		cnc machine. i also made a bracket that holds onto the steel rail with a 
		magnet.


the indicator doesn't tell be the absolute height of the rail from 
		the machine floor. it shows me the differences in height among various 
		locations along the rails. this will let me tweak the rails so that they 
		are all parallel with the cnc floor.
cnc project: watching paint dry (23 april 2015)
as exciting as it sounds.
it is progress, however. the cabinet is done, with the exception of 
		the door, which will happen when i have the material at acceptable cost. 
		(probably leftovers from an upcoming laundry room cabinet project.) i 
		painted the cnc cabinet with a random, off white acrylic enamel found in 
		a rusty can beneath a few years' accumulation of dust. it's good paint, 
		i just want to give it adequate drying time before i plop the cnc 
		machine on top of it. i don't want the soft paint to glue the cnc 
		machine to the top of the cabinet.
in the meantime, i'm completing the hinged cover for the cnc machine. 
		it provides sound isolation and dust containment. it was mostly done 
		some time ago. i'm doing a bit of prep work before painting it which i 
		expect to be, once again, just as exciting as it sounds.
cnc project: cabinet, etc. (16 april 2015)
not a very productive week. house related projects and jury duty 
		muddied my focus. 
the cabinet is missing doors and paint, but is otherwise complete. i 
		have parts cut for a removable shelf which was to hold the computer 
		monitor; however, i've changed my plans. the shelf was to hook onto a 
		pair of brackets on the side of the cabinet, but i like the otherwise 
		clean lines of the cabinet, i don't want the brackets ruining that when 
		i take the shelf off. yeah, i know. pretty lame for a shop base cabinet 
		built mostly of leftovers that'll never leave the garage, but hey! it's 
		my cabinet and my garage. so, now i'm going with a pair of 1/4"-20 bolts 
		to fasten the shelf to the cabinet side. when i remove the shelf 
		there'll only be a pair of small holes.
cnc project: cabinet (9 april 2015)
the cnc cabinet is very nearly complete. i'm waiting for the glue to 
		dry on the keyboard tray, the last major item to assemble. there are a 
		few smaller things to glue together, but nothing big, just little, time 
		consuming things that i don't have enough clamps to do all at once. i 
		haven't decided what to do about painting. maybe i'll stick with the 
		"build it out of leftovers" and use whatever i find lurking in the 
		corner.
i made the adjustable feet yesterday using  bolts, nuts, 
		washers, and scrap wood.


the hardest part was drawing the hexagon for the pocket to accept the 
		bolt head, which is to say, having the cnc machine made the whole 
		process pretty painless.
cnc project: cabinet (2 april 2015)
the cnc machine is a "table top" unit. building the machine 
		presupposes having a "table" to put the machine on "top" of. 
houston, we have a problem.
i don't have a clear spot large enough for the machine. it's 
		currently sitting on a pallet of boxed books. before that, it was on the 
		table saw. i can just barely operate the cnc machine where it is, but 
		can't get access to put some finishing touches on it. the current 
		position also restricts access to the radial arm saw. so, i've finally 
		taken the time to build a base for the cnc machine.


it will have a pair of side by side drawers, a full width 
		keyboard/mouse tray, and space for the computer. there will be some sort 
		of removable/foldable/??? shelf on the side for the monitor. the whole 
		thing will be supported by adjustable feet for leveling, or castering 
		wheels when the feet are lifted. as much as possible, i'm making it out 
		of left overs from other projects. i did have to buy the wheels, but 
		i'll probably make the adjustable feet.
cnc project: more engraving (26 mar 2015)
 the .021" end mills have apparently not been shipped yet, but a 
		few .0231" end mills did show up so i'm working with them. i created a 
		basic single stroke font and ran it with pretty good results.


this was a quick and dirty font build. in fact, it's not really a 
		font, per se. it's simply a collection of lines and arcs that generate 
		g-code for single stroke characters. the image here makes the stroke 
		weight appear heavier than the actual engraving looks. i'm quite happy 
		with the outcome.
the characters in the top line are about .19" tall. i recall reading 
		somewhere that most labels on military light plates are .1875" tall. 
		(i'm at the point where i need to dig up the real numbers and make 
		sure.)
the characters to the right are multi-stroke, and are clearly too 
		heavy. the test pattern is the same as used before (single stroke).
this engraving was done on an area that was not sanded as well in 
		preparation for painting. i notice a slight tendancy for the paint to 
		fracture at the edge of the grooves. so, although the paint used claims 
		to adhere well to plastic, proper surface preparation still pays off.
cnc project: engraving plastic (19 mar 2015)
one of the goals for the cnc machine is using it to produce light 
		plates. cutting acrylic plastic to shape and making holes are not 
		problems. the real challenge is producing good quality text. i've done  
		several tests to find the best cutters and machine operation to do that.


the bottom line of abcs is the first test. it was cut with a standard 
		v-groove engraving bit with a .015" tip. the test material is acrylic 
		plastic with a coat of white paint covered by two coats of black. i had 
		lightly sanded the plastic under running water to aid in paint adhesion. 
		depth of cut was .015" while feed rate was 30 ipm.
the good news is that the characters look good (not great) from a 
		distance. they are quite legible and the islands of black in the a and b 
		are all fully intact.
the bad news is that there is a significant amount chip re-welding in 
		the grooves, and there are wiggles in edges that should be straight.
chip re-welding is often caused by feed rate being too low and/or 
		cutter speed being too high. wiggles in what should be straight cutter 
		movement can be caused by too high a feed rate given flexibility or 
		looseness in the structure holding the spindle, or crap on the x or y 
		rails, or ???
the middle line is the second test. i created a simple test pattern 
		to look at basic cutter motion, and i reduced the size of the characters 
		to make them more difficult to cut well. i also dropped the feed rate to 
		10 ipm. while cutting, i directed compressed air over the bit to aid 
		clearing the chips from the groove.
the diagonal lines in the test pattern were used to show any issues 
		in the capability of the stepping motors to move the spindle. the 
		configuration of pulleys, timing belts and microstepping in the cnc 
		machine provides a resolution of .001" in the x-axis and y-axis. 
		however, there's no guarantee that actually gets delivered to the 
		spindle. what the diagonal cuts show is quite pleasing. while the cuts 
		are not perfect, i can only see the imperfections by using a 30x 
		magnifier.
the quality of the characters to the right of the test pattern show 
		the benefit of the lower feed rate and the use of compressed air. the 
		character shape is better and the re-weld problem has been substantially 
		reduced.
the third test, the top line, replaced the v-groove engraving tool 
		with an end mill cutter. my expectation that the end mill would clear 
		chips better was shown to be true. unfortunately i only had a .031" end 
		mill so the character stroke width is too great. 
i have some .021" end mills on order, and that will be my next step.
cnc project: inching up the learning curve (12 mar 2015)
reducing the feed rate when milling small holes using an end mill has 
		resolved the out-of-round issue. i've moved on to making more parts, 
		some out of aluminum, and discovering more issues.


the two pieces on the lower right are the lens and spacer for a basic 
		single pointer gauge. the piece at the top right is a circuit board 
		prototype from a few years back that supports an automotive, stepping 
		motor style pointer movement. the board has a surface mount micro 
		controller, an rs-485 transceiver, and a motor driver on the back. the 
		three pieces on the left are the aluminum faceplate, legend deck, and 
		rear plate. these pieces stack together with a few off-the-shelf 
		threaded spacers to form the gauge.


the four screws holding the front together are supposed to be 
		countersunk flat head types, but i didn't have any on hand when i was 
		taking pictures. aaand... there are a few parts missing as well. but, 
		the intent here isn't to make an instrument; it's to discover pitfalls 
		while using the cnc machine to make flight sim parts.
the most recently discovered pitfall is that the cnc machine work 
		surface isn't properly aligned with the cutter horizontal motion.
okay, well, i knew that. i just sort of forgot.
i could have milled the spoil board flat, but i decided to wait until 
		i did a final leveling of the cnc floor. the construction directions 
		call for using epoxy table coating to form a flat surface. i skipped 
		that because of cold weather. alignment of the machine is supposed to be 
		done in reference to this gravity flattened surface. well, that hasn't 
		happened quite yet.
when i cut the aluminum gauge pieces, cuts on one end of the stock 
		cut just barely through, as i'd intended. at the other extreme, cuts 
		were almost there, but still far enough short to be a real pain. i can 
		certainly increase the depth of cut, but that solves only this type of 
		work. 
i also plan of using the cnc to do rotary engraving. depth of cut is 
		critical for good engraving so i'll need to resolve this issue. in the 
		short term, i'll shim the spoil board. when the weather warms a bit 
		more, i'll mix up some epoxy.
cnc project: somewhere on the learning curve (5 mar 2015)


this is maybe not the most awe inspiring thing to be made on a cnc 
		router, but it's a step further along the learning curve. if you look 
		closely you'll notice that the holes are slightly out of round. this is 
		something of a mystery, but i think i have an explanation.
the holes should be 5/32" in diameter. the narrower dimension is 
		pretty close, but the hole is not round.
the software that creates the tool paths generates a downward helical 
		path so that an end mill can carve out a hole larger than its own 
		diameter. one of the parameters that the software uses is a feed rate 
		which it tries to maintain.
the cnc machine is a gantry type. one horizontal axis moves the 
		spindle along a rail bolted to the gantry. the other horizontal axis 
		moves the gantry. that means one axis moves the mass of the spindle 
		while the other moves the mass of the gantry plus the mass of the 
		spindle. the same type of motor and timing belt is used on both.
the cnc machine will cut a large radius curve with no problem; 
		however, cutting a small radius curve at the same feed rate doesn't 
		works as well. the forces needed to move the spindle through a curve go 
		up as the curve gets tighter. the timing belts stretch slightly as the 
		motors accelerate and move the spindle. because the motors are moving 
		different amounts of mass, the amount of stretch on each axis differs. 
		as the curves get tighter and the forces on the belts grow, the 
		difference in stretch becomes significant, and, so the theory goes, 
		holes become increasingly out of round.
a next step is to cut some small holes at lower feed rates and see 
		what happens.
cnc project: software (26 feb 2015)
the cnc hardware is now functional. i'm sure to be tweaking and 
		adjusting, but the machine fundamentally works. i can jog the tool 
		position from the keyboard and clean the fault when i run up against the 
		limit switches. the focus now moves to software.
i'm using linuxcnc as the machine controller. mach 3 was another 
		option, but linuxcnc has the advantage of being free. as long as it does 
		what i need it to do, there's little reason to change. my goals with cnc 
		currently are cutting and engraving plastic, and light machining of 
		aluminum. it looks like linuxcnc can handle that. if my goals change, i 
		may look to other machine controlling options. for the time being i'll 
		invest the time learning linuxcnc.
linuxcnc takes g-code as its input to direct the cnc activity. while 
		it's possible to write g-code by hand, that get real old very fast. the 
		productivity boost from using good cam software is far too valuable to 
		ignore. i'm leaning toward cambam. i might be able to get away with a 
		simple g-code interpreter munching on dwg drawing files, but the more 
		integrated approach offered by cambam has more appeal for me. i like 
		that i can import or create, and edit the drawings then direct the 
		creation of tool paths before generating the g-code.
at this point i have only a cursory understanding of linuxcnc or 
		cambam. i need to change that.
cnc project: motor driver (19 feb 2015)
i'm using a gecko g540 microstepping motor driver. i chose to buy 
		rather than build the electronics because one of my goals with this 
		project was to learn about cnc, and i didn't want to get distracted. 
		buying the g540 let me focus on stuff new to me.
the g540 is a nice compact package which will run fairly well as is, 
		but adding heatsinks is recommended if you plan on pushing the drivers 
		near their limits. the three heat sinks stick on the bottom with 
		thermally conductive adhesive pads.


at this point everything critical in the cnc box is together. i'll 
		eventually finish the top for noise and dust control, but first i'll 
		pull the computer together that will run linuxcnc and control the 
		machine.


i'll also need to add a door with fans over the electronics bay. the 
		bay is not quite big enough to mount the g540 with the heat sinks 
		vertical which is seriously non-optimal for air movement over the heat 
		sink fins. the door will also provide a mounting surface for the 
		emergency stop button.
 
cnc project: clamps & cables (12 feb 2015)
the work piece hold down approach uses aluminum c-channels within the 
		spoil board to hold the heads of 1/4"-20 bolts.


you can use fancy threaded knobs,


or if space is limited, a standard nut will do.


aluminum c-channel is widely available, standard fare. i picked this 
		stuff up through ebay.
wiring is the primary remaining task. i'm making progress, but 
		there's more to it than simply making electrical connections. it's more 
		an issue of cable management.


two of the stepping motors, the spindle motor, and several limit 
		switches are mounted on a moving gantry. the cables connecting them must 
		be supported so they don't get in the way of gantry movement or get hung 
		up on the work piece. this has been somewhat complicated by the fact 
		that the stepping motors have short leads with a molded plug. i suppose 
		i could have cut the plugs off and extended the motor cables, but i 
		chose to use ready made extension cables, and add a few tweaks to 
		support the joined plugs.
a secondary issue is that since the gantry moves, the cables must be 
		rated for continual flexing. standard stranded wire will tolerate 
		flexing while being installed, but will break if flexed enough. 
		unfortunately, the wire i was planning on using to connect the limit 
		switches falls within the "standard stranded" category. i have some 
		microphone cable on order which will work well for this, but until it 
		shows up, i won't be able to complete the wiring.
cnc project (5 feb 2015)
the z axis limit switch has been mounted.


and the power entry entry module has a mounting plate.


wiring is an obvious next step, but i took a detour and have been 
		working on the spoil board and work-piece hold down clamps. the weather 
		warmed up enough to open the garage door and use the table saw, so i 
		took advantage of the opportunity. the spoil board is more than just a 
		chunk of wood under the material you're carving up with the cnc. it has 
		five "c" cross section extrusions embedded in it which can hold the 
		heads of 1/4" bolts used to clamp the work piece. it's a nice 
		improvement over simply using wood screws.
cnc project (29 jan 2015)
i've been nibbling away at the remaining unfinished items of the 
		project. four of the limit switches are in place as is the cable support 
		which is just barely visible behind the gantry. in the side view you can 
		see the power supply and motor driver. there is, however, a notable lack 
		of wiring.




i need to mount the z axis limit switch, make mounting brackets for 
		the motor driver, and do a bit of wiring. rather than just connect a 
		power cord to the power supply, i've decided to use a power entry module 
		with a switch and fuse. i've had a couple in the junk box for some time, 
		but using one will require cutting a slightly larger hole in the back of 
		the box. eventually i'll need a door for the electronics bay, and a fan, 
		and a power supply for the fan, and i'm sure other stuff.
none of this is hard. it's just time consuming and annoying, 
		particularly so given that the project looks to be virtually finished, 
		but really isn't. 
oh, and then there's the spoil board and clamps...
cnc project (22 jan 2015)
some small but nontrivial progress on the cnc project: it's now 
		beginning to look like a cnc machine.


actually, the mechanical structure is 99% complete. i need to 
		fabricate mounting brackets for the limit switches, but it's very nearly 
		ready for wiring the electronics. there's a cover for controlling dust 
		and noise, but i'll get to that later.
writing and still here (11 jan 2015)
rl somehow continues to make its demands. slow progress writing.
still shipping copies of building 
		recreational flight simulators.
writing and cnc (24 july 2014)
still alive, still writing, albeit not very fast or about flight sim.
		
i'm writing science fiction. 
i'm writing a story that takes place on sakura, a colony world 
		several dozen light years from earth. sakura was settled by a robotic 
		ark carrying frozen human genetic material on a very long voyage. no ftl 
		travel in this story; these people are on their own. but that's okay, 
		because they're doing just fine. they've made great progress adapting 
		earth agriculture to sakura's biome, they're well fed, and their 
		population has grown enough to be counted in the millions (just barely). 
		it's true they had a slight hiccup seventy years earlier when some nasty 
		aliens began munching people at an agricultural research station, but 
		three very clean, moderate yield nuclear sterilization devices put a 
		stop to that. now the incident's just an entry in their history books. 
		mostly. 
one of the main characters is named toss. toss is a graduate student, 
		an unhappy, underfunded graduate student. in fact he's so underfunded 
		he's been forced into taking a lonely night job at an all but abandoned 
		military research station on the edge of a nuclear blight, which is his 
		initial reason for being unhappy. 
another main character doesn't have a name, doesn't even have a body 
		you'd recognize. you could look right at her and not know it. yes, 
		"her", because she's a bringer of life (when she feels like it). let's 
		call her "mama".  long ago mama decided to make sakura her home, but 
		when she finally arrived she found others living there. she reached out 
		to these others, but she was not well received. after seventy years 
		she's going to try again. 
you may think this is an obvious setup for one of those clichã©d 
		"don't go into the dark basement" horror stories, but it's not. the 
		basement lights work great. 
this is a story about several reasonably intelligent individuals each 
		trying to do the proper thing, so everything should turn out fineâ¦ 
right? 
progress? well, much further than my earlier efforts at fiction. the 
		story's mapped out and the manuscript's approaching 50,000 words. notes 
		add several thousands more words. call it half way to a first pass. 
 
the cnc project is still alive though real life has conspired to bury 
		it under assorted unidentified stuff in my work area. a bit of 
		excavating and i should be able to resume assembling it.
writing fiction (24 april 2014)
i've been writing fiction on and off for years. haven't managed to 
		finish anything as yet. in part that's because there are so many really 
		neat ideas to write about. i have bits and pieces of six novels, enough 
		words to account for a good size novel, but unfortunately spread across 
		a half dozen separate stories.
i decided to focus my efforts on one story to bring it to a close, 
		which is what i'm doing these days. since the weather is warming up, 
		i'll perhaps also spend some time in my unheated workshop area 
		completing my cnc project, and of course, i'm still shipping copies of
		building recreational flight simulators.
older entries





		it's possible that i'm not as smart as i think i am. (occasionally, i 
		have moments when i know this to be true. fortunately the feeling passes 
		quickly.) although i have tried to make this information as accurate as 
		i can, it is not only possible, but also quite likely, that errors lurk 
		within. i cannot and do not warrant these pages to be error free and 
		correct. further i accept no liability for the use of this information 
		(or misinformation). if, after reading this, you are still interested, 
		please be aware that the contents of this site are protected by 
		copyright (copyright â© 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 
		2010, 2011, 2012, 2013 by john m. powell). nonetheless, you may copy this material 
		subject to these three conditions: (1) the copyright notice is copied 
		and presented along with the material, (2) the copy is used for 
		non-commercial purposes, and (3) the source of the material is properly 
		credited. and of course, you may link to this page.

	





