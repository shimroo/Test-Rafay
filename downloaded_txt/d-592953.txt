



















































bram cohen's journal — livejournal






































































































?

?









































































































































                                    





























































































































































livejournal






find more


communities


rss reader




shop









                                help
                            







                                    search
                                









                                    log in



























log in




                                        join free
                                    

                                        join
                                    







                                          english
                                        
                                        (en)
                                

english (en)

русский (ru)

українська (uk)

français (fr)

português (pt)

español (es)

deutsch (de)

italiano (it)

беларуская (be)













































bramcohen
—














< no suspend reason >









readability




















                    more
                














bramcohen







                                archive
                            



                                photos
                            



                                video
                            





readability






























log in


no account?
create an account








































remember me



                                forgot password
                            




                        log in
                        














log in









qr code

























































no account?

                    create an account
                
by logging in to livejournal using a third-party service you accept livejournal's user agreement








bram cohen

recent entries
archive
friends
profile







50 most recent

previous 50



wed, jan. 4th, 2012, 12:38 am moving

i've moved my blog over to bramcohen.com. see you all there!link leave a comment | 4 commentsthu, may. 19th, 2011, 09:16 am practical cryptography corrected

the book 'practical cryptography' is perfectly good for giving an overview of basic concepts in cryptography, but its immediate practical advice to implementers is not terribly to the point or accurate. here is much more to the point and accurate advice.for a block cipher you should use aes-128. if you don't understand your protocol well enough to know whether there are birthday attacks on your keys, you have bigger issues. (shame on schneier for still trying to revisit the aes design competition by yammering on about twofish.)for an encryption mode, you should always use ctr, and always use a nonce of zero, and never reuse keys.for a hash function, you should use sha-256 until the winner of the sha-3 design competition is announced, and then you should use sha-3.you should always do encryption as a layer outside of authentication.for entropy, you should always do whatever the python os.urandom() call does on the local platform.for a data format, you should use json. (not xml!)for an rsa exponent, you should always use 2. technically that's rabin-williams, and requires slightly different implementation, but that actually works in its favor. rabin-williams has a reduction to factoring, rsa does not.you should never use the same key for both encryption and authentication. if you need both encryption and authentication, you should use two keys. one for encryption, and one for authentication.if you're going to be using rsa, you should learn about encoding for it! this is by far the most historically error-prone part of crypto protocols, and practical cryptography bizarrely doesn't even mention it as an issue.you should not parameterize your protocols! that just creates compatibility problems. if necessary you can parameterize it by having two values, one good for the next twenty years, and one good until the end of time, but key sizes have gotten big enough that skipping that first one should be the default.maybe someday schneier will write a book which i can recommend to people who are getting started in cryptography, but i'm not holding my breath.are you a good programmer? try this coding challenge.link leave a comment | 25 commentssun, apr. 17th, 2011, 06:56 pm git can't be made consistent

this post complains about git lacking eventual consistency. i have a little secret for you: git can't be made to have eventual consistency. everybody seems to think the problem is a technical one, of complexity vs. simplicity of implementation. they're wrong. the problem is semantics. git follows the semantics which you want 99% of the time, at the cost of having some edge cases which it's inherently just plain broken on.when you make a change in git (and mercurial) you're essentially making the following statement:this is the way things are now. forget whatever happened in the past, this is what matters.which is subtly and importantly different from what a lot of people assume it should be:add this patch to the corpus of all changes which have ever been made, and are what defines the most recent version.the example linked above has a lot of extraneous confusing stuff in it. here's an example which cuts through all the crap:  a
 / \
b   b
|
a
in this example, one person changed a files contents from a to b, then back to a, while someone else changed a to b and left it that way. the question is: what to do when the two heads are merged together? the answer deeply depends on the assumed semantics of what the person meant when they reverted back to a. either they meant 'oops i shouldn't have committed this code to this branch' or they meant 'this was a bad change, delete it forever'. in practice people mean the former the vast majority of the time, and its later effects are much more intuitive and predictable. in fact it's generally a good idea to make the separate branch with the change to b at the same time as the reversion to a is done, so further development can be done on that branch before being merged back in later. so the preferred answer is that it should clean merge to b, the way 3 way merge does it.unfortunately, this decision comes at significant cost. the biggest problem is that it inherently gives up on implicit cherry-picking. i came up with some magic merge code which allowed you to cut and paste small sections of code between branches, and the underlying version control system would simply figure out what you were up to and make it all work, but nobody seemed much interested in that functionality, and it unambiguously forced the merge result in this case to be a.a smaller problem, but one which seems to perturb people more, is that there are some massively busted edge cases. the worst one is this:  a
 / \
b   b
|   |
a   aobviously in this case both sides should clean merge to a, but what if people merge like this?  a
 / \
b   b
|\ /|
a x a
|/ \|(the 'x' here isn't a point in history. it's ascii art of two lines crossing over each other.)because of the cases we just went over, they should clean merge to b. what if they are then merged with each other? since both sides are the same, there's only one thing they can merge to: b  a
 / \
b   b
|\ /|
a x a
|/ \|
b   b
 \ /
  b
hey, where'd the a go? everybody reverted their changes from b back to a, and then via the dark magic of merging the b came back out of the ether, and no amount of further merging will get rid of it again!the solution to this problem in practice is don't do that. having multiple branches which are constantly pulling in each others's changes at a slight lag is bad development practice anyway, so people treat their version control system nicely and cross their fingers that the semantic tradeoff they made doesn't ever cause problems.link leave a comment | 28 commentsthu, apr. 14th, 2011, 05:34 pm python wish list

now that the moratorium on python language features is over, i'll put in my thoughts on what new stuff the language could use. i don't have much to suggest, and what i do have to suggest is fairly minor. this is because i'm happy with the language.new on default parametersone of the gotchas in python is that default parameters are reused, so if you say:def spam(eggs = []):then eggs will get set to the same list every time, and modifications will get carried over between calls. this can be hacked like this:def spam(eggs = none):
    if eggs is none:
        eggs = []this works, but is ugly, and prevents passing in none as a value for eggs. it would be better to be able to simply say:def spam(eggs = new []):which should do exactly what you expect.^ on bytesa strange oversight in python3 is that bitwise operators don't work on byte arrays. the ^, & and | operators should work on bytes of equal length, doing exactly what they obviously should. trying to apply them to bytes of unequal length should probably result in an error. it's easy enough to write functions to do these things, but they're slow, and there's only one reasonable semantics for what those operators should do on byte arrays anyway.raw binary conversionmaybe this has been added to the standard library and i just haven't heard about it, but a longstanding annoying missing piece of functionality is simple conversion between ints and big or little endian representations of them as bytes. again, this is easy enough to implement, but is slow when done in python and is hardly an obscure piece of functionality.dictionary scramblingthis might be an obscure piece of functionality, but i'd like the ability to change the hashing function which dictionaries use, because i write tests which depend on my code behaving the same way every time it's run, and i'd like to be able to test that it doesn't have any dependencies on the order of iterating over dictionary keys or values.link leave a comment | 23 commentstue, sep. 14th, 2010, 10:55 am censorship resistance attacks and counterattacks

related to the recent haystack hubbub, here's a basic overview of censorship resistance tools, of which haystack was an example (unfortunately a fairly broken one).for the  purposes of these notes, by 'censorship resistance tools', i'll be  referring to ones for browsing the web from inside of countrywide  firewalls which are trying to limit access, such as freegate, ultrasurf, and the like. obviously there are other forms of censorship and resistance  to it, but that's what's being discussed for now.the usage pattern for censorship resistance tools goes something like this:system sends information about proxies to usersusers use proxies to browse the web freelyfirewall operator finds out ips of proxies and blocks them by  ipgo back to step 1it's an ongoing cat and mouse game involving cycling through a lot of ips and a lot of careful secrecy.an attacker might also, instead of outright blocking an ip, artificially create a very high packet loss rate  going to it, which might make users conclude that the anti-censorship  system doesn't work very well and give up on it. that could be countered  by trying to guess when there's an artificially high packet loss rate,  but that's potentially an insidious game - the attacker might, for  example, determine where the machines developers use for testing are,  and not artificially drop packets to those.there's considerable concern about the threat model of the censor finding out which users are using the proxies and doing  bad things to them. i'll just cut to the chase on that issue - the  resistance to attacks of that form is inherently weak. the censor can  simply record the destinations of all  outgoing connections, and retroactively correlate them to discovered  proxies, unveiling the ip of a user. this is a vicious attack which  can't be completely eliminated. possession of the tool might also be  incriminating.high level methods of avoiding detection include:have lots of cover traffic - that is, lots of users, so attacking them  all is impractical. this is probably the ultimate solution, because a  tool which doesn't have enough users to provide cover traffic isn't  successful, and a successful tool implicitly provides lots of cover  traffic.have user use shared/ephemeral ips. this is a low tech approach having little to do with the protocol.use no software, that is, http/https proxies. this makes the user have  no recurring evidence, but can expose what the user is doing to  snooping.use ephemeral or easy to dispose of software. this is a good idea, but the techiques for doing it are tricky or rely on  physical security.run proxies on web sites running other  services which are also used by users within the target area. this is a  great approach, but requires cooperation of a web site which has the  willingness to be (or confidence it won't be) blocked.use  actual skype connections. this is an interesting approach which has the  benefit of lots of cover traffic, but suffers from limitations on the  bandwidth skype intermediaries will provide, and could be attacked by an  attacker running lots of high quality skype nodes and noticing the very  suspicious traffic.dial down the level of paranoia. in the end a certain amount of this may be necessary.censors have multiple ways of finding ip addresses which are used by the anti-censorship system:use the same methods as the software. this is a very insidious  approach, putting the anti-censorship system in a position of trying to  simultaneously publish new ips and  keep their distribution limited.correlation attacks on  existing known ips. this is also a very insidious attack - the attacker  simply takes ips which are known to use the anti-censorship tool, and  looks for otherwise unpopular ips which a lot of those are connecting  to. probing - an attacker can connect to suspected proxies and  try to get them to give themselves away by doing a handshake. depending  on the type of proxy connection used, this can be very effective,  sometimes in combination with reverse dns.trick proxy users  into hitting a web site and observe what ips the connections come from,  observing the ips of the proxies directly.deep packet inspection and traffic pattern analysis, including packet sizes, connection number  and duration, etc. these can be extremely effective, but can be  extremely expensive for an anti-anti-censor to set up. connection number  and duration are probably the most telling pieces of  information, and the cheapest to implement, as well as the easiest for  the anti-censor to manipulate.there are several ways for an anti-censor to make it hard to find their ips:use lots of ips. if each user can be given their own dedicated ip then  the system is extremely hard to attack. problem is, this approach  requires procument of lots of ips, which isn't easy.limit how many users info is given to. this is a good idea, but difficult to do.encrypt info with not widely circulated keys. this moves the problem to key distribution and management, which is a good idea.distribute fake ips including stuff the censor would regret blocking. i think this is kind of fun.have clients only connect to one ip. this is a very good idea! should be followed as closely as possible.make traffic go through more than one hop, masking the ips of proxies to connections on the outgoing side. while clearly  a good idea, this doubles the bandwidth used, which kind of sucks.rely on deep packet inspection being hard. less unreasonable than you  might imagine - deep packet inspection systems are very expensive and  take a while to upgrade, and intelligence on what the deep packet  inspection can do is sometimes available.steganographically  encode connections to proxies - this obviously must be done, although it  isn't obvious what the best approach is.there are several things proxy connections could be made to look like -http - while there's plenty of cover traffic for http, deep packet  inspection and probing can probably be very effective in recognizing  patterns in it, making it not very appealing for stego connectionsssl/tls - there's a decent amount of cover traffic for tls connections  in the form of https, and using the https port is probably a good  approach, especially since the traffic patterns are going to  match http anyway, since that's what it is. there's some concern that  man in the middle attacks might be launched, although those are  difficult, and an attacker might get suspicious if reverse dns doesn't  return believable information. still, this may be the best option, and  is certainly the simplest to implement.bittorrent - bittorrent  has lots of cover traffic, and the obfuscated version of the protocol  looks fairly generic, although its traffic patterns are very distinctive  and wouldn't be closely matched by anti-censorship web browsing.utp - utp is a udp-based tcp-alike originally designed for bittorrent.  it has the advantage that some deep packet inspection systems just plain  don't support udp, and it's easy to use as a swap-in replacement for  tcp. it has some of the same cover traffic problems as regular  bittorrent.ssh - while tunneling over ssh is not uncommon,  making using ssh connections no more suspicious than  having long-lived high-throughput ssh connections is to begin with,  that's already a high level of suspiciousness, so this probably isn't a  great approach.skype - skype traffic has good cover traffic, but is a very poor match in terms of usage patterns.noise - a tcp connection which has just plain garbage going over it is a  surprisingly reasonable approach. lots of weird miscellaneous things on  the internet are hard to classify, and obfuscated bittorrent provides a  decent amount of cover.there are several methods a censorship resistance system can use to get ip addresses out -offline - this is the most secure way, but it's very slow and expensivespam cannon - a spam blast can be sent out containing addresses of  proxies. this works but is moderately slow and moderately expensive.  it's also potentially very easy to intercept.to existing users  - client software can be sent ips of failback  proxies when it makes a proxy connection. this works and is fast, but  has the problem that an attacker can run client software and use it to  find proxies as well.via web stego - this technique hasn't  been used yet, but ips could be encoded steganographically in real web  traffic. given the tremendous popularity of censorship resistance tools  in the west, it might be possible to enlist the help of lots of web  sites, and make it essentially impossible to filter them all out. i'm  working on technology for this.link leave a comment | 4 commentssun, apr. 4th, 2010, 09:06 pm rebasing

rebasing is a controversial feature, with some people declaring it the greatest thing since sliced bread and others declaring it the spawn of the devil (okay i exaggerate, but you get the idea). i will now set the record straight by explaining the truth.rebase is a good feature.but it's hard to implement properly on a version control system using the standard hg/git architecture.there are a number of problems with the standard architecture, but the one important for rebasing is that it treats data like a roach motel - changes can get in, but they can't get out. rebasing is fundamentally about removing some changes in a controlled way, and the closest you can get is to rewrite some history which never made it off the local machine and pretend it never happened.i'll now describe an architecture which supports rebasing very well. whether similar techniques can be used to add rebasing to the standard architecture will have to be left for another day.first, we need a concept of a branch. a branch is a snapshot of the codebase which changes over time. for rebasing to work well, there needs to be a very strong notion of branches, and the simplest way to get that is to have a single centralized repository with a list of branches whose values change over time and whose old values are remembered. to have relationships between branches, we dispense completely with the complex notion of history which hash-based architectures have, and introduce a concept of 'parent'. each version of each branch has a parent specified, although it could be null. a version of a branch represents two things simultaneously:(1) a snapshot of the codebase(2) a patch off of its parentindividual branches are modified with cvs/svn style update/commit.rebasing is now straightforward. you take a diff from the parent to the current snapshot, and apply that to the new parent. this can be done for any potential parent, including the latest version of the branch which the current parent is from, the latest version of another branch, and even older versions of other branches or the current parent. any reparenting will propagate to all child branches, and changing the parent back will re-propagate nicely as well. this approach allows you to nicely specify what goes where, without having that roach motel feel of code committing.there would be a number of practical benefits to this architecture beyond allowing nice rebasing, although writing a new version control system from scratch today seems like an extreme approach. in the future i'll comment about the possibility of using parents in hg/git, after i've given some thought to it.link leave a comment | 2 commentstue, mar. 30th, 2010, 11:10 am patience diff advantages

there's no coherent explanation of what the advantages of patience diff are, so i'll explain now.  first, a quick overview of how patience diff works - match the first lines of both if they're identical, then match the second, third, etc. until a pair doesn't match. match the last lines of both if they're identical, then match the next to last, second to last, etc. until a pair doesn't match. find all lines which occur exactly once on both sides, then do longest common subsequence on those lines, matching them up. do steps 1-2 on each section between matched lines i've previously described it with the ordering a bit different and a recursive step at the end, but this ordering always gives the same result and performs much better, and the performance hit of doing the recursion isn't worth it, because it rarely if ever finds any more matches, and even when it does it isn't clear whether the extra matches produce a functionally superior diff.  a much more detailed and more graphical explanation is here. a side by side of how that particular diff gets mangled by standard diff algorithms is here. this is the example which motivated patience diff in the first place. if you make extensive changes to a file and remove a function from the end of it and add a function to the beginning, there will be a tendency for an lcs based diff algorithm to match up all of the curly brackets instead of the functions, so if it's matching f1 f2 f3 to f4 f1 f2 instead of viewing f4 as new and f3 as deleted, it will match the curly brackets of f1 to f4, f2 to f1, and f3 to f2. the result is every bit as gross and useless as it sounds, and can easily force a merge conflict in cases which could have been resolved completely cleanly. this has a particularly strong tendency to happen if you put curly brackets on lines by themselves or are religious about putting curly brackets around single-line blocks even though it isn't technically necessary or even if you just put lots of blank lines between your functions.another advantage of patience diff is that it frequently doesn't match lines which just plain shouldn't match. for example, if you've completely rewritten a section of code it shouldn't match up the blank lines in each version, as this example shows.  finally, there's this example:  


 void func1() {
     x += 1
 }

+void functhreehalves() {
+    x += 1.5
+}
+
 void func2() {
     x += 2
 }
which is straightforward and obvious, but frequently diff algorithms will interpret it like this:  


 void func1() {
     x += 1
+}
+
+void functhreehalves() {
+    x += 1.5
 }
 
 void func2() {
     x += 2
 }
while technically that works, it's obviously inferior and is a bit of a pet peeve of mine. in principle one could tweak an lcs-based diff to always do the right thing here, but the algorithmic complexity of lcs make implementations of it essentially unmaintainable. that's another another advantage of patience diff - it's simple and understandable that it can be modified and extended reasonably, and why it performs correctly in all these examples can be easily analyzed.link leave a comment | 10 commentssat, mar. 6th, 2010, 03:42 am enterprise chatroulette

chatroulette is an interesting concept. on the plus side, it reliably provides people to talk to (especially if you're a hot babe), and leads to some actual conversations. on the downside, it has too many (literal) wankers, and feels lonely and disconnected while at the same time feeling like it's always just about to give you some real social interaction in the same way irc does. i don't feel myself getting sucked in, but then i stopped feeling the allure of irc a few years ago.what the world needs is a service which is to chatroulette what yammer is to twitter - the same service, but only for people who have accounts on the same domain. that would allow it to be un-anonymized, since it could display the user's login, and solve the wankers problem, because hr and a lack of anonymity takes care of that. for companies above some size, it would be a great way for people to get the sort of random interaction with coworkers that they normally do in the office while working remotely. it would also probably have an easy upsell to an expensive premium service for any company which started using it a lot, even if they didn't mean to.link leave a comment | 3 commentstue, mar. 2nd, 2010, 07:04 am a new card game

i came up with a new card game the other day. it's been play-tested a bunch, and is a lot of fun.the rules:there are two players. a standard poker deck is shuffled, and sixteen cards are dealt out face up, eight to each player. both players get to stare at the cards for a while.each player then gathers up their eight cards and sets aside four of the eight cards for the other player. they then exchange the cards they've set aside for each other. each player then forms the best poker hand they can with any five of the eight cards in their hand, and the one with the better hand wins.that's the entirety of the rules. what makes play interesting is that if you can guess what cards your opponent will keep there's almost always a set of cards you can set aside which will make you win.link leave a comment | 9 commentsthu, feb. 4th, 2010, 11:42 am freemium results in terrible games

game designers in general think of themselves as performing a valuable service for humanity. aside from simply entertaining, they have the goal of making their users smarter, more disciplined, and all around better than they were before playing. in large part they can succeed in doing this. unfortunately the freemium business model doesn't encourage game mechanics which enhance the user's cognitive skills. in fact in directly fights against them.freemium at first blush doesn't seem like a bad idea. players get to try out a game for free, and generally can keep playing for free, but if they're really into then they can pay more for some game extra. this results in cheap games, which make money by servicing their most die-hard fans, with continuous development and, above all, more games. on the surface this sounds like a huge improvement over the flat fee model of trying to sucker as many people as possible into buying a game they only play a few times. the problem comes in with the psychology of players, and it's one rooted deeply in the human psyche which i don't have any good solutions to.there are essentially two kinds of game players - those who view achievement at a game as validation of their skills, commitment, and endurance, and those who see game achievement as an end in and of itself. the first kind will not on principle ever pay any money to get a leg up in a game, because that would permanently cheapen whatever success they might later have. it would be, to use a vulgar term, cheating. players who are just interested in progressing, on the other hand, are perfectly happy to do that, and hence are much easier to monetize - just offer them in-game gold for a few real bucks, and on a day when they're feeling frustrated, they'll happily fork it over.the people who design games, and most of the hard-core gamers, are from the skill camp, and instinctively fight the pay to cheat model, sometimes to a ludicrous degree. when ultima online first experienced a large market for in-game items, a phenomenon which had never been seen before, the designers banned the practice of selling items and with to great lengths to stamp out the aftermarket, rather than simply selling in-game items themselves, which would have resulting in them making a lot more money and their players being a lot happier. i personally was very excited when the game bloons tower defense 4 came out, because i'd made it through all the levels of bloons tower defense 3 and greatly enjoyed them. i happily played through most of the levels of 4 on the hardest setting, until i got to the fifth one. that level is so ridiculously difficult that it's clearly just there to get people to pay for power-ups, a form of monetization which simply wasn't there for 3. after banging my head against it for a while, i simply stopped playing. the whole franchise feels tainted to me now, a cheap form of grabbing money rather than a legitimate intellectual pursuit. i realize how silly this is, especially for a game whose pinnacle of weaponry is a super monkey storm, but it's fundamental to my motivation for game playing - if the reward for succeeding has lost it's meaning, then i don't get a positive pavlovian response to it, and i lose my interest.once a game starts to do freemium monetization, the natural tendency is to simply abandon aspects of gameplay which require greater cognitive skills altogether. the people who are attracted to such things will on principle never pay any money, and the ones who remain - the ones who really just care about getting ahead in the game by any means, will find anything which absolutely requires developing skills overly frustrating, and will likely just get scared off by it. gameplay descends into repeatedly clicking next, with enough cute animations and just enough having to move around of the mouse between clicks to keep the user entertained, and the monetization scheme is that if you pay a buck you can skip ahead a few thousand clicks.i don't have a good solution to this problem. freemium is a much more compelling games business model than anything else anybody's come up with, and absent any real alternative, the phenomenon of dumbing down of gameplay will continue.link leave a comment | 11 commentssat, jan. 30th, 2010, 12:04 am freenode sucks

i logged into freenode, which i haven't logged into in a while, to help stop some trolling on #bittorrent. i couldn't identify as my nick any more, so i went to ask for help... <mquin> when did you register it? <bramm> uh, circa 2000 <mquin> the current registration is a little over 6 months old - if you did register it in 2000 it must have expired since <bramm> so someone just stole my nick? <bramm> since when does this thing expire registrations? <bramm> i'm pretty sure i've logged in within the last year <bramm> given that i've always had this nick, and that there are only two people named bram which are recognizable names in open source, and that my name is one of the most well known in open source, i'd like my nick back :-p <mquin> nicks are considered expired after 60 days of inactivity, after which they can be dropped either on request or when we ocassionally clean up the services database <bramm> also, there's a problem that i'm an op on a channel, and need to give access in it to other people <bramm> that policy is completely retarded <bramm> the #bittorrent channel is having a problem with trolls, and we need to get rid of them, and thanks to that lamebrained policy there's currently noone with sufficient ops privileges in the channel to do anything about it <mquin> i'm sorry you feel that way, it's not really reasonable for us to keep nickname registrations perpetually when they are not being used <bramm> get real. i've logged in within the last year, getting rid of them after six months is nuts <bramm> if nobody does anything about this i'm going to go public about it, freenode does not want the publicity of me being pissed off <bramm> er, after 60 days i meant, i've never heard of nick expiration on such a short time scale, from any site <bramm> i can easily prove who i am. i'm the well-known author of an important project and need my nick back to stop trolling in the project channel, is there anything which can be done about this or do i have to make a stink? <mquin> handing the nick back to you, even if i were able to do that, would not restore any channel access you had when you held the registration <mquin> channel access flags are dropped along with the account <bramm> well how can we get someone to have ops on the channel? <mquin> if you are an offical representative of the bittorrent project you can assert that by filing a group registration, which would allow you to reclaim #bittorrent <bramm> and how can i do that? <mquin> http://freenode.net/group_registration.shtml <mquin> you may also wish to talk to the current channel registrant - he can add additional users to the access list at this point <mquin> oh, my mistake, it's been held <bramm> what do you mean held? <bramm> maybe you missed that part about me being the channel registrant <bramm> and my nick being stolen <mquin> yes, i misread something i was looking at - my mistake <mquin> to avoid primary namespace (single-#) channels being lost in sitations such as this we transfer them to staff control in the event of the founder's nick being dropped <mquin> it makes it fairly straightforward to reassign them when there is a group registration rather than having them appear to be available for re-registration by anyone <bramm> i have never, in my entire life, heard of a registration expiration process which was this aggresive, or this cavalier about damaging existing relationships <mquin> the 60 days figure is just a minimum - we normally allow more grace (typically 1 week per year) for long standing registraions when processing drops by hand <bramm> you say that as if adding a few weeks to the end would make the time frame reasonable <mquin> we don't feel it is reasonable to hold nickname registrations perpetually if they are not being used <bramm> i'm not asking for perpetually <bramm> just something vaguely reasonable <bramm> and i hope you realize that you just completely pissed off one of the most well known and respected people in the whole open source community <mquin> i'm sorry you are upset <bramm> i'm just going to pretend you're a robot and not blow my stack at you <bramm> but it's requiring effort <mquin> what do you expect me to do? i can't very well return a nick to you that has been in use by someone else for well over 6 months. <bramm> well maybe the policies could have kept that person from taking over the nick, seeing as how i was using it for nine years prior to that <mquin> had we known at the time that you were planning to be away from the network for an extended period of time we could have arranged for it to be held for you <mquin> i know it's unfortunate to lose a long-standing registration, but we do have to have some limit on what we consider a reasonable activity level <bramm> i was never informed of there being any such policy. i was never informed via email than my nick was about to expire. any minimal checking of expirations being done by hand, which you say it is, would have indicated that my nick should absolutely not have been expired <mquin> unfortuantely it's difficult to verify which steps were or were not taken this long after the event[update] well now that i've managed to get called an asshole (hi, hackernews commenters who registered five minutes ago!) here are my calmer thoughtsthe reason i posted the log verbatim, me being pissed off and all, is that i wanted to make very clear that i was accurately representing official freenode policy, and that requesting help through support leads nowhere. my gripe is with freenode policy, which is asinine, not with the particular person i spoke to, who was merely being useless and patronizing.the reason i got pissed wasn't because of the nick loss, which i find mildly annoying, but because channel ops got blown away, causing me to have to deal with this bullshit instead of just giving ops to someone else.yes i can be blunt. if you value the superficial affectation of politeness over the essential point of what someone is saying, you can shove it. i don't appreciate people saying that i'm this way because of asperger's, it just causes other people to whine that they're being oppressed because they can't criticize me. the whole line of argument is stupid. people are free to criticize me for not being polite, and i'm free to respond that they're being petty and superficial.the whole 'it's free so you can't complain' argument is bullshit. there are plenty of free things which are of negative value to society because they suck up or distract resources which could be working on a much better alternative. i've provided lots of support for free stuff myself, both via employees and directly, and never have i claimed that a problem won't be fixed because the person airing a legitimate gripe hasn't gone through arbitrary bureaucratic processes, or that the person complaining should implement it themselves because they're a programmer, or refused to acknowledge that some pain a user experienced through no fault of their own really was unfortunate. and i always prioritize up users who matter and problems which need immediate fixing. that's the way you run things if you actually care about providing a valuable service.as far as whether my ops problem might get resolved, whether i'd utterly cursed out the guy from support or had the humility of a saint, it probably wouldn't get handled regardless.[update 2] some commenters don't seem to understand that freenode policy, in fact freenode's whole foundation for legitimacy, is that project leaders are entitled to control their channels. i am in fact a project leader with a long established channel, and in the time that site op spent pedantically repeating rules and procedures he could have verified who i was and fixed the situation, which, say what you will about lilo, is something he actually would do. i was not making any claim to importance which i don't unambiguously have, and my message to other programmers considering using public servers is that oftc is down the hall and to the left.link leave a comment | 77 commentsmon, nov. 23rd, 2009, 03:22 pm threading in web forums

threading in web forums isn't hard to get right, but it continues to be done right approximately nowhere. in the interests of helping to improve the situation, i will now explain the right way to do things.when returning to a web forum, what should be displayed are either all posts which are either new, or which are immediate ancestors to a new post. the non-new posts should be displayed grayed out, since they're there for context, to avoid the annoying practice of people having to manually edit quoting in improperly threaded systems.posts should be displayed properly threaded, with indenting used to indicate responses. but the standard simple way of indenting each response one level more isn't quite right, because it leads to way too much indenting. what should happen is that if there is more than one response to a post currently displayed then the responses get extra indentation, but if there's only one displayed then it gets the same level, with a graphic included to indicate that it's a response rather than a separate post. note that this only takes into account posts which are currently displayed. not currently displayed posts are irrelevant and shouldn't affect formatting.there should of course be indicators and expanders for ancestors and undisplayed responses to displayed posts, and those should change the formatting of everything appropriately when hit.if someone views a thread which has no new posts, they should simply be shown the entire thread.there, that wasn't so complicated. now please get it right!link leave a comment | 6 commentsfri, nov. 13th, 2009, 10:08 pm comments on go

here are my preliminary thoughts on the go programming language. the most interesting feature for me personally is the built-in threading. aside from its superb support for multi-core, it's just plain a good set of ways of doing networking. the lack of a decent built-in networking library (and generally coordination library) in python has been a thorn in my side just about forever. in particular the promotion of queues to being one of the few built-in primitives with their own special syntax encourages good threading practice and is clearly warranted. even such a simple command as 'wait until either the ui thread or the networking thread comes up with something' is a source of ongoing pain in most languages, but is built into go as a core concept using select.go seems to finally get the static typing problem solved. its := operator is a reasonable middle point between c++'s ludicrous verbosity and ml's excessive magic. types being structural is also a huge win. there's no end of stupid architectural haggling over what module a base type sits in and who owns it, and the answer 'nowhere' completely gets rid of that problem. it seems to me that there are deep subtle problems with such declarations - for example, how does it statically check that the parameters accepted by methods of a type you're receiving are compatible with what you want to pass them? but maybe i just haven't thought about it enough. it's too bad that go doesn't currently have generics. i for one won't start any new project in it until it reaches that level of maturity.go's lack of exception handling is a real problem, and another thing i'm blocking on to do real development in it. my own preferred method for adding it would be that if you call a function which has multiple return values and you don't handle one of them, it defaults to shorting to the same return of the caller, although some people might complain about that being too much like java's 'throws'. that said, i've gotten so used to debugging by stack trace that i'd be loathe to not have stack building built into the language in some form, and in fact i've gotten really attached to a tricked out logging tool i wrote which can decorate any object and automatically logs a full stack trace of every assignment which is made to the object and allows you to print them all out at once. but perhaps such trickery is really the domain of highly dynamic languages, and not appropriate for something as low level and performance oriented as go.the primitives in go are quite good. all languages should have special maps and lists built in. i think it actually doesn't go far enough with giving them special status, and should have python-style special syntax for maps. the curly brackets could be freed up by simply eliminating their current usage and making formatting have syntax. it's more than a little bit absurd that the language designers themselves have a setup where a utility standardizes the formatting of their own code every time they commit, but they still maintain the nominal free-form nature of the language. really guys, i know you were traumatized by fortran's original awful enforced formatting, but that was a long time ago and it's time to let go.that said, the primitives are given too much special status in other ways - they're the only things which have type parameterization, making it impossible to even implement their interfaces yourself, and worse, they're the only things which are call by reference. the call by reference thing worries me a lot. i really, really don't want go to become the reference/pointer mix hell which c++ has become, but it's already headed in that direction. it really shouldn't matter that much - things which are passed are either an address or a copy, and the reference/pointer distinction really just has to do with what's the default (okay, so typically references don't let you overwrite either, but that's not a fundamental property). i for one strongly prefer the default be an address, and clearly when push comes to shove go's designers do too, but more important than which way it is is that it should be consistent. already transitioning to something consistent might require rewriting huge amounts of code, and it's getting worse, so fixing this problem might have to happen soon or never, and i'm afraid that it might already be never.go's speed of compilation is very nice, although i'm afraid i view that not so much as a strength of go but as an awfulness of c++. why c++ continues to take forever to compile even on machines many orders of magnitude faster than the first ones i ever used it on has long been a mystery to me. i hope the answer is simply that it's a language which wasn't designed with ease of parsing in mind, and has a whole layer of preprocessing on top of it which is horribly abused.it's interesting that go is going the garbage-collected route. if such a low-level language as go can get away with that (and, truth be known, their preferred garbage collector isn't really integrated yet, so it's a little early to call it) then we may never see another non-garbage-collected language ever again.i despise the use of initial capital letters to specify that something is public. maybe if i used it for a while i'd learn to not hate it, but for now i hate it. does chinese even have uppercase?it's entirely possible that after using go for a while something else would really start to gnaw at me about it, but it generally has a good smell, so hopefully not.if you've read this far, you should follow me on twitter.link leave a comment | 7 commentsmon, oct. 26th, 2009, 10:02 am dual rings is on the market

this is my 'dual rings' puzzle, the result of a bizarre collaboration between myself and oskar where i came up with a completely abstract puzzle and he came up with an unexpected mechanism for it. it's going on the market produced by hanayama now, and there are a few copies you can buy immediately (see video info for details).link leave a comment | 4 commentsmon, oct. 19th, 2009, 12:55 pm google suggests life's most important questions

thanks to google search suggestions, here's the list of life's most pressing existential questions:how can...how can you tell if a guy likes you?how can you tell if a girl is a virgin?how can i make my hair grow faster?how can you tell if a girl likes you?how can you tell if you're pregnant?how can i get pregnant?how can i keep from singing lyrics?how can you tell if someone is lying?how can i lose weight fast?how can i keep from singing?am i...am i pregnant?am i fat?am i in love?am i overweight?am i depressed?am i having a boy or girl?am i an alcoholic?am i bipolar?how long...how long does implantation bleeding last?how long does it take to get a passport?how long does alcohol stay in your system?how long does it take to get pregnant?how long does sperm live?why do...why do men have nipples?why do dogs eat grass?why do cats purr?why do dogs eat poop?why do men cheat?why do we dream?why do we yawn?why do mosquito bites itch?why do cats knead?why do dogs lick people?when can...when can you get pregnant?when can i take a pregnancy test?when can you find out the gender of the baby?when can you take a pregnancy test?when can you feel the baby move?when can i get pregnant?when can you hear a baby's heartbeat?when can you tell the gender of a baby?when can babies eat eggs?when can i take a home pregnancy test?when will...when will i die?when will the world end?when will i get married?when will windows 7 be released?when will xbox live be back up?when will iphone 3.0 be released?when will the recession end?can someone...can someone tell if you are looking at their facebook page?can someone get pregnant during their period?can someone spy on my computer?can someone tell if you look at their myspace page?can someone be allergic to water?can someone die from a broken heart?can someone find out my ip address?can someone see if i looked at their profile on facebook?can someone track my ip address?can someone tell if you searched them on facebook?can you...can you run it?can you get pregnant on your period?can you duet?can you feel the love tonight lyrics?can you be pregnant and still have a period?can you get pregnant right after your period?can you get pregnant right before your period?can you get pregnant from being fingered?can you have your period and still be pregnant?can you get pregnant if he pulls out?the less existential prefixes have a lot of questions about michael jackson.how come michael jackson is white?did michael jackson die?did michael jackson bleach his skin?did michael jackson write his own songs?did michael jackson molest children?what are michael jackson's kids names?what is up with jermaine jackson's hair?where will michael jackson be buried?where did michael jackson die?where did michael jackson live?link leave a comment | 4 commentsfri, oct. 16th, 2009, 10:26 am 

this post unintentionally demonstrates that functional-style python is ugly and bad.let us start at the top. at the beginning, it has some sample code which defines a multiple() function, which could be trivially inlined, resulting in code which looks like this (i'm doing all examples in python 3):print(sum(x for x in range(1, 1000+1) if x % 3 == 0 or x % 5 == 0))there's no reason whatsoever to expand that out. this should be an early indication that maybe the code samples here aren't the greatest.moving on, there's getting the sum of all fibonacci numbers less than 4 million. this is done in the example using itertools and yield, resulting in a fair amount of ugly code. here's how a sane person does it:def fibsum():
	a, b, c = 0, 1, 1
	total = 0
	while c < 4000000:
		total += c
		a, b, c = b, c, b + c
	return totalnow that's much more readable, flexible, and maintainable.finally, there's the problem of finding the largest palindrome which is the product of two three digit numbers. here's my solution, which contains less code, is much more readable, and oh yeah, i threw in an optimization to make it return almost instantly instead of having to crunch for a second:def bigpalindrome():
	best = 0
	for i in range(999, 0, -1):
		if i * 999 < best:
			return best
		for j in range(999, i-1, -1):
			x = list(str(i*j))
			x.reverse()
			if int(''.join(x)) == i*j:
				best = i*j
much better. i think these examples do a good job of exploding the idea that the functional style of programming is clearly better and the appropriate first thing to teach people. obviously some people are being driven to write horribly contorted and ugly code because they started in a functional language when they switch a more, ahem, mainstream one.link leave a comment | 18 commentsfri, oct. 16th, 2009, 10:09 am print isn't even vaguely thread safe

thanks to everyone who provided suggestions for my problems with print yesterday. it turns out that print isn't even vaguely threadsafe, and that the rather surprising behavior when there's a collision is for there to be duplicate output bytes. so if you ever see duplicate print lines, you know what to guess it is now.my quick hack for getting around the problem is to make a module called rprint which looks like this (i'm using python 3):from threading import lock

mylock = lock()
p = print

def print(*a, **b):
	with mylock:
		p(*a, **b)
then from every module where i have a print i say:from rprint import printi don't know if this is an elegant solution or an ugly hack, but hey it works.link leave a commentthu, oct. 15th, 2009, 12:07 pm print() experiencing deja vu

i have a very multithreaded python3 app i'm running which i have a whole bunch of calls to print() in. i don't generally do multithreading, but this is spinning up a whole bunch of servers to check if they're working right. i have another test which is non-multithreaded and reproducible, and will of course have another test of actually running everything on multiple machines, but this is the intermediate step.anyhow, my problem is that print() appears to be sometimes causing the same line to be printed out repeatedly. i'm loathe to draw the conclusion that the underlying libraries are misbehaving, but i've taken the following precautions:the amount of data it's spitting out is extensivethe code is asserting that the exact string hasn't been printed beforethe thread and object id's are included in what's printedthere's a call to randrange() included at the end, just to make sureand yet, i'm still getting identical lines of output.my questions are:what the fuck?is there some config setup to make this stop?if not, is there a workaround?my next step is to try making everything dump objects to be printed on a queue and have a single thread to all the printing, in the hopes that that will get the duplicates to go away, or at least be next to each other instead of obnoxiously interleaved. but first i'm taking a break for lunch, i've already wasted a day on this crap.link leave a comment | 4 commentswed, oct. 7th, 2009, 07:35 pm sudoku and the way of the sat solver

writing a sudoku solver is a slightly tricky but reasonably straightforward problem. here i'll present a non-obvious way of implementing it which is short in terms of lines of code and also much easier to modify and extend than the more direct approaches. the general technique is applicable to a very wide range of problems, so hopefully someone will read this and then find it useful in the future.my general approach is in multiple steps. first, express the sudoku problem as a much more general type of problem called a sat problem (short for 'satisfiability', traditionally capitalized for no particular reason). then solve the sat problem, then translate the solution back into the original format.a sat problem works on boolean variables, and the problem is to find a find an assignment which satisfies every one of a list of clauses. an individual clause states that at least one of a set of variables an their negations must be true, for example 'a or b or c' or 'not b on not d or e' are both typical clauses. to translate a sudoku problem into a sat problem, i make one boolean variable for each possible state of each cell of the original problem, so there's one variable for whether the upper-left cell is a one, another for whether it's a two, etc. translating the constraints on the sudoku problem is then straightforward - each digit must occur exactly once in each row, column, and subsquare, and each pair of cells in each row, column, or subsquare must not both be true (expressed as, either the first one is false or the second one is false).to solve the sat problem, the solver first scans for a clause containing no variables. if there is one, then the problem is insoluble and you return. otherwise, it scans for clauses containing exactly one variable. if there is such a thing, it makes that assignment and recurses. if not, it finds the clause with the smallest number of variables in it (skipping the 'not a or not b' clauses, because everything contains about the same number of those) and recurses twice, setting one of the variables to true and false.the advantage of this approach is that the heuristics for noticing when there's only one possible value left on a row, column, subsquare, or an individual cell don't have to be special cased - they're all subsumed by the single simple deduction that if a clause only contains a single variable, then that assignment has to be made. as a result, adding for example a constraint that the diagonals have to have each digit occur only once is trivial, and making irregular shapes and adding novel types of constraints is also fairly easy, while it would be quite difficult in the more obvious but less flexible approaches to writing sudoku solvers.it would be possible to make this code a lot faster, even without changing the architecture - for example, one could build an index of what variables occur in what clauses, to get rid of all the linear scans. but for solving a small number of sudokus, or even a largeish number, taking a few seconds each is no big deal, and this approach is much more about maintainability, flexibility, and extensibility. interestingly, for a large number of real world problems the fastest known way to solve them is to translate to sat and run a general sat solver with appropriately tuned parameters on the result. obviously this is a hack, but applying custom heuristics to the unencoded problem is so messy and difficult, and so much work has been done on fine-tuning the general purpose solvers, that more often than not the theoretically better appoach can't compete in practice. sudoku has some very special properties which tip the balance in favor of a very special custom bit of code, and in fact i made my sat solver do a heuristic which is very sudoku specific and skipped the common one that if a variable only appears in the positive or negative then you assign it because that doesn't apply, but such customization being warranted is highly unusual, and even in this case the general sat solver has some clear advantages, starting with it containing fewer lines of code.i used exception handling to indicate when a solution is found, and add assigments to it in handle and reraise clauses, mostly to make the point that this is a perfectly valid and highly pragmatic way of using exceptions.a flat file of the code can be found here, but i've included it verbatim below.by the way, the method of testing i used on this is to run it on a sudoku problem with no initial constraints, which is a simple one-line test and does a good job of hitting all the edge cases regardless of the implementation details.class solutionfound(baseexception):
	def __init__(self):
		self.s = []

def assign(clauses, val):
	n = []
	for c in clauses:
		if val in c:
			continue
		elif -val in c:
			n.append([x for x in c if x != -val])
		else:
			n.append(c)
	return n

def try_sat(clauses, val):
	try:
		solve_sat(assign(clauses, val))
	except solutionfound, s:
		s.s.append(val)
		raise s

def solve_sat(clauses):
	if [] in clauses:
		return
	if len(clauses) == 0:
		raise solutionfound()
	for x in clauses:
		if len(x) == 1:
			try_sat(clauses, x[0])
			return
	smallest = clauses[0]
	for c in clauses:
		if c[0] > 0 and (smallest[0] < 0 or len(smallest) > len(c)):
			smallest = c
	try_sat(clauses, smallest[0])
	try_sat(clauses, -smallest[0])

svals = [list(range(x, x+9)) for x in range(0, 81, 9)] + \
		[list(range(x, x+81, 9)) for x in range(9)] + \
		[[x,x+1,x+2,x+9,x+10,x+11,x+18,x+19,x+20] for x in [0,3,6,27,30,33,54,57,60]]

def group(c, p):
	p.append(c)
	for i in range(len(c)):
		for j in range(i):
			p.append([-c[i], -c[j]])

def groups(c, p):
	for i in range(9):
		group([x + 100 * i + 1 for x in c], p)

def decode(r):
	r2 = [[0 for x in range(9)] for y in range(9)]
	for v in r:
		if v > 0:
			pos = (v-1) % 100
			r2[pos // 9][pos % 9] = (v // 100) + 1
	return r2

def solve_sudoku(problem):
	p = []
	for i in range(81):
		group(list(range(i+1, 901, 100)), p)
	for s in svals:
		groups(s, p)
	pre = []
	for x in range(9):
		for y in range(9):
			if problem[x][y]:
				m = x * 9 + y + 100 * (problem[x][y] - 1) + 1
				pre.append(m)
				p = assign(p, m)
	try:
		solve_sat(p)
	except solutionfound, s:
		return decode(s.s + pre)
	return none

import sys
sys.setrecursionlimit(10000)

if __name__ == '__main__':
	tt = [[0] * 9 for i in range(9)]
	print('\n'.join(' '.join([str(p) for p in q]) for q in solve_sudoku(tt)))
	print(' ')
	tt[0][0] = 6
	tt[3][4] = 1
	print('\n'.join(' '.join([str(p) for p in q]) for q in solve_sudoku(tt)))link leave a comment | 9 commentstue, sep. 29th, 2009, 12:19 pm signatures don't do what you think they do

security people tend to think that we live in a secure world, one in which everyone is constantly auditing the behavior of everyone else, and the end result is widespread mutually ensured honesty. we don't even vaguely live in that world. we live in a trusting world, where most people are mostly good, and the need for auditing is much lower than it would be if everyone were greedy sociopathic automatons. i would not want to live in a world which worked that way, and it would probably not only be an unpleasant place to live, but an extremely unproductive one as well, as every attempt by anyone to get anything done would be destroyed by theft and corruption.i say this not to engage in broad philosophizing but because i have a very concrete point to make about a very specific thing: signatures. people  think of signatures as being a strong form of physical evidence, useful in court proceeding for proving that a particular person really did sign a particular thing. while this belief being widespread does a good job of denying that things they signed are actually their signature, which is a good thing, the claimed difficulty of forging signatures is simply not true. anyone can practice forging a signature from a few samples for a few hours and be able to do a passable replica. anyone with decent skill who practices a bit can get quite skilled. and people aren't very consistent about how they sign their own signatures, making even legitimate matches sometimes look fake. thumbprints would be far better as a piece of evidence.despite that, signatures are still very important and good at what they're used for. what is that? it's to make it clear that someone knows when they're entering into a binding agreement. you can't be forced into an effective contract just because you said 'yeah, whatever' when asked if you want to participate, and you can't be forced into a contract by being tricked into signing a document which says something different than what you think it says. the theory of contracts is based on parties mutually agreeing to be contractually bound, and requires they all go through sufficient ceremony that it's clear when a contract has been entered into (sometimes merchants can get into binding contracts much more easily, but that's because they're expected to be more savvy, the law is big on protecting little old ladies from being suckered).for example, take the use of signatures for receiving packages. there isn't even a contract entered into when a package is signed for, but the reasoning behind it is the same - it's to make clear that the person receiving the package knew they were receiving a package, and not claim later that there was a misunderstanding. to the extent that the signature has any evidenciary power in this case, it's mostly in that people generally by default put down their real name, and since the delivery person generally doesn't even know what the potential name of a recipient might be, it's hard for someone to lie later and claim that no package was delivered at all.the hoopla around cryptographic signatures is largely misplaced. having signatures which were on a web page which clearly stated what was being indicated and the signature was done by moving the mouse like a pen in a drawing area would do a much better job of indicating what signatures are supposed to indicate, and probably be much easier to back up in court later.now somebody please explain this to bruce schneier, because he doesn't get it.link leave a comment | 6 commentsmon, sep. 14th, 2009, 04:21 pm awful programming advice

i just came across a blog post going over that old saw of object oriented design, a square being a subclass of a rectangle.this advice is worse than useless. it's either wrongheaded or meaningless, depending on how literally you take it.taken literally, it would never make sense to make a full-blown class for such a trivial piece of functionality. there simply would be more lines of code taken up making declarations than could possibly be saved by convenience. taken less literally, it's just gibberish, a completely nonsensical way of thinking about the problem, like teaching a drawing class where you cover pentagrams.so what would be a sane way of building this functionality? well, first you have to decide what the functionality actually is, since there wasn't any actual functionality in the first example. a reasonable set of functionality would be polygons. polygons can be rotated, translated, and scaled, and you can take their union and intersection with other polygons, and calculate their area. this is a nontrivial set of functionality which it makes sense to encapsulate. how then to make rectangles and squares? the simplest way is to have two convenience functions - one which builds rectangles, and one which builds squares. or just make the convenience function accept a variable number of parameters, and if it only gets one to return a square.but this example doesn't use any subclassing! i can hear the oop gurus exclaiming now. how are people supposed to learn subclassing if you don't give them any examples of it? this is a deranged attitude. subclassing is not an end in and of itself, it's a technique which is occasionally handy. and i'll let you in on a little secret - i personally almost never use subclassing. it's not that i one day decided that subclassing is bad and that one should avoid it, it's that as i got better at coming up with simple designs i wound up using it less and less, until eventually i almost stopped using it entirely. subclassing is, quite simply, awkward. any design which uses subclassing should be treated with skepticism. any design which requires subclassing across encapsulation boundaries should be assumed to be a disaster.unfortunately this is hardly atypical of introductory object oriented design examples. even the ones which are more real world tend to be awful. take, for example, networking apis. a typical example of an api is one which allows the creation of sockets, with blocking read calls and maybe-blocking write calls. the first few versions of java had this sort of api exclusively. this approach is simple, seems logical to people unfamiliar with it, and is an unmitigated disaster in practice. it leads to a ton of threads floating around, with ridiculous numbers of race conditions, and awful performance because of all the threads swapping in and out. such awfulness unfortunately hasn't stopped it from being the default way people are shown how to do things.so what would be a better api? this is something i have a lot of experience with, so i'll give a brief summary. i'm glossing over some details here, but some of that functionality, like half-open sockets, is perhaps best not implemented.the networking object constructor takes a callback function. each socket is referred to using an identifier (yes, that's right, an identifier, they don't warrant individually having objects).the methods of the networking object are as follows:start listening on a portstop listening on a portmake a new outgoing connection (returns the connection id)write data to a socket (returns the number of bytes written)check if a socket has buffered data to writeread data from a socketclose a sockethere are the methods of the callback:incoming socket createdsocket closedsocket has data to be readsocket has flushed all write data from bufferyou've probably noticed that this api, while simple, isn't completely trivial and there is considerable subtlety to what exactly all the methods mean. that is an important point. for functionality of less that this level of complexity object orientation is generally speaking a bad idea, and trying to force simpler examples in the name of instruction results in poor and misleading instruction.unfortunately not all asynchronous networking apis are in agreement with my example, which really says something about the state of the art in software design. i daresay that if twisted followed this example straightforwardly (it does something similar, but awkwardly and obfuscatedly) then tornado would never have been written.link leave a comment | 26 commentstue, sep. 8th, 2009, 01:42 pm logging decorators in python

i've been doing a lot of debugging lately, and have been using this bit of code to great effect:from traceback import extract_stack, format_listti = 0.0class rec:    def __init__(self):        self._his = []    def __setattr__(self, key, value):        if key != '_his':            self._his.append((key, value, ti, extract_stack()[:-1]))        self.__dict__[key] = value    def dump(self):        for key, value, t, stack in self._his:            print '%s = %s' % (key, value)            print 'time %f' % t            print ''.join(format_list(stack)) to use this, i make a struct-like class subclass rec, call rec's init from its init, and then call dump() when i want to know what's happened to the particular object, and it displays all assignments which have happened to it, and the virtual time when they happened (i'm running a lot of simulations) and where the assignment took place.extremely useful, but missing in some key areas:it should really be a decorator, rather than a base classif someone retrieves a primitive (list or dict), then it should return a wrapped version of that, so if someone says, for example, myobj.stuff[3] = 4 then the logging should record exactly that. right now such assignment are simply not logged, which sucks.the virtual time should be less of a hack than a global. maybe getting a virtual time by associating off the current thread would work. this is less general-purpose than the other functionality here, but i find it quite useful.can anybody please flesh out this functionality, or point me to something which does it already? i'd like for this to be part of my standard debugging toolbox, the first thing i go to when a simulation i'm running hits a complex and hard to track down bug.link leave a comment | 5 commentstue, aug. 11th, 2009, 09:43 pm tracker ball puzzle

people seemed to not understand that these puzzles are collaborations between me and oskar, even though he clearly explains it in the videos, so i did the presentation in this one.link leave a commentthu, jul. 30th, 2009, 10:26 pm 3d printing, interview with bram

there's a new interview with me about 3d printing, puzzles, and a few bits of other random stuff.link leave a commentfri, jul. 17th, 2009, 08:25 am oskar's mixup cube

this puzzle looks like a rubik's cube, but it allows some moves which clearly shouldn't be.link leave a comment | 3 commentsthu, jul. 9th, 2009, 03:24 pm someone at mozilla foundation needs to be fired

somebody at mozilla decided they need lots of 'true' random numbers.my patience for this subject completely ran out about five years ago, so this post is going to show a complete lack of diplomacy. i would like to emphasize, in advance, that this is my honest, reasoned opinion, not said in anger, and that if you ask my opinion again in the future i'll say the exact same thing.once a computer has collected a small number of 'true' random bits (maybe it's 128, maybe it's 256, but regardless it's small) there's no need whatsoever for it to block on collecting more 'random' numbers. a pseudorandom number generator based on aes will be able to generate random numbers based on that seed until the end of the universe and noone constrained by the laws of physics and math will ever be able to tell the difference between that and 'true' random numbers. this is extremely well established cryptography. to require 'true' random numbers is, to use an apt analogy, wankery. it does not, and cannot, do anything to improve security, and it mostly just causes huge amounts of pain. it is (and i repeat myself, because i have a hunch people will think i'm glossing over some nuance here) of no benefit whatsoever.my advice to the mozilla foundation (and again, this is my reasoned opinion, not said in anger, and i won't be changing my mind later): find out who was responsible for this policy of requiring lots of 'true' random numbers, and fire them. fire them today. they have demonstrated gross incompetence, a total lack of understanding of the very most basic concepts in security.some people might think that if i knew more about who was behind this and what their specific motivations are, then that might change my mind. that is incorrect. the security field is filled with people who to non-experts seem very impressive and knowledgeable, especially when they're advocating, and even moreso demanding, very painful and difficult things in the name of security. most of these people are frauds. i have had it with paying homage to the concept of impartiality when discussing these peoples's opinions. if someone spouts a bunch of technical mumbo-jumbo to bring the conversation to a place which a lay person has trouble understanding, then they may be able to make the argument be based on pure rhetoric, but gross incompetence is still gross incompetence, and despite having found an effective way to bullshit their way through, they're still wrong.link leave a comment | 22 commentstue, jul. 7th, 2009, 11:30 am ludology in city of heroes

city of heroes has had some interesting issues with its gameplay, involving a character named twixt using some tactics which made everybody hate him.several years ago i happened to be seated next to the designer of city of heroes at an event where he won something. he was a pudgy guy, wearing big round glasses, with a white city of heroes t-shirt and a blue cape on. we got into a conversation about his game, and i asked what it was that made it compelling, and he said that it's every kid's fantasy of being a superhero, and it was very obvious that he'd based the game's design on his own. i asked him if city of heroes is compelling as a pure abstract game, and the interesting response was that he didn't understand the question. after a few minutes of conversation he got what i was asking, and his answer, which really perplexed me at the time, was that it was a good question, but he didn't know.consider a game with the following semantics: you sit, unmoving, for two hours, with no user feedback, no buttons to push, nothing, completely passive, while the game plays out in front of you, exactly the same way as it would for anybody else. this sounds like a terrible game, but it's exactly what movies are, and movies are very popular and get little criticism that they're terrible games.the twixt problem was caused not so much by any one person behaving unreasonably as the game engine having a problem. there's a battle tactic which is quite effective but has the effect of wiping out an enemy without even giving them a chance to play, making it not much fun for them and it doesn't even get much credit for you. because city of heroes is more fantasy than game, players have a convention of not using this tactic, because that maximizes the fun of play. this is done at the expense of an individual's success taking the game as a sport, but since the game isn't a sport, people don't worry about that too much. real sports don't involve dressing up as superheroes (except for figure skating, but that isn't a real sport). what really should be done is that the rules should be modified so that the particular tactic isn't so nasty. it's a general rule of game design that all players should get a chance to play and have fun, even if they aren't very good, and tactics which allow a better player to win without the weaker player even having a chance to try to retaliate are no fun.link leave a comment | 2 commentsmon, jul. 6th, 2009, 04:07 pm bandwidth fundamentals

a random person asks about something they read on wikipedia:example from wiki below:  http://en.wikipedia.org/wiki/bram_cohen  quote from site:  mojonation allows people to break up confidential files into encrypted chunks and distribute those pieces on computers also running the software. if someone wanted to download a copy of this encrypted file, he would have to download it simultaneously from many computers. this concept, cohen thought, was perfect for a file sharing program, since programs like kazaa take a long time to download a large file because the file is (usually) coming from one source (or "peer"). cohen designed bittorrent to be able to download files from many different sources, thus speeding up the download time, especially for users with faster download than upload speeds. thus, the more popular a file is, the faster a user will be able to download it, since many people will be downloading it at the same time, and these people will also be uploading the data to other users. this explanation was lifted from an actual new article, which doesn't necessarily mean it's true. in fact, it's somewhere between grossly misleading and wrong.there's a classic fallacy because if one person stands up during a concert they get a better view, then if everybody stood up during a concert they'd all get a better view. this is of course is not true - they wind up slightly worse off by all standing, because they all compete with each other for a view. the same thing happens with downloading from a server. in general, web servers will give about the same rate to every client downloading from them, so if you open many more connections than everybody else you get a greater proportion of the bandwidth and hence a better rate. but you do so simply by taking bandwidth from other downloaders. the overall supply of upload is unchange, it's simply being shuffled around. if everybody does the same thing it results in overall slightly worse performance and you're basically back where you started, but with a bunch of headaches tacked on. so why does bittorrent perform so well? quite simply, because it does a better job of finding more places to do uploading. any peer which is downloading is in general willing to upload as well, and their uplink is usually unutilized, so if you can get a peer to start uploading as soon as it starts downloading, and keep uploading as long as possible, and saturate its link while it's uploading, then overall performance will be better. it doesn't necessarily help to transfer over more connections, or make more different things available at the same time, or use error correcting codes. in fact, all of those are a complex tradeoff between benefits and costs, with the net result being that small amounts of them can help reliability and robustness, but in general it's good to keep things simple and be polite to the network.on the internet, the formula is bytes downloaded = bytes uploaded. it's that simple.link leave a comment | 5 commentsmon, jul. 6th, 2009, 02:50 pm the uncanny cube

from deep in the uncanny valley of the rubik's cube, it's the uncanny cube. at first blush this appears to be a slight variant, but it is quite profoundly and perversely different.link leave a commentfri, jul. 3rd, 2009, 09:41 am bram's cube

this is bram's cube, an idea i'm very fond of. it's very interesting to solve, since the middle layer and everything else can be thought of independently and solved on their own, but that scrambles the part you weren't thinking of.link leave a commentmon, jun. 15th, 2009, 07:55 am new puzzles - bram's black hole and fairly twisted

bram's black hole is a concept which occurred to me a few minutes after the first time i ever played with a puzzle similar to peter's black hole.fairly twisted is a twisty puzzle with no symmetry.link leave a commentmon, jun. 8th, 2009, 02:10 pm puzzle ring tweaking

it turns out that when cadding a puzzle ring, some issues turn up. specifically, when a band goes over one band then immediately under another, it frequently doesn't have enough space to squeeze through between them.i've come up with some techniques for dealing with this, and drew the following diagrams, which i think are kind of pretty, and i'm proud of my diagramming technique involved :-)

         ___
_______ /   \ _______
       \     \
      / \   / \
___   |  |  |  |  ___
   \ /   \ /   \ /
    \     /     \
___/ \   / \   / \___
      |  |  |  |  
      \ /   \ /
_______\     \_______
        \___/ 


         ___   __________
_______ /   \ /          ___________
       \     /          / \
      / \   / \    __   |  \
___   |  |  |  |  /  \ /    | ______
   \ /   \ /   \ /    /     \
    /     /     \    / \   / \
___/ \   / \   / \   |  |  |  |  ___
      |  |  |  |  \ /   \ /   \ /
      \ /   \ /    \     /     \
______ \     \    / \   / \   / \___
        |   / \__/   |  |  |  |
        \   |        \ /   \ /
___________/          \     \_______
          \__________/ \___/


              __   ___   __
       ___   /  \ /   \ /  \   ___
_____ /   \ /    \     /    \ /   \ ________
     \     \    / \   / \    /     /
    / \   / \   |  |  |  |  / \   / \   
___/   \ /   \ /   \ /   \ /   \ /   \ _____
        \     \     \     /     /     /
       / \   / \   / \   / \   / \   / \
____   |  |  |  |  |  |  |  |  |  |  |  l___
    \ /   \ /   \ /   \ /   \ /   \ /
     /     /     /     \     \     \
____/ \   / \   / \   / \   / \   / \   ____
       |  |  |  |  |  |  |  |  |  |  |  |
       \ /   \ /   \ /   \ /   \ /   \ /
___     /     /     /     \     \     \_____
   \   / \   / \   / \   / \   / \   /
    \ /   \ /   |  |  |  |  \ /   \ /
_____/     /    \ /   \ /    \     \________
      \___/ \    /     \    / \___/
             \__/ \___/ \__/
link leave a commentsun, may. 31st, 2009, 10:13 pm kite wind power

there are a number of different projects going on to harness wind power using kites. most of them are utter lunacy, involving so many gizmos and unproven techniques that you might as well be trying to get power from lightning. that said, i have an approach which i think is plausible, but before even idly thinking about working on it i'd like to know if the whole concept of kite-based power even works on paper. gathering the necessary information and running the numbers is a bit beyond my off the top of the head skills, so i'd greatly appreciated it if anyone would help me calculate the following:for several points of interest on earth (particularly plausible/notable/typical places) calculate the following for both ground level and an altitude of half a kilometer:what is the minimum, average, and max wind velocity? for the average wind velocity what would be the pull of a kite with an area of a hundred square meters? what would be the weight of the kevlar necessary to hold down something producing that much force at the maximum wind velocity? after factoring in holding up all that kevlar, could a kite stay up at minimum wind speed? how much power could be generated by its remaining upwards force? how much of that would be lost in the electrical generator? how does that amount of power output compare to the per capita max and average power consumption in the united states?my suspicion is that flying kites at an altitude of more than a few hundred meters is simply not worth it, and that the optimal kite size in practice is around a thousand square meters, and that in an area where the wind never dies down a kite system compares quite favorably to a turbine system, once you get all the engineering problems worked out.also, i have a dumb question about controls - at what altitude do the sorts of control systems used for power kites simply stop working due to even very tensioned materials having a lot of slop at that length?link leave a comment | 10 commentssun, may. 31st, 2009, 09:52 pm maybe goto isn't so bad after all.

i've used this pattern a lot over the last few days:
for eggs in spam:
    for jello in eggs:
        if jello is the one i want:
            break
    else:
        continue
    break
else:
    return
do stuff with eggs and jello
people familiar with my code will find this amount of complex control flow unsurprising. but the reasoning here is different from my past practices. in the past i always optimized to have as few lines of code as possible, regardless of how upside down and backwards it made everything be organized, but that could be done much better in this case like so:
for eggs in spam:
    for jello in eggs:
        if jello is the one i want:
            do stuff with eggs and jello
            return
there are two reasons i find this construct objectionable. first is that it leads to a lot of code having a lot of indentation (the 'do stuff' is in many cases dozens of lines) which isn't good for readability. second is that the natural flow of the code is 'scan for the thing i want, and then do something with it' which is the flow of the structure i've been using. i suppose one could write it like this:
def my_little_func():
    for eggs in spam:
        for jello in eggs:
            if jello is the one i want:
                return eggs, jello
    return none, none

eggs, jello = my_little_func()
if eggs is none:
    return
do stuff with eggs and jello
but that's hardly elegant and forces the flow to jump around in terms of the visual layout of the code, which goes against what i'm trying to accomplish.at the risk of starting a religious war, i'd like to point out that the most readable and versatile way of doing what i want is like so:
for eggs in spam:
    for jello in eggs:
        if jello is the one i want:
            goto x
return
x: do stuff with eggs and jello
but short of that the following may be the best option currently available. i might switch to it:
for eggs in spam:
    for jello in eggs:
        if jello is the one i want:
            after_func(eggs, jello)
            return

def after_func(eggs, jello):
    do stuff with eggs and jello
but it still doesn't look as nice as the version with a goto.link leave a comment | 11 commentsthu, may. 28th, 2009, 10:00 pm geary cube

this is the geary cube puzzle, another bram and oskar collaboration. it's externally identical to a rubik's cube, but has internal gearing which forces opposite faces to turn in opposite directions simultaneously. it's my favorite subgroup of the rubik's cube (you can try it yourself with a regular rubik's cube) and easily makes a bunch of pretty patterns. it's overall easier than a regular rubik's cube is, but the solution technique is very different and interesting and not related to the standard ways one solves twisty puzzles.link leave a comment | 1 commentfri, apr. 17th, 2009, 04:41 pm codecon 2009 now streaming live

live streaming of codecon 2009 is now up. it's linked from the codecon 2009 front page.link leave a comment | 4 commentsthu, apr. 16th, 2009, 06:02 pm codecon 2009 starting tomorrow

codecon 2009 starts tomorrow. we're just finishing up getting ready, and it's going to be great. see everybody there!link leave a comment | 1 commentwed, apr. 8th, 2009, 12:37 pm i'm twittering

i've signed up for a twitter account, and have been posting there a lot more than here. i also linked my facebook and twitter accounts, and started using bit.ly. the facebook reposts get a lot more comments, because i have more friends there, and oh yeah, twitter doesn't have comments yet. please fix.in the future, i'll post headline links to all my blog posts on the twitter stream for all my regular blog posts, and continue to post here for thoughts which require more than one sentence to convey.link leave a comment | 1 commentsun, apr. 5th, 2009, 10:03 am the end is nigh

science fiction authors have dreams of the world's last days, and our distant descendants watching the sun flame out about four billion years from now. they're living in fantasy land. there's no way we're going to last even close to that long.you see, the sun is getting hotter as it approaches flameout, and the earth is slowing down in its spin on its axis as tidal forces drag it down. as the earth's spin slows down, the cycle between day and night will become longer. a mere billion years from now the earth will stop spinning completely, and the light side will turn into smolding embers while the dark side will become a truly frozen wasteland. long before that the day/night cycle will become so long that peak daytime temperature will surpass the boiling point of water, causing moisture to get into the upper atmosphere and get blown away by the solar wind, depleting the oceans while cooking all the water-based life forms during the day.there is only one way to avoid this. we must force the earth's temperature down until the oceans freeze, thus stopping tidal forces and allowing the earth to continue with its current length of day/night cycle indefinitely and allowing us to live an extended, if slightly chilly, existence. anyone opposed to this plan is engaged in strictly short term thinking.link leave a comment | 9 commentswed, apr. 1st, 2009, 08:31 am codecon

remember that today's the last day to get the early bird discount to codecon 2009, so if you haven't signed up yet, do it now.link leave a commentfri, mar. 27th, 2009, 12:12 pm rotacubes

this is the rotacubes puzzle, a collaboration between me and oskar van deventer. nobody could make out how this one worked from pictures/text descriptions, so here's a video.link leave a comment | 4 commentsmon, mar. 23rd, 2009, 12:18 pm codecon 2009 program posted

the program to codecon 2009 is now up, and registration is at the early rate of $75 for all three days until april 1st, after which the cost goes up.an explanation of codecon, from the site:codecon is a conference of working demonstrations. three days of quick presentations of actual working code, shown by people who wrote them, all for under $100. past highlights include early presentations of bittorrent, pgp, and siteadvisor.presentations this year include:biohack! track:diy synthetic biology - from design to construction with new model organisms homebrew genetic testing - read your own source code - at home! keiki gels - visualize dna -- in a drinking straw! code track:bittorrent dna - effortless bittorrent deployment distributed transaction layer for google app engine - transaction semantics across multiple entity groups for applications written in the google app engine helios voting - the first and only web-based voting system that enables voters to verify their vote and the overall tally with cryptographic certainty.libevent - making fast asynchronous network programs portable pork - largescale automatic rewriting of c++ oneswarm - privacy preserving peer-to-peer data sharing parallel web browser - a web browser for handhelds & multicore laptops switzerland - a semi-p2p system for detecting forged and modified ip packets between clients tahoe, the least-authority filesystem  - a secure, decentralized, fault-tolerant storage network torflow - a python-based tor research toolset trend profiler / trend-prof - finding performance surprises (super-linearities) in c / c++ code based on trends in the runs on different size inputs. typhon / screamto learn more about codecon, you can look at the sites from previous years:20062005200420032002digg this!link leave a commentsat, feb. 28th, 2009, 11:14 pm version control tidbits

i wrote up an explanation of when patience diff gives significantly different results, and why they're important.the trickiest case for line based merging is when the number of blank lines between two functions changes. were the new lines inserted at the beginning or the end? if two different people add a single line, should that clean merge? what if one person adds one blank line and another person adds two? should that be a conflict of one blank line on one side and two on another, or a conflict of no lines on one side and a blank line on the other with a single line added, or no conflict and merge to the original length plus two, or no conflict and merge to the original length plus three? how about if a function was added in the middle of a section of blank lines and the number of blank lines after it was changed - should the new lines be at the end of the new function or the beginning of the old one? what if lines were removed, where should they have been removed from?there aren't clear answers to these questions. any answer you come up with will involve some tradeoffs, and it's a judgement call what behavior really is best. the one clear lesson is that you shouldn't change the number of blank lines between functions willy-nilly, because it will confuse the version control system.a difficult distributed merge scenario which hasn't been written up anywhere is one i like to call the circular staircase. three different branches are all made off of trunk, and all make changes to the same section of code. think of the branches as all sitting around a circular table. each branch then simultaneously pulls the most recent version of the branch to their right, and resolves the conflict in favor of their version. this situation is weird because any two of the three branches will now do a clean merge together, but pulling in the third one should cause a conflict. i won't give the full explanation as to why that is here, because my point is that the scenario is completely counterintuitive and inscrutable. as soon as the relationship between branches ceases to be a tree, it becomes impossible for users to understand what's going on. the lesson is that you should have clear relationships between your branches, and not do anything goofy. at this point i'm in favor of the version control system not allowing you to do goofy things, and keep track of the coherent relationships between branches which you do have. i have more ideas than were given in my last post on this subject, but more on that at a later time.another interesting case is the following:
     a
    / \
   b   c
  / \ /
 c   b
  \ /
   ?
if we want to support cherry-picking, we have a problem here. on the one hand, the change to c has already been applied to and rejected from on the right hand side. on the other hand, the change to c on the left happened 'after' the change on the right, so by the staircase criterion the new value should be c.i think that if you want to support implicit cherry-picking you need to suck it up and accept that this scenario creates the weird action at a distance of merging to b. i don't really want to argue it all that much though, because the horse has already been beaten to death, and basically nobody in the real world is asking for implicit cherry-picking, because nobody has proposed a good ui for it, and nobody other than a handful of experts understands how it behaves, and because it directly conflicts with implicit undo.link leave a commentwed, feb. 25th, 2009, 09:58 am trigears video

when i last posted about this several people guessed that it's easy. it's not, it's quite difficult, and the logic behind the solution is very interesting. it also has no planar equivalent. link leave a comment | 8 commentstue, feb. 17th, 2009, 12:06 pm bram explains unix time



here's me explaining unix time. a thought on appearing on tv - if somebody puts a video camera on you, it's best to babble on about all your thoughts on a matter without concern for time, because they're going to edit it down later.link leave a comment | 3 commentsfri, feb. 13th, 2009, 03:17 pm codecon deadline coming up

the deadline for codecon submissions is coming up this sunday! if you've got a cool project with actual working code, you should submit. codecon is designed to only require a few minutes to put together a submission if you've got something to show, and the amount of time to present is short enough that all you need to do is cover your project to fill it. get your submissions in!link leave a commenttue, feb. 10th, 2009, 05:09 pm corrections

believe it or not, you can't believe everything you read on wikipedia.i currently live in the san francisco area.i have three children.i've never heard of badger and badger.also, the article about my asperger's said that i was in college for one year. i was actually there for two years, but flunked most of my classes my last term (i knew i was leaving and never wanted to come back, so didn't see much point in doing any schoolwork).link leave a comment | 11 commentsthu, jan. 29th, 2009, 10:17 am sea snakes

earlier this week (i think it was on monday) i was riding the ferry to work, and saw a sea snake in the water. it was a couple feet long (my guess would be about four, but it was at a distance so that could be way off) and black. a minute or so later i saw another one, and then got the amazing site of a cluster of what i'm guessing was over a hundred of them. they were arranged into approximately parallel groupings in regions, with an overall effect of looking like a line drawing of an octopus.i hadn't seen a sea snake in the water here before, so didn't think much of it, but then i looked it up online and it turns out hardly anyone else has seen them up here either! there's a species of sea snake native to california, but they live way down south, and aren't even all that common down there. sitings up here are extremely rare.unfortunately i didn't take a picture. were i used to using my phone camera and had any idea how unusual it was to see that i'd definitely have taken some footage.link leave a commentthu, jan. 15th, 2009, 04:21 pm linked cranks puzzle

link leave a comment | 5 commentstue, jan. 13th, 2009, 03:55 pm codecon call for papers out

for everybody who's been wondering and long anticipating when the next codecon is going to happen, here's the announcement:

codecon 2009
april 17-19, 2009
san francisco ca, usa
www.codecon.org

call for presentations

codecon is the premier showcase of cutting edge software development. it
is an excellent opportunity for programmers to demonstrate their work and
keep abreast of what's going on in their community.

all presentations must include working demonstrations, ideally accompanied
by source code. presentations must be done by one of the active developers
of the code in question. we emphasize that demonstrations be of *working*
code.

we hereby solicit papers and demonstrations.

    * papers and proposals due: february 15, 2009
    * all authors notified: march 1, 2009

possible topics include, but are by no means restricted to:

    * community-based web sites - forums, weblogs, personals
    * development tools - languages, debuggers, version control
    * file sharing systems - swarming distribution, distributed search
    * security products - mail encryption, intrusion detection, firewalls
    * malware analysis - detection, compensation, and mitigation of
      emerging threats

--

as a new feature this year, codecon will be presenting a biohack! track.
while we will continue our tradition of presenting only one talk at a
time, a portion of one of the days' talks will be reserved for interesting
biotechnology hacking projects. a key requirement for these presentations
is ease of reproduction with minimal access to expensive laboratory
equipment.

example topics include:

    * purifying dna using common household items
    * developing genetically-modified bacteria in a kitchen laboratory
    * using specially-designed software to assist in bioengineering
    * the use of simple bioengineering techniques to solve real-world
      problems.

ideal biohack! track submissions will have a strong emphasis on the
"hack" portion of the talk -- in the last few years, there has been a
strong growth in the community of biology hackers; we aim to bring these
hackers together to discuss their techniques for inexpensive, at home
experimentation in biological engineering research.

--

presentations will be 30 minutes long, with an additional 15 minutes
allocated for q&a. overruns will be truncated.

submission details:

submissions are being accepted immediately. acceptance dates are
february 7th and march 1st. after the first acceptance date, submissions
will be either accepted, rejected, or deferred to the second acceptance
date.

the conference language is english.

the conference venue is open to all ages.

ideally, technical demonstrations should be usable by attendees with
802.11b connected devices either via a web interface, or locally on
windows, unix-like, or macos platforms. cross-platform applications are
most desirable. biohacking demonstrations should be viewable with a
presenter-provided camera, or prepared movies for projection.


to submit, send mail to submissions-2009@codecon.org including the
following information:

    * project name
    * code track or biohack! track
    * url of project home page
    * tagline - one sentence or less summing up what the project does
    * names of presenter(s) and urls of their home pages, if they have any
    * one-paragraph bios of presenters, optional, under 100 words each
    * project history, under 150 words
    * what makes the project novel -- how it differs from similar projects
    * what will be done in the project demo, under 200 words
    * slides to be shown during the presentation, if applicable
    * future plans

general chairs: jonathan moore and bram cohen
program chair: jered floyd and len sassaman

program committee:

    * jon callas, pgp, usa
    * bram cohen, bittorrent, usa
    * roger dingledine, the tor project, usa
    * jered floyd, permabit, usa
    * ben laurie, google, uk
    * nick mathewson, the tor project, usa
    * david molnar, university of california, berkeley, usa
    * jonathan moore, mosuki, usa
    * meredith l. patterson, osogato, usa
    * andrew s. peek, integrated dna technologies, usa
    * len sassaman, katholieke universiteit leuven, be
    * cliff skolnick
    * paul syverson, naval research laboratory, usa
    * [others may be added]

sponsorship:

if your organization is interested in sponsoring codecon, we would love to
hear from you. in particular, we are looking for sponsors for social meals
and parties on any of the three days of the conference, as well as
sponsors of the conference as a whole and donors of door prizes. if you
might be interested in sponsoring any of these aspects, please contact the
conference organizers at codecon2009@codecon.org

press policy:

codecon provides a limited number of passes to qualifying press.
complimentary press passes will be evaluated on request. everyone is
welcome to pay the low registration fee to attend without an official
press credential.

questions:

if you have questions about codecon, or would like to contact the
organizers, please mail codecon2009@codecon.org. please note this address
is only for questions and administrative requests, and not for workshop
presentation submissions.

link leave a comment | 2 comments

50 most recent

previous 50




































