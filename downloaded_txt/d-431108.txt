




articles, blogs, and books about software development and computer programming, including design, engineering, profession, and quality - developer.*, developer dot star

























the independent magazinefor software developers




books
articles
blogs
subscribe
d.* gear
about
home









a jolt award finalist!



software creativity 2.0by robert l. glass
foreword by tom demarco, co-author of peopleware
a finalist in the 17th annual jolt product excellence awards!
discount pricing now at amazon.com!more ways to order





developer.* articles

note to site visitors: this website is a time machine, left pretty much in the exact state it was in at the end of 2006, when site editor and publisher daniel read retired from working on it. please enjoy the 100% free, ad-free content, most of which is still relevant, as developer.* was always dedicated to the "timeless" aspects of technology and software work. regretfully, as of this writing, the "community" side of the site, which featured blogs and article comments, has not be restored after a database corruption occurred in the drupal mysql database. (if any drupal experts out there would not mind helping me get it back online, i would accept the help.) most if not all of the blog/comment content should still be available in the archive.org wayback machine. thank you to everyone who supported or contributed to this site in it's 2000's heyday. this one of the first sites of its kind. (we even had a theme song!) please check out the "about" page for more information about how the site was put together from a technical standpoint. --all the best, dan. (if anyone would like to get in touch, please find me on linkedin.)



interface oriented design book excerpt: inheritance and interfaces (chapter 5)
finding commonality among classes makes for effective object-oriented programming. often, programmers express that commonality using an inheritance hierarchy, since that is one of the first concepts taught in object-oriented programming. we're going to go to the other extreme in this chapter to explore the difference between using inheritance and using interfaces. an excerpt from interface oriented design.
by ken pugh




career paths for programmers
the key to maintaining a good employment outlook in it, it seems, is to move out of programming and up into more business-oriented it positions such as systems analyst, business analyst, project manager, or systems architect. however, a computer programmer can't just decide to become a systems analyst or project manager overnight.
by john bennett, jr.




success/failure criteria: some surprises
at a breakfast seminar here june 6 on "factors for it project success and failure," prof. june verner of nicta provided a fascinating mix of surprises and predictables related to her subject topic. the findings came from nictaâs study of 400 projects in the u.s., australia, and chile, using questionnaires and interviews to discuss success and failure factors with practitioners.
by robert l. glass




test smarter, not harder
when weâre testing any software, we are faced with the tradeoff of cost and benefit of testing. with complex software, the costs of testing can grow faster than the benefits of testing. if we apply techniques like the ones in this article, we can dramatically reduce the cost of testing our software. this is what we mean when we say test smarter, not harder.
by scott sehlhorst




the many flavors of testing (an excerpt from software conflict 2.0)
once we realize that we are committed to a future full of testing, it is worth exploring what testing really means. i would assert that there are several flavors of testing, and that all too often when we speak of testing we consider far too few of those flavors. an excerpt from software conflict 2.0.
by robert l. glass




shifting the burden - whose monkey is it?
a new installment in the developer.* systems and software series, exploring the connections between general systems thinking, cybernetics, and software development. author don gray applies systems thinking principles--including "balancing loops," symptomatic and systemic solutions, and "shifting the burden"--to a recurring situation with one of his clients.
by donald e. gray




what is a professional programmer?
so what does it mean to be a professional programmer? what does it mean to be a professional anything? some definitions simply say to be a professional is "to make money from a skill," but true professionals also have a set of qualities often described as "professionalism." in my opinion, these qualities are...
by sarah george


write for developer.*

best practices for object/relational mapping and persistence apis
in this article i will begin with a discussion of home-grown vs. off-the-shelf persistence solutions, including areas to consider when deciding between the two, and advice for choosing the best off-the-shelf solution to meet your needs. i will also share suggestions and advice from my own experiences with o/r mapping and persistence apis, with a focus on "best practices."
by mario van damme



code as design: three essays by jack w. reeves
these essays by jack w. reeves offer three perspectives on a single theme, namely that programming is fundamentally a design activity and that the only final and true representation of "the design" is the source code itself.
by jack w. reeves



personal chemistry and the healthy body
iâm well acquainted with such people because i display all their qualities. what we share is an honest dedication to our work--so much dedication that we abuse our own bodies, if necessary, to get the work done.
by gerald m. weinberg



software design and programmers
how important are software design skills to a programmer? the traditional view is that programmers merely implement the designs of other people.
by daniel read


visit the full developer.* article archive


developer.* blogs

daylight savings time software problems: who is at fault?
what do you think? are there fundamental lessons here that software designers and companies should be heeding? are there some products or manufacturers that got this *right*, who have not experienced difficulties with the great 2007 dst transition? if so, what can we learn from their example?
by daniel read



lessons learned automating excel from .net
recently i had occasion to write a moderately complex component that used "automation" (using the old fashioned com term) to communicate with the microsoft office excel application installed on the same computer. in this post i share several tips and tricks that may help you in your excel automation adventures.
by daniel read



book publishing in a time of transformation
ome people have asked us, "you've started a book publishing company? huh? why would you do that? i thought all the publishers are going out of business." these articles do a great job of describing why we think there is a future for new publishers to succeed by embracing the change happening right now.
by daniel read



five and counting: developer.* past, present, and future
editor dan read belatedly reminisces about the recent passage of the five year anniversary of developer.*, considers where we are today, and speculates on the future.
by daniel read



to edward yourdon re death march 2007
edward yourdon has asked us to comment on death march projects today. here is my (somewhat revised) reply sent to him by email because the commenting feature on his blog is not working.
by edward g. nilges



notes on a characteristic fallacy
the fallacy of which i am thinking is the attack on knowledge claims by a "skepticism" wielded ignorantly as a rhetorical club. it is characteristically used in business environment by managers on workers.
by edward g. nilges



trusting the team and timing is everything
the latest installments from chrishmorris's project series.
by chrishmorris



c# and vb.net isnumeric() and isdate() functions
for some reason they left isnumeric() and isdate() functions out of .net. i end up needing these is almost every non-trivial project. in this post i share c# and vb.net versions of the functions i use.
by daniel read



.net backgroundworker mysteries solved
i've found the backgroundworker to be very handy, but a little tricky to start using at first. there are some subtleties i had to overcome that are not covered in the documentation, especially in the area of exception handling.
by daniel read



initiating iniative
when someone needs help to step up to the plate, how do you be a good coach?
by chrishmorris


frequently asked questions about developer.* blogging

                            all views expressed by authors, bloggers, and commenters are their own and do not necessarily reflect the views of developer.* or its proprietors.
                        




web developer.*
software development books






books
articles
blogs
subscribe
d.* gear
about
home

all content copyright ©2000-2006 by the individual specified authors (and where not specified, copyright by read media, llc). reprint or redistribute only with written permission from the author and/or developer.*.
www.developerdotstar.com




